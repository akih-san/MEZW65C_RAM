     1                        
     2                        ; minimal monitor for EhBASIC and 6502 simulator V1.05
     3                        
     4                        ; To run EhBASIC on the simulator load and assemble [F7] this file, start the simulator
     5                        ; running [F6] then start the code with the RESET [CTRL][SHIFT]R. Just selecting RUN
     6                        ; will do nothing, you'll still have to do a reset to run the code.
     7                        
     8                        		pl	0
     9                                        pw      132
    10                                        inclist on
    11                        
    12                                .include "basic.asm"
     1                        
     2                        ; Enhanced BASIC to assemble under 6502 simulator, $ver 2.22p5
     3                        
     4                        ; $E7E1 $E7CF $E7C6 $E7D3 $E7D1 $E7D5 $E7CF $E81E $E825
     5                        
     6                        ; 2.00      new revision numbers start here
     7                        ; 2.01      fixed LCASE$() and UCASE$()
     8                        ; 2.02      new get value routine done
     9                        ; 2.03      changed RND() to galoise method
    10                        ; 2.04      fixed SPC()
    11                        ; 2.05      new get value routine fixed
    12                        ; 2.06      changed USR() code
    13                        ; 2.07      fixed STR$()
    14                        ; 2.08      changed INPUT and READ to remove need for $00 start to input buffer
    15                        ; 2.09      fixed RND()
    16                        ; 2.10      integrated missed changes from an earlier version
    17                        ; 2.20      added ELSE to IF .. THEN and fixed IF .. GOTO <statement> to cause error
    18                        ; 2.21      fixed IF .. THEN RETURN to not cause error
    19                        ; 2.22      fixed RND() breaking the get byte routine
    20                        ; 2.22p     patched to disable use of decimal mode and fix Ibuff issues
    21                        ;              (bugsnquirks.txt notes 2, 4 and 5)
    22                        ;              tabs converted to spaces, tabwidth=6
    23                        ; 2.22p2    fixed can't continue error on 1st statement after direct mode
    24                        ;              changed INPUT to throw "break in line ##" on empty line input
    25                        ; 2.22p3    fixed RAM above code / Ibuff above EhBASIC patch breaks STR$()
    26                        ;              fix provided by github user mgcaret
    27                        ; 2.22p4    fixed string compare of equal strings in direct mode returns FALSE
    28                        ;              fixed FALSE stored to a variable after a string compare 
    29                        ;                 is > 0 and < 1E-16
    30                        ;              added additional stack floor protection for background interrupts
    31                        ;              fixed conditional LOOP & NEXT cannot find their data strucure on stack
    32                        ; 2.22p5    fixes issues reported by users Ruud and dclxvi on the 6502.org forum
    33                        ;      5.0     http://forum.6502.org/viewtopic.php?f=5&t=5500
    34                        ;              sanity check for RAM top allows values below RAM base
    35                        ;      5.1-7   http://forum.6502.org/viewtopic.php?f=5&t=5606
    36                        ;              1-7 coresponds to the bug# in the thread
    37                        ;      5.1     TO expression with a subtract may evaluate with the sign bit flipped
    38                        ;      5.3     call to LAB_1B5B may return to an address -$100 (page not incremented)
    39                        ;      5.4     string concatenate followed by MINUS or NOT() crashes EhBASIC
    40                        ;      5.5     garbage collection may cause an overlap with temporary strings
    41                        ;      5.6     floating point multiply rounding bug
    42                        ;      5.7     VAL() may cause string variables to be trashed
    43                        
    44                        ; zero page use ..
    45                        
    46                        ; the following locations are bulk initialized from StrTab at LAB_GMEM
    47             00000000   LAB_WARM        equ $00       ; BASIC warm start entry point
    48             00000001   Wrmjpl          equ LAB_WARM+1; BASIC warm start vector jump low byte
    49             00000002   Wrmjph          equ LAB_WARM+2; BASIC warm start vector jump high byte
    50                        
    51             0000000A   Usrjmp          equ $0A       ; USR function JMP address
    52             0000000B   Usrjpl          equ Usrjmp+1  ; USR function JMP vector low byte
    53             0000000C   Usrjph          equ Usrjmp+2  ; USR function JMP vector high byte
    54             0000000D   Nullct          equ $0D       ; nulls output after each line
    55             0000000E   TPos            equ $0E       ; BASIC terminal position byte
    56             0000000F   TWidth          equ $0F       ; BASIC terminal width byte
    57             00000010   Iclim           equ $10       ; input column limit
    58             00000011   Itempl          equ $11       ; temporary integer low byte
    59             00000012   Itemph          equ Itempl+1  ; temporary integer high byte
    60                        ; end bulk initialize from StrTab at LAB_GMEM
    61                        
    62             00000011   nums_1          equ Itempl    ; number to bin/hex string convert MSB
    63             00000012   nums_2          equ nums_1+1  ; number to bin/hex string convert
    64             00000013   nums_3          equ nums_1+2  ; number to bin/hex string convert LSB
    65                        
    66             0000005B   Srchc           equ $5B       ; search character
    67             0000005B   Temp3           equ Srchc     ; temp byte used in number routines
    68             0000005C   Scnquo          equ $5C       ; scan-between-quotes flag
    69             0000005C   Asrch           equ Scnquo    ; alt search character
    70                        
    71             0000005B   XOAw_l          equ Srchc     ; eXclusive OR, OR and AND word low byte
    72             0000005C   XOAw_h          equ Scnquo    ; eXclusive OR, OR and AND word high byte
    73                        
    74             0000005D   Ibptr           equ $5D       ; input buffer pointer
    75             0000005D   Dimcnt          equ Ibptr     ; # of dimensions
    76             0000005D   Tindx           equ Ibptr     ; token index
    77                        
    78             0000005E   Defdim          equ $5E       ; default DIM flag
    79             0000005F   Dtypef          equ $5F       ; data type flag, $FF=string, $00=numeric
    80             00000060   Oquote          equ $60       ; open quote flag (b7) (Flag: DATA scan; LIST quote; memory)
    81             00000060   Gclctd          equ $60       ; garbage collected flag
    82             00000061   Sufnxf          equ $61       ; subscript/FNX flag, 1xxx xxx = FN(0xxx xxx)
    83             00000062   Imode           equ $62       ; input mode flag, $00=INPUT, $80=READ
    84                        
    85             00000063   Cflag           equ $63       ; comparison evaluation flag
    86                        
    87             00000064   TabSiz          equ $64       ; TAB step size (was input flag)
    88                        
    89             00000065   next_s          equ $65       ; next descriptor stack address
    90                        
    91                                                      ; these two bytes form a word pointer to the item
    92                                                      ; currently on top of the descriptor stack
    93             00000066   last_sl         equ $66       ; last descriptor stack address low byte
    94             00000067   last_sh         equ $67       ; last descriptor stack address high byte (always $00)
    95                        
    96             00000068   des_sk          equ $68       ; descriptor stack start address (temp strings)
    97                        
    98                        ;               equ $70       ; End of descriptor stack
    99                        
   100             00000071   ut1_pl          equ $71       ; utility pointer 1 low byte
   101             00000072   ut1_ph          equ ut1_pl+1  ; utility pointer 1 high byte
   102             00000073   ut2_pl          equ $73       ; utility pointer 2 low byte
   103             00000074   ut2_ph          equ ut2_pl+1  ; utility pointer 2 high byte
   104                        
   105             00000071   Temp_2          equ ut1_pl    ; temp byte for block move    
   106                        
   107             00000075   FACt_1          equ $75       ; FAC temp mantissa1
   108             00000076   FACt_2          equ FACt_1+1  ; FAC temp mantissa2
   109             00000077   FACt_3          equ FACt_2+1  ; FAC temp mantissa3
   110                        
   111             00000076   dims_l          equ FACt_2    ; array dimension size low byte
   112             00000077   dims_h          equ FACt_3    ; array dimension size high byte
   113                        
   114             00000078   TempB           equ $78       ; temp page 0 byte
   115                        
   116             00000079   Smeml           equ $79       ; start of mem low byte       (Start-of-Basic)
   117             0000007A   Smemh           equ Smeml+1   ; start of mem high byte      (Start-of-Basic)
   118             0000007B   Svarl           equ $7B       ; start of vars low byte      (Start-of-Variables)
   119             0000007C   Svarh           equ Svarl+1   ; start of vars high byte     (Start-of-Variables)
   120             0000007D   Sarryl          equ $7D       ; var mem end low byte        (Start-of-Arrays)
   121             0000007E   Sarryh          equ Sarryl+1  ; var mem end high byte       (Start-of-Arrays)
   122             0000007F   Earryl          equ $7F       ; array mem end low byte      (End-of-Arrays)
   123             00000080   Earryh          equ Earryl+1  ; array mem end high byte     (End-of-Arrays)
   124             00000081   Sstorl          equ $81       ; string storage low byte     (String storage (moving down))
   125             00000082   Sstorh          equ Sstorl+1  ; string storage high byte    (String storage (moving down))
   126             00000083   Sutill          equ $83       ; string utility ptr low byte
   127             00000084   Sutilh          equ Sutill+1  ; string utility ptr high byte
   128             00000085   Ememl           equ $85       ; end of mem low byte         (Limit-of-memory)
   129             00000086   Ememh           equ Ememl+1   ; end of mem high byte        (Limit-of-memory)
   130             00000087   Clinel          equ $87       ; current line low byte       (Basic line number)
   131             00000088   Clineh          equ Clinel+1  ; current line high byte      (Basic line number)
   132             00000089   Blinel          equ $89       ; break line low byte         (Previous Basic line number)
   133             0000008A   Blineh          equ Blinel+1  ; break line high byte        (Previous Basic line number)
   134                        
   135             0000008B   Cpntrl          equ $8B       ; continue pointer low byte
   136             0000008C   Cpntrh          equ Cpntrl+1  ; continue pointer high byte
   137                        
   138             0000008D   Dlinel          equ $8D       ; current DATA line low byte
   139             0000008E   Dlineh          equ Dlinel+1  ; current DATA line high byte
   140                        
   141             0000008F   Dptrl           equ $8F       ; DATA pointer low byte
   142             00000090   Dptrh           equ Dptrl+1   ; DATA pointer high byte
   143                        
   144             00000091   Rdptrl          equ $91       ; read pointer low byte
   145             00000092   Rdptrh          equ Rdptrl+1  ; read pointer high byte
   146                        
   147             00000093   Varnm1          equ $93       ; current var name 1st byte
   148             00000094   Varnm2          equ Varnm1+1  ; current var name 2nd byte
   149                        
   150             00000095   Cvaral          equ $95       ; current var address low byte
   151             00000096   Cvarah          equ Cvaral+1  ; current var address high byte
   152                        
   153             00000097   Frnxtl          equ $97       ; var pointer for FOR/NEXT low byte
   154             00000098   Frnxth          equ Frnxtl+1  ; var pointer for FOR/NEXT high byte
   155                        
   156             00000097   Tidx1           equ Frnxtl    ; temp line index
   157                        
   158             00000097   Lvarpl          equ Frnxtl    ; let var pointer low byte
   159             00000098   Lvarph          equ Frnxth    ; let var pointer high byte
   160                        
   161             00000099   prstk           equ $99       ; precedence stacked flag
   162                        
   163             0000009B   comp_f          equ $9B       ; compare function flag, bits 0,1 and 2 used
   164                                                      ; bit 2 set if >
   165                                                      ; bit 1 set if =
   166                                                      ; bit 0 set if <
   167                        
   168             0000009C   func_l          equ $9C       ; function pointer low byte
   169             0000009D   func_h          equ func_l+1  ; function pointer high byte
   170                        
   171             0000009C   garb_l          equ func_l    ; garbage collection working pointer low byte
   172             0000009D   garb_h          equ func_h    ; garbage collection working pointer high byte
   173                        
   174             0000009E   des_2l          equ $9E       ; string descriptor_2 pointer low byte
   175             0000009F   des_2h          equ des_2l+1  ; string descriptor_2 pointer high byte
   176                        
   177             000000A0   g_step          equ $A0       ; garbage collect step size
   178                        
   179             000000A1   Fnxjmp          equ $A1       ; jump vector for functions
   180             000000A2   Fnxjpl          equ Fnxjmp+1  ; functions jump vector low byte
   181             000000A3   Fnxjph          equ Fnxjmp+2  ; functions jump vector high byte
   182                        
   183             000000A2   g_indx          equ Fnxjpl    ; garbage collect temp index
   184                        
   185             000000A3   FAC2_r          equ $A3       ; FAC2 rounding byte
   186                        
   187             000000A4   Adatal          equ $A4       ; array data pointer low byte
   188             000000A5   Adatah          equ Adatal+1  ; array data pointer high  byte
   189                        
   190             000000A4   Nbendl          equ Adatal    ; new block end pointer low byte
   191             000000A5   Nbendh          equ Adatah    ; new block end pointer high  byte
   192                        
   193             000000A6   Obendl          equ $A6       ; old block end pointer low byte
   194             000000A7   Obendh          equ Obendl+1  ; old block end pointer high  byte
   195                        
   196             000000A8   numexp          equ $A8       ; string to float number exponent count
   197             000000A9   expcnt          equ $A9       ; string to float exponent count
   198                        
   199             000000A8   numbit          equ numexp    ; bit count for array element calculations
   200                        
   201             000000AA   numdpf          equ $AA       ; string to float decimal point flag
   202             000000AB   expneg          equ $AB       ; string to float eval exponent -ve flag
   203                        
   204             000000AA   Astrtl          equ numdpf    ; array start pointer low byte
   205             000000AB   Astrth          equ expneg    ; array start pointer high  byte
   206                        
   207             000000AA   Histrl          equ numdpf    ; highest string low byte
   208             000000AB   Histrh          equ expneg    ; highest string high  byte
   209                        
   210             000000AA   Baslnl          equ numdpf    ; BASIC search line pointer low byte
   211             000000AB   Baslnh          equ expneg    ; BASIC search line pointer high  byte
   212                        
   213             000000AA   Fvar_l          equ numdpf    ; find/found variable pointer low byte
   214             000000AB   Fvar_h          equ expneg    ; find/found variable pointer high  byte
   215                        
   216             000000AA   Ostrtl          equ numdpf    ; old block start pointer low byte
   217             000000AB   Ostrth          equ expneg    ; old block start pointer high  byte
   218                        
   219             000000AA   Vrschl          equ numdpf    ; variable search pointer low byte
   220             000000AB   Vrschh          equ expneg    ; variable search pointer high  byte
   221                        
   222             000000AC   FAC1_e          equ $AC       ; FAC1 exponent
   223             000000AD   FAC1_1          equ FAC1_e+1  ; FAC1 mantissa1
   224             000000AE   FAC1_2          equ FAC1_e+2  ; FAC1 mantissa2
   225             000000AF   FAC1_3          equ FAC1_e+3  ; FAC1 mantissa3
   226             000000B0   FAC1_s          equ FAC1_e+4  ; FAC1 sign (b7)
   227                        
   228             000000AC   str_ln          equ FAC1_e    ; string length
   229             000000AD   str_pl          equ FAC1_1    ; string pointer low byte
   230             000000AE   str_ph          equ FAC1_2    ; string pointer high byte
   231                        
   232             000000AE   des_pl          equ FAC1_2    ; string descriptor pointer low byte
   233             000000AF   des_ph          equ FAC1_3    ; string descriptor pointer high byte
   234                        
   235             000000AF   mids_l          equ FAC1_3    ; MID$ string temp length byte
   236                        
   237             000000B1   negnum          equ $B1       ; string to float eval -ve flag
   238             000000B1   numcon          equ $B1       ; series evaluation constant count
   239                        
   240             000000B2   FAC1_o          equ $B2       ; FAC1 overflow byte
   241                        
   242             000000B3   FAC2_e          equ $B3       ; FAC2 exponent
   243             000000B4   FAC2_1          equ FAC2_e+1  ; FAC2 mantissa1
   244             000000B5   FAC2_2          equ FAC2_e+2  ; FAC2 mantissa2
   245             000000B6   FAC2_3          equ FAC2_e+3  ; FAC2 mantissa3
   246             000000B7   FAC2_s          equ FAC2_e+4  ; FAC2 sign (b7)
   247                        
   248             000000B8   FAC_sc          equ $B8       ; FAC sign comparison, Acc#1 vs #2
   249             000000B9   FAC1_r          equ $B9       ; FAC1 rounding byte
   250                        
   251             000000B8   ssptr_l         equ FAC_sc    ; string start pointer low byte
   252             000000B9   ssptr_h         equ FAC1_r    ; string start pointer high byte
   253                        
   254             000000B8   sdescr          equ FAC_sc    ; string descriptor pointer
   255                        
   256             000000BA   csidx           equ $BA       ; line crunch save index
   257             000000BA   Asptl           equ csidx     ; array size/pointer low byte
   258             000000BB   Aspth           equ $BB       ; array size/pointer high byte
   259                        
   260             000000BA   Btmpl           equ Asptl     ; BASIC pointer temp low byte
   261             000000BB   Btmph           equ Aspth     ; BASIC pointer temp low byte
   262                        
   263             000000BA   Cptrl           equ Asptl     ; BASIC pointer temp low byte
   264             000000BB   Cptrh           equ Aspth     ; BASIC pointer temp low byte
   265                        
   266             000000BA   Sendl           equ Asptl     ; BASIC pointer temp low byte
   267             000000BB   Sendh           equ Aspth     ; BASIC pointer temp low byte
   268                        
   269                        ; the following locations are bulk initialized from LAB_2CEE at LAB_2D4E
   270             000000BC   LAB_IGBY        equ $BC       ; get next BASIC byte subroutine
   271                        
   272             000000C2   LAB_GBYT        equ $C2       ; get current BASIC byte subroutine
   273             000000C3   Bpntrl          equ $C3       ; BASIC execute (get byte) pointer low byte
   274             000000C4   Bpntrh          equ Bpntrl+1  ; BASIC execute (get byte) pointer high byte
   275                        
   276                        ;               equ $D7       ; end of get BASIC char subroutine
   277                        ; end bulk initialize from LAB_2CEE at LAB_2D4E
   278                        
   279             000000D8   Rbyte4          equ $D8       ; extra PRNG byte
   280             000000D9   Rbyte1          equ Rbyte4+1  ; most significant PRNG byte
   281             000000DA   Rbyte2          equ Rbyte4+2  ; middle PRNG byte
   282             000000DB   Rbyte3          equ Rbyte4+3  ; least significant PRNG byte
   283                        
   284             000000DC   NmiBase         equ $DC       ; NMI handler enabled/setup/triggered flags
   285                                                      ; bit function
   286                                                      ; === ========
   287                                                      ; 7   interrupt enabled
   288                                                      ; 6   interrupt setup
   289                                                      ; 5   interrupt happened
   290                        ;               equ $DD       ; NMI handler addr low byte
   291                        ;               equ $DE       ; NMI handler addr high byte
   292             000000DF   IrqBase         equ $DF       ; IRQ handler enabled/setup/triggered flags
   293                        ;               equ $E0       ; IRQ handler addr low byte
   294                        ;               equ $E1       ; IRQ handler addr high byte
   295                        
   296                        ; *** removed unused comments for $DE-$E1
   297                        
   298                        ;               equ $E2       ; unused
   299                        ;               equ $E3       ; unused
   300                        ;               equ $E4       ; unused
   301                        ;               equ $E5       ; unused
   302                        ;               equ $E6       ; unused
   303                        ;               equ $E7       ; unused
   304                        ;               equ $E8       ; unused
   305                        ;               equ $E9       ; unused
   306                        ;               equ $EA       ; unused
   307                        ;               equ $EB       ; unused
   308                        ;               equ $EC       ; unused
   309                        ;               equ $ED       ; unused
   310                        ;               equ $EE       ; unused
   311                        
   312             000000EF   Decss           equ $EF       ; number to decimal string start
   313             000000F0   Decssp1         equ Decss+1   ; number to decimal string start
   314                        
   315                        ;               equ $FF       ; decimal string end
   316                        
   317                        ; token values needed for BASIC
   318                        
   319                        ; primary command tokens (can start a statement)
   320                        
   321             00000080   TK_END          equ $80             ; END token
   322             00000081   TK_FOR          equ TK_END+1        ; FOR token
   323             00000082   TK_NEXT         equ TK_FOR+1        ; NEXT token
   324             00000083   TK_DATA         equ TK_NEXT+1       ; DATA token
   325             00000084   TK_INPUT        equ TK_DATA+1       ; INPUT token
   326             00000085   TK_DIM          equ TK_INPUT+1      ; DIM token
   327             00000086   TK_READ         equ TK_DIM+1        ; READ token
   328             00000087   TK_LET          equ TK_READ+1       ; LET token
   329             00000088   TK_DEC          equ TK_LET+1        ; DEC token
   330             00000089   TK_GOTO         equ TK_DEC+1        ; GOTO token
   331             0000008A   TK_RUN          equ TK_GOTO+1       ; RUN token
   332             0000008B   TK_IF           equ TK_RUN+1        ; IF token
   333             0000008C   TK_RESTORE      equ TK_IF+1         ; RESTORE token
   334             0000008D   TK_GOSUB        equ TK_RESTORE+1    ; GOSUB token
   335             0000008E   TK_RETIRQ       equ TK_GOSUB+1      ; RETIRQ token
   336             0000008F   TK_RETNMI       equ TK_RETIRQ+1     ; RETNMI token
   337             00000090   TK_RETURN       equ TK_RETNMI+1     ; RETURN token
   338             00000091   TK_REM          equ TK_RETURN+1     ; REM token
   339             00000092   TK_STOP         equ TK_REM+1        ; STOP token
   340             00000093   TK_ON           equ TK_STOP+1       ; ON token
   341             00000094   TK_NULL         equ TK_ON+1         ; NULL token
   342             00000095   TK_INC          equ TK_NULL+1       ; INC token
   343             00000096   TK_WAIT         equ TK_INC+1        ; WAIT token
   344             00000097   TK_LOAD         equ TK_WAIT+1       ; LOAD token
   345             00000098   TK_SAVE         equ TK_LOAD+1       ; SAVE token
   346             00000099   TK_DEF          equ TK_SAVE+1       ; DEF token
   347             0000009A   TK_POKE         equ TK_DEF+1        ; POKE token
   348             0000009B   TK_DOKE         equ TK_POKE+1       ; DOKE token
   349             0000009C   TK_CALL         equ TK_DOKE+1       ; CALL token
   350             0000009D   TK_DO           equ TK_CALL+1       ; DO token
   351             0000009E   TK_LOOP         equ TK_DO+1         ; LOOP token
   352             0000009F   TK_PRINT        equ TK_LOOP+1       ; PRINT token
   353             000000A0   TK_CONT         equ TK_PRINT+1      ; CONT token
   354             000000A1   TK_LIST         equ TK_CONT+1       ; LIST token
   355             000000A2   TK_CLEAR        equ TK_LIST+1       ; CLEAR token
   356             000000A3   TK_NEW          equ TK_CLEAR+1      ; NEW token
   357             000000A4   TK_WIDTH        equ TK_NEW+1        ; WIDTH token
   358             000000A5   TK_GET          equ TK_WIDTH+1      ; GET token
   359             000000A6   TK_SWAP         equ TK_GET+1        ; SWAP token
   360             000000A7   TK_BITSET       equ TK_SWAP+1       ; BITSET token
   361             000000A8   TK_BITCLR       equ TK_BITSET+1     ; BITCLR token
   362             000000A9   TK_IRQ          equ TK_BITCLR+1     ; IRQ token
   363             000000AA   TK_NMI          equ TK_IRQ+1        ; NMI token
   364                        
   365                        ; secondary command tokens, can't start a statement
   366                        
   367             000000AB   TK_TAB          equ TK_NMI+1        ; TAB token
   368             000000AC   TK_ELSE         equ TK_TAB+1        ; ELSE token
   369             000000AD   TK_TO           equ TK_ELSE+1       ; TO token
   370             000000AE   TK_FN           equ TK_TO+1         ; FN token
   371             000000AF   TK_SPC          equ TK_FN+1         ; SPC token
   372             000000B0   TK_THEN         equ TK_SPC+1        ; THEN token
   373             000000B1   TK_NOT          equ TK_THEN+1       ; NOT token
   374             000000B2   TK_STEP         equ TK_NOT+1        ; STEP token
   375             000000B3   TK_UNTIL        equ TK_STEP+1       ; UNTIL token
   376             000000B4   TK_WHILE        equ TK_UNTIL+1      ; WHILE token
   377             000000B5   TK_OFF          equ TK_WHILE+1      ; OFF token
   378                        
   379                        ; opperator tokens
   380                        
   381             000000B6   TK_PLUS         equ TK_OFF+1        ; + token
   382             000000B7   TK_MINUS        equ TK_PLUS+1       ; - token
   383             000000B8   TK_MUL          equ TK_MINUS+1      ; * token
   384             000000B9   TK_DIV          equ TK_MUL+1        ; / token
   385             000000BA   TK_POWER        equ TK_DIV+1        ; ^ token
   386             000000BB   TK_AND          equ TK_POWER+1      ; AND token
   387             000000BC   TK_EOR          equ TK_AND+1        ; EOR token
   388             000000BD   TK_OR           equ TK_EOR+1        ; OR token
   389             000000BE   TK_RSHIFT       equ TK_OR+1         ; RSHIFT token
   390             000000BF   TK_LSHIFT       equ TK_RSHIFT+1     ; LSHIFT token
   391             000000C0   TK_GT           equ TK_LSHIFT+1     ; > token
   392             000000C1   TK_EQUAL        equ TK_GT+1         ; = token
   393             000000C2   TK_LT           equ TK_EQUAL+1      ; < token
   394                        
   395                        ; functions tokens
   396                        
   397             000000C3   TK_SGN          equ TK_LT+1         ; SGN token
   398             000000C4   TK_INT          equ TK_SGN+1        ; INT token
   399             000000C5   TK_ABS          equ TK_INT+1        ; ABS token
   400             000000C6   TK_USR          equ TK_ABS+1        ; USR token
   401             000000C7   TK_FRE          equ TK_USR+1        ; FRE token
   402             000000C8   TK_POS          equ TK_FRE+1        ; POS token
   403             000000C9   TK_SQR          equ TK_POS+1        ; SQR token
   404             000000CA   TK_RND          equ TK_SQR+1        ; RND token
   405             000000CB   TK_LOG          equ TK_RND+1        ; LOG token
   406             000000CC   TK_EXP          equ TK_LOG+1        ; EXP token
   407             000000CD   TK_COS          equ TK_EXP+1        ; COS token
   408             000000CE   TK_SIN          equ TK_COS+1        ; SIN token
   409             000000CF   TK_TAN          equ TK_SIN+1        ; TAN token
   410             000000D0   TK_ATN          equ TK_TAN+1        ; ATN token
   411             000000D1   TK_PEEK         equ TK_ATN+1        ; PEEK token
   412             000000D2   TK_DEEK         equ TK_PEEK+1       ; DEEK token
   413             000000D3   TK_SADD         equ TK_DEEK+1       ; SADD token
   414             000000D4   TK_LEN          equ TK_SADD+1       ; LEN token
   415             000000D5   TK_STRS         equ TK_LEN+1        ; STR$ token
   416             000000D6   TK_VAL          equ TK_STRS+1       ; VAL token
   417             000000D7   TK_ASC          equ TK_VAL+1        ; ASC token
   418             000000D8   TK_UCASES       equ TK_ASC+1        ; UCASE$ token
   419             000000D9   TK_LCASES       equ TK_UCASES+1     ; LCASE$ token
   420             000000DA   TK_CHRS         equ TK_LCASES+1     ; CHR$ token
   421             000000DB   TK_HEXS         equ TK_CHRS+1       ; HEX$ token
   422             000000DC   TK_BINS         equ TK_HEXS+1       ; BIN$ token
   423             000000DD   TK_BITTST       equ TK_BINS+1       ; BITTST token
   424             000000DE   TK_MAX          equ TK_BITTST+1     ; MAX token
   425             000000DF   TK_MIN          equ TK_MAX+1        ; MIN token
   426             000000E0   TK_PI           equ TK_MIN+1        ; PI token
   427             000000E1   TK_TWOPI        equ TK_PI+1         ; TWOPI token
   428             000000E2   TK_VPTR         equ TK_TWOPI+1      ; VARPTR token
   429             000000E3   TK_LEFTS        equ TK_VPTR+1       ; LEFT$ token
   430             000000E4   TK_RIGHTS       equ TK_LEFTS+1      ; RIGHT$ token
   431             000000E5   TK_MIDS         equ TK_RIGHTS+1     ; MID$ token
   432                        
   433                        ; offsets from a base of X or Y
   434                        
   435             00000000   PLUS_0          equ $00       ; X or Y plus 0
   436             00000001   PLUS_1          equ $01       ; X or Y plus 1
   437             00000002   PLUS_2          equ $02       ; X or Y plus 2
   438             00000003   PLUS_3          equ $03       ; X or Y plus 3
   439                        
   440             00000100   LAB_STAK        equ $0100     ; stack bottom, no offset
   441                        
   442             000001FE   LAB_SKFE        equ LAB_STAK+$FE
   443                                                      ; flushed stack address
   444             000001FF   LAB_SKFF        equ LAB_STAK+$FF
   445                                                      ; flushed stack address
   446                        
   447                        ; the following locations are bulk initialized from PG2_TABS at LAB_COLD
   448             00000200   ccflag          equ $0200     ; BASIC CTRL-C flag, 00 = enabled, 01 = dis
   449             00000201   ccbyte          equ ccflag+1  ; BASIC CTRL-C byte
   450             00000202   ccnull          equ ccbyte+1  ; BASIC CTRL-C byte timeout
   451                        
   452             00000203   VEC_CC          equ ccnull+1  ; ctrl c check vector
   453                        ; end bulk initialize from PG2_TABS at LAB_COLD
   454                        
   455                        ; the following locations are bulk initialized by min_mon.asm from LAB_vec at LAB_stlp
   456             00000205   VEC_IN          equ VEC_CC+2  ; input vector
   457             00000207   VEC_OUT         equ VEC_IN+2  ; output vector
   458             00000209   VEC_LD          equ VEC_OUT+2 ; load vector
   459             0000020B   VEC_SV          equ VEC_LD+2  ; save vector
   460                        ; end bulk initialize by min_mon.asm from LAB_vec at LAB_stlp
   461                        
   462                        ; Ibuffs can now be anywhere in RAM, ensure that the max length is < $80,
   463                        ; the input buffer must not cross a page boundary and must not overlap with
   464                        ; program RAM pages!
   465                        
   466                        ;Ibuffs          equ IRQ_vec+$14
   467             00000221   Ibuffs          equ VEC_SV+$16
   468                                                      ; start of input buffer after IRQ/NMI code
   469             00000268   Ibuffe          equ Ibuffs+$47; end of input buffer
   470                        
   471             00000300   Ram_base        equ $0300     ; start of user RAM (set as needed, should be page aligned)
   472             0000D700   Ram_top         equ $D700     ; end of user RAM+1 (set as needed, should be page aligned)
   473                        
   474             00000010   Stack_floor     equ 16        ; bytes left free on stack for background interrupts
   475                        
   476                        ; This start can be changed to suit your system
   477                        
   478                              org    Ram_top
   479                        
   480                        ; BASIC cold start entry point
   481                        
   482                        ; new page 2 initialisation, copy block to ccflag on
   483                        
   484                        LAB_COLD
   485 00:D700: A0 04              LDY   #PG2_TABE-PG2_TABS-1
   486                                                      ; byte count-1
   487                        LAB_2D13
   488 00:D702: B9 04 F8           LDA   PG2_TABS,Y        ; get byte
   489 00:D705: 99 00 02           STA   ccflag,Y          ; store in page 2
   490 00:D708: 88                 DEY                     ; decrement count
   491 00:D709: 10 F7              BPL   LAB_2D13          ; loop if not done
   492                        
   493 00:D70B: A2 FF              LDX   #$FF              ; set byte
   494 00:D70D: 86 88              STX   Clineh            ; set current line high byte (set immediate mode)
   495 00:D70F: 9A                 TXS                     ; reset stack pointer
   496                        
   497 00:D710: A9 4C              LDA   #$4C              ; code for JMP
   498 00:D712: 85 A1              STA   Fnxjmp            ; save for jump vector for functions
   499                        
   500                        ; copy block from LAB_2CEE to $00BC - $00D7
   501                        
   502 00:D714: A2 1C              LDX   #StrTab-LAB_2CEE  ; set byte count
   503                        LAB_2D4E
   504 00:D716: BD 08 F8           LDA   LAB_2CEE-1,X      ; get byte from table
   505 00:D719: 95 BB              STA   LAB_IGBY-1,X      ; save byte in page zero
   506 00:D71B: CA                 DEX                     ; decrement count
   507 00:D71C: D0 F8              BNE   LAB_2D4E          ; loop if not all done
   508                        
   509                        ; copy block from StrTab to $0000 - $0012
   510                        
   511                        LAB_GMEM
   512 00:D71E: A2 12              LDX   #EndTab-StrTab-1  ; set byte count-1
   513                        TabLoop
   514 00:D720: BD 25 F8           LDA   StrTab,X          ; get byte from table
   515 00:D723: 95 00              STA   PLUS_0,X          ; save byte in page zero
   516 00:D725: CA                 DEX                     ; decrement count
   517 00:D726: 10 F8              BPL   TabLoop           ; loop if not all done
   518                        
   519                        ; set-up start values
   520                        
   521 00:D728: A9 00              LDA   #$00              ; clear A
   522 00:D72A: 85 DC              STA   NmiBase           ; clear NMI handler enabled flag
   523 00:D72C: 85 DF              STA   IrqBase           ; clear IRQ handler enabled flag
   524 00:D72E: 85 B2              STA   FAC1_o            ; clear FAC1 overflow byte
   525 00:D730: 85 67              STA   last_sh           ; clear descriptor stack top item pointer high byte
   526                        
   527 00:D732: A9 0E              LDA   #$0E              ; set default tab size
   528 00:D734: 85 64              STA   TabSiz            ; save it
   529 00:D736: A9 03              LDA   #$03              ; set garbage collect step size for descriptor stack
   530 00:D738: 85 A0              STA   g_step            ; save it
   531 00:D73A: A2 68              LDX   #des_sk           ; descriptor stack start
   532 00:D73C: 86 65              STX   next_s            ; set descriptor stack pointer
   533 00:D73E: 20 93 DF           JSR   LAB_CRLF          ; print CR/LF
   534 00:D741: A9 38              LDA   #<LAB_MSZM        ; point to memory size message (low addr)
   535 00:D743: A0 F8              LDY   #>LAB_MSZM        ; point to memory size message (high addr)
   536 00:D745: 20 D4 DF           JSR   LAB_18C3          ; print null terminated string from memory
   537 00:D748: 20 43 D9           JSR   LAB_INLN          ; print "? " and get BASIC input
   538 00:D74B: 86 C3              STX   Bpntrl            ; set BASIC execute pointer low byte
   539 00:D74D: 84 C4              STY   Bpntrh            ; set BASIC execute pointer high byte
   540 00:D74F: 20 C2 00           JSR   LAB_GBYT          ; get last byte back
   541                        
   542 00:D752: D0 1F              BNE   LAB_2DAA          ; branch if not null (user typed something)
   543                        
   544 00:D754: A0 00              LDY   #$00              ; else clear Y
   545                                                      ; character was null so get memory size the hard way
   546                                                      ; we get here with Y=0 and Itempl/h = Ram_base
   547                        LAB_2D93
   548 00:D756: E6 11              INC   Itempl            ; increment temporary integer low byte
   549 00:D758: D0 08              BNE   LAB_2D99          ; branch if no overflow
   550                        
   551 00:D75A: E6 12              INC   Itemph            ; increment temporary integer high byte
   552 00:D75C: A5 12              LDA   Itemph            ; get high byte
   553 00:D75E: C9 D7              CMP   #>Ram_top         ; compare with top of RAM+1
   554 00:D760: F0 1D              BEQ   LAB_2DB6          ; branch if match (end of user RAM)
   555                        
   556                        LAB_2D99
   557 00:D762: A9 55              LDA   #$55              ; set test byte
   558 00:D764: 91 11              STA   (Itempl),Y        ; save via temporary integer
   559 00:D766: D1 11              CMP   (Itempl),Y        ; compare via temporary integer
   560 00:D768: D0 15              BNE   LAB_2DB6          ; branch if fail
   561                        
   562 00:D76A: 0A                 ASL                     ; shift test byte left (now $AA)
   563 00:D76B: 91 11              STA   (Itempl),Y        ; save via temporary integer
   564 00:D76D: D1 11              CMP   (Itempl),Y        ; compare via temporary integer
   565 00:D76F: F0 E5              BEQ   LAB_2D93          ; if ok go do next byte
   566                        
   567 00:D771: D0 0C              BNE   LAB_2DB6          ; branch if fail
   568                        
   569                        LAB_2DAA
   570 00:D773: 20 B3 F0           JSR   LAB_2887          ; get FAC1 from string
   571 00:D776: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
   572 00:D778: C9 98              CMP   #$98              ; compare with exponent = 2^24
   573 00:D77A: B0 A2              BCS   LAB_GMEM          ; if too large go try again
   574                        
   575 00:D77C: 20 04 EC           JSR   LAB_F2FU          ; save integer part of FAC1 in temporary integer
   576                                                      ; (no range check)
   577                        
   578                        LAB_2DB6
   579 00:D77F: A5 11              LDA   Itempl            ; get temporary integer low byte
   580 00:D781: A4 12              LDY   Itemph            ; get temporary integer high byte
   581                        ; *** begin patch  2.22p5.0 RAM top sanity check ***
   582                        ; *** replace
   583                        ;      CPY   #<Ram_base+$100      ; compare with start of RAM+$100 high byte
   584                        ; +++ with
   585 00:D783: C0 04              CPY   #>Ram_base+$100      ; compare with start of RAM+$100 high byte
   586                        ; *** end patch    2.22p5.0 ***
   587 00:D785: 90 97              BCC   LAB_GMEM          ; if too small go try again
   588                        
   589                        
   590                        ; uncomment these lines if you want to check on the high limit of memory. Note if
   591                        ; Ram_top is set too low then this will fail. default is ignore it and assume the
   592                        ; users know what they're doing!
   593                        
   594                        ;     CPY   #>Ram_top         ; compare with top of RAM high byte
   595                        ;     BCC   MEM_OK            ; branch if < RAM top
   596                        
   597                        ;     BNE   LAB_GMEM          ; if too large go try again
   598                                                      ; else was = so compare low bytes
   599                        ;     CMP   #<Ram_top         ; compare with top of RAM low byte
   600                        ;     BEQ   MEM_OK            ; branch if = RAM top
   601                        
   602                        ;     BCS   LAB_GMEM          ; if too large go try again
   603                        
   604                        ;MEM_OK
   605 00:D787: 85 85              STA   Ememl             ; set end of mem low byte
   606 00:D789: 84 86              STY   Ememh             ; set end of mem high byte
   607 00:D78B: 85 81              STA   Sstorl            ; set bottom of string space low byte
   608 00:D78D: 84 82              STY   Sstorh            ; set bottom of string space high byte
   609                        
   610 00:D78F: A0 00              LDY   #<Ram_base        ; set start addr low byte
   611 00:D791: A2 03              LDX   #>Ram_base        ; set start addr high byte
   612 00:D793: 84 79              STY   Smeml             ; save start of mem low byte
   613 00:D795: 86 7A              STX   Smemh             ; save start of mem high byte
   614                        
   615                        ; this line is only needed if Ram_base is not $xx00
   616                              .IF   Ram_base&$FF>0
   617                              LDY   #$00              ; clear Y
   618                              .ENDIF
   619                        
   620 00:D797: 98                 TYA                     ; clear A
   621 00:D798: 91 79              STA   (Smeml),Y         ; clear first byte
   622 00:D79A: E6 79              INC   Smeml             ; increment start of mem low byte
   623                        
   624                        ; these two lines are only needed if Ram_base is $xxFF
   625                              .IF   Ram_base&$FF=$FF
   626                              BNE   LAB_2E05          ; branch if no rollover
   627                              INC   Smemh             ; increment start of mem high byte
   628                        LAB_2E05
   629                              .ENDIF
   630                        
   631 00:D79C: 20 93 DF           JSR   LAB_CRLF          ; print CR/LF
   632 00:D79F: 20 53 DA           JSR   LAB_1463          ; do "NEW" and "CLEAR"
   633 00:D7A2: A5 85              LDA   Ememl             ; get end of mem low byte
   634 00:D7A4: 38                 SEC                     ; set carry for subtract
   635 00:D7A5: E5 79              SBC   Smeml             ; subtract start of mem low byte
   636 00:D7A7: AA                 TAX                     ; copy to X
   637 00:D7A8: A5 86              LDA   Ememh             ; get end of mem high byte
   638 00:D7AA: E5 7A              SBC   Smemh             ; subtract start of mem high byte
   639 00:D7AC: 20 8F F1           JSR   LAB_295E          ; print XA as unsigned integer (bytes free)
   640 00:D7AF: A9 47              LDA   #<LAB_SMSG        ; point to sign-on message (low addr)
   641 00:D7B1: A0 F8              LDY   #>LAB_SMSG        ; point to sign-on message (high addr)
   642 00:D7B3: 20 D4 DF           JSR   LAB_18C3          ; print null terminated string from memory
   643 00:D7B6: A9 5D              LDA   #<LAB_1274        ; warm start vector low byte
   644 00:D7B8: A0 D8              LDY   #>LAB_1274        ; warm start vector high byte
   645 00:D7BA: 85 01              STA   Wrmjpl            ; save warm start vector low byte
   646 00:D7BC: 84 02              STY   Wrmjph            ; save warm start vector high byte
   647 00:D7BE: 6C 01 00           JMP   (Wrmjpl)          ; go do warm start
   648                        
   649                        ; open up space in memory
   650                        ; move (Ostrtl)-(Obendl) to new block ending at (Nbendl)
   651                        
   652                        ; Nbendl,Nbendh - new block end address (A/Y)
   653                        ; Obendl,Obendh - old block end address
   654                        ; Ostrtl,Ostrth - old block start address
   655                        
   656                        ; returns with ..
   657                        
   658                        ; Nbendl,Nbendh - new block start address (high byte - $100)
   659                        ; Obendl,Obendh - old block start address (high byte - $100)
   660                        ; Ostrtl,Ostrth - old block start address (unchanged)
   661                        
   662                        LAB_11CF
   663 00:D7C1: 20 0E D8           JSR   LAB_121F          ; check available memory, "Out of memory" error if no room
   664                                                      ; addr to check is in AY (low/high)
   665 00:D7C4: 85 7F              STA   Earryl            ; save new array mem end low byte
   666 00:D7C6: 84 80              STY   Earryh            ; save new array mem end high byte
   667                        
   668                        ; open up space in memory
   669                        ; move (Ostrtl)-(Obendl) to new block ending at (Nbendl)
   670                        ; don't set array end
   671                        
   672                        LAB_11D6
   673 00:D7C8: 38                 SEC                     ; set carry for subtract
   674 00:D7C9: A5 A6              LDA   Obendl            ; get block end low byte
   675 00:D7CB: E5 AA              SBC   Ostrtl            ; subtract block start low byte
   676 00:D7CD: A8                 TAY                     ; copy MOD(block length/$100) byte to Y
   677 00:D7CE: A5 A7              LDA   Obendh            ; get block end high byte
   678 00:D7D0: E5 AB              SBC   Ostrth            ; subtract block start high byte
   679 00:D7D2: AA                 TAX                     ; copy block length high byte to X
   680 00:D7D3: E8                 INX                     ; +1 to allow for count=0 exit
   681 00:D7D4: 98                 TYA                     ; copy block length low byte to A
   682 00:D7D5: F0 24              BEQ   LAB_120A          ; branch if length low byte=0
   683                        
   684                                                      ; block is (X-1)*256+Y bytes, do the Y bytes first
   685                        
   686 00:D7D7: 38                 SEC                     ; set carry for add + 1, two's complement
   687 00:D7D8: 49 FF              EOR   #$FF              ; invert low byte for subtract
   688 00:D7DA: 65 A6              ADC   Obendl            ; add block end low byte
   689                        
   690 00:D7DC: 85 A6              STA   Obendl            ; save corrected old block end low byte
   691 00:D7DE: B0 03              BCS   LAB_11F3          ; branch if no underflow
   692                        
   693 00:D7E0: C6 A7              DEC   Obendh            ; else decrement block end high byte
   694 00:D7E2: 38                 SEC                     ; set carry for add + 1, two's complement
   695                        LAB_11F3
   696 00:D7E3: 98                 TYA                     ; get MOD(block length/$100) byte
   697 00:D7E4: 49 FF              EOR   #$FF              ; invert low byte for subtract
   698 00:D7E6: 65 A4              ADC   Nbendl            ; add destination end low byte
   699 00:D7E8: 85 A4              STA   Nbendl            ; save modified new block end low byte
   700 00:D7EA: B0 08              BCS   LAB_1203          ; branch if no underflow
   701                        
   702 00:D7EC: C6 A5              DEC   Nbendh            ; else decrement block end high byte
   703 00:D7EE: 90 04              BCC   LAB_1203          ; branch always
   704                        
   705                        LAB_11FF
   706 00:D7F0: B1 A6              LDA   (Obendl),Y        ; get byte from source
   707 00:D7F2: 91 A4              STA   (Nbendl),Y        ; copy byte to destination
   708                        LAB_1203
   709 00:D7F4: 88                 DEY                     ; decrement index
   710 00:D7F5: D0 F9              BNE   LAB_11FF          ; loop until Y=0
   711                        
   712                                                      ; now do Y=0 indexed byte
   713 00:D7F7: B1 A6              LDA   (Obendl),Y        ; get byte from source
   714 00:D7F9: 91 A4              STA   (Nbendl),Y        ; save byte to destination
   715                        LAB_120A
   716 00:D7FB: C6 A7              DEC   Obendh            ; decrement source pointer high byte
   717 00:D7FD: C6 A5              DEC   Nbendh            ; decrement destination pointer high byte
   718 00:D7FF: CA                 DEX                     ; decrement block count
   719 00:D800: D0 F2              BNE   LAB_1203          ; loop until count = $0
   720                        
   721 00:D802: 60                 RTS
   722                        
   723                        ; check room on stack for A bytes
   724                        ; stack too deep? do OM error
   725                        
   726                        LAB_1212
   727                        ; *** patch - additional stack floor protection for background interrupts
   728                        ; *** add
   729                              .IF   Stack_floor
   730 00:D803: 18                 CLC                     ; prep ADC
   731 00:D804: 69 10              ADC   #Stack_floor      ; stack pointer lower limit before interrupts
   732                              .ENDIF
   733                        ; *** end patch
   734 00:D806: 85 78              STA   TempB             ; save result in temp byte
   735 00:D808: BA                 TSX                     ; copy stack
   736 00:D809: E4 78              CPX   TempB             ; compare new "limit" with stack
   737 00:D80B: 90 30              BCC   LAB_OMER          ; if stack < limit do "Out of memory" error then warm start
   738                        
   739 00:D80D: 60                 RTS
   740                        
   741                        ; check available memory, "Out of memory" error if no room
   742                        ; addr to check is in AY (low/high)
   743                        
   744                        LAB_121F
   745 00:D80E: C4 82              CPY   Sstorh            ; compare bottom of string mem high byte
   746 00:D810: 90 2A              BCC   LAB_124B          ; if less then exit (is ok)
   747                        
   748 00:D812: D0 04              BNE   LAB_1229          ; skip next test if greater (tested <)
   749                        
   750                                                      ; high byte was =, now do low byte
   751 00:D814: C5 81              CMP   Sstorl            ; compare with bottom of string mem low byte
   752 00:D816: 90 24              BCC   LAB_124B          ; if less then exit (is ok)
   753                        
   754                                                      ; addr is > string storage ptr (oops!)
   755                        LAB_1229
   756 00:D818: 48                 PHA                     ; push addr low byte
   757 00:D819: A2 08              LDX   #$08              ; set index to save Adatal to expneg inclusive
   758 00:D81B: 98                 TYA                     ; copy addr high byte (to push on stack)
   759                        
   760                                                      ; save misc numeric work area
   761                        LAB_122D
   762 00:D81C: 48                 PHA                     ; push byte
   763 00:D81D: B5 A3              LDA   Adatal-1,X        ; get byte from Adatal to expneg ( ,$00 not pushed)
   764 00:D81F: CA                 DEX                     ; decrement index
   765 00:D820: 10 FA              BPL   LAB_122D          ; loop until all done
   766                        
   767 00:D822: 20 EF E8           JSR   LAB_GARB          ; garbage collection routine
   768                        
   769                                                      ; restore misc numeric work area
   770 00:D825: A2 00              LDX   #$00              ; clear the index to restore bytes
   771                        LAB_1238
   772 00:D827: 68                 PLA                     ; pop byte
   773 00:D828: 95 A4              STA   Adatal,X          ; save byte to Adatal to expneg
   774 00:D82A: E8                 INX                     ; increment index
   775 00:D82B: E0 08              CPX   #$08              ; compare with end + 1
   776 00:D82D: 30 F8              BMI   LAB_1238          ; loop if more to do
   777                        
   778 00:D82F: 68                 PLA                     ; pop addr high byte
   779 00:D830: A8                 TAY                     ; copy back to Y
   780 00:D831: 68                 PLA                     ; pop addr low byte
   781 00:D832: C4 82              CPY   Sstorh            ; compare bottom of string mem high byte
   782 00:D834: 90 06              BCC   LAB_124B          ; if less then exit (is ok)
   783                        
   784 00:D836: D0 05              BNE   LAB_OMER          ; if greater do "Out of memory" error then warm start
   785                        
   786                                                      ; high byte was =, now do low byte
   787 00:D838: C5 81              CMP   Sstorl            ; compare with bottom of string mem low byte
   788 00:D83A: B0 01              BCS   LAB_OMER          ; if >= do "Out of memory" error then warm start
   789                        
   790                                                      ; ok exit, carry clear
   791                        LAB_124B
   792 00:D83C: 60                 RTS
   793                        
   794                        ; do "Out of memory" error then warm start
   795                        
   796                        LAB_OMER
   797 00:D83D: A2 0C              LDX   #$0C              ; error code $0C ("Out of memory" error)
   798                        
   799                        ; do error #X, then warm start
   800                        
   801                        LAB_XERR
   802 00:D83F: 20 93 DF           JSR   LAB_CRLF          ; print CR/LF
   803                        
   804 00:D842: BD B9 FD           LDA   LAB_BAER,X        ; get error message pointer low byte
   805 00:D845: BC BA FD           LDY   LAB_BAER+1,X      ; get error message pointer high byte
   806 00:D848: 20 D4 DF           JSR   LAB_18C3          ; print null terminated string from memory
   807                        
   808 00:D84B: 20 8C DA           JSR   LAB_1491          ; flush stack and clear continue flag
   809 00:D84E: A9 F6              LDA   #<LAB_EMSG        ; point to " Error" low addr
   810 00:D850: A0 FE              LDY   #>LAB_EMSG        ; point to " Error" high addr
   811                        LAB_1269
   812 00:D852: 20 D4 DF           JSR   LAB_18C3          ; print null terminated string from memory
   813 00:D855: A4 88              LDY   Clineh            ; get current line high byte
   814 00:D857: C8                 INY                     ; increment it
   815 00:D858: F0 03              BEQ   LAB_1274          ; go do warm start (was immediate mode)
   816                        
   817                                                      ; else print line number
   818 00:D85A: 20 84 F1           JSR   LAB_2953          ; print " in line [LINE #]"
   819                        
   820                        ; BASIC warm start entry point
   821                        ; wait for Basic command
   822                        
   823                        LAB_1274
   824                                                      ; clear ON IRQ/NMI bytes
   825 00:D85D: A9 00              LDA   #$00              ; clear A
   826 00:D85F: 85 DF              STA   IrqBase           ; clear enabled byte
   827 00:D861: 85 DC              STA   NmiBase           ; clear enabled byte
   828 00:D863: A9 07              LDA   #<LAB_RMSG        ; point to "Ready" message low byte
   829 00:D865: A0 FF              LDY   #>LAB_RMSG        ; point to "Ready" message high byte
   830                        
   831 00:D867: 20 D4 DF           JSR   LAB_18C3          ; go do print string
   832                        
   833                        ; wait for Basic command (no "Ready")
   834                        
   835                        LAB_127D
   836 00:D86A: 20 50 D9           JSR   LAB_1357          ; call for BASIC input
   837                        LAB_1280
   838 00:D86D: 86 C3              STX   Bpntrl            ; set BASIC execute pointer low byte
   839 00:D86F: 84 C4              STY   Bpntrh            ; set BASIC execute pointer high byte
   840 00:D871: 20 C2 00           JSR   LAB_GBYT          ; scan memory
   841 00:D874: F0 F4              BEQ   LAB_127D          ; loop while null
   842                        
   843                        ; got to interpret input line now ..
   844                        
   845 00:D876: A2 FF              LDX   #$FF              ; current line to null value
   846 00:D878: 86 88              STX   Clineh            ; set current line high byte
   847 00:D87A: 90 06              BCC   LAB_1295          ; branch if numeric character (handle new BASIC line)
   848                        
   849                                                      ; no line number .. immediate mode
   850 00:D87C: 20 81 D9           JSR   LAB_13A6          ; crunch keywords into Basic tokens
   851 00:D87F: 4C F5 DB           JMP   LAB_15F6          ; go scan and interpret code
   852                        
   853                        ; handle new BASIC line
   854                        
   855                        LAB_1295
   856 00:D882: 20 56 DE           JSR   LAB_GFPN          ; get fixed-point number into temp integer
   857 00:D885: 20 81 D9           JSR   LAB_13A6          ; crunch keywords into Basic tokens
   858 00:D888: 84 5D              STY   Ibptr             ; save index pointer to end of crunched line
   859 00:D88A: 20 27 DA           JSR   LAB_SSLN          ; search BASIC for temp integer line number
   860 00:D88D: 90 44              BCC   LAB_12E6          ; branch if not found
   861                        
   862                                                      ; aroooogah! line # already exists! delete it
   863 00:D88F: A0 01              LDY   #$01              ; set index to next line pointer high byte
   864 00:D891: B1 AA              LDA   (Baslnl),Y        ; get next line pointer high byte
   865 00:D893: 85 72              STA   ut1_ph            ; save it
   866 00:D895: A5 7B              LDA   Svarl             ; get start of vars low byte
   867 00:D897: 85 71              STA   ut1_pl            ; save it
   868 00:D899: A5 AB              LDA   Baslnh            ; get found line pointer high byte
   869 00:D89B: 85 74              STA   ut2_ph            ; save it
   870 00:D89D: A5 AA              LDA   Baslnl            ; get found line pointer low byte
   871 00:D89F: 88                 DEY                     ; decrement index
   872 00:D8A0: F1 AA              SBC   (Baslnl),Y        ; subtract next line pointer low byte
   873 00:D8A2: 18                 CLC                     ; clear carry for add
   874 00:D8A3: 65 7B              ADC   Svarl             ; add start of vars low byte
   875 00:D8A5: 85 7B              STA   Svarl             ; save new start of vars low byte
   876 00:D8A7: 85 73              STA   ut2_pl            ; save destination pointer low byte
   877 00:D8A9: A5 7C              LDA   Svarh             ; get start of vars high byte
   878 00:D8AB: 69 FF              ADC   #$FF              ; -1 + carry
   879 00:D8AD: 85 7C              STA   Svarh             ; save start of vars high byte
   880 00:D8AF: E5 AB              SBC   Baslnh            ; subtract found line pointer high byte
   881 00:D8B1: AA                 TAX                     ; copy to block count
   882 00:D8B2: 38                 SEC                     ; set carry for subtract
   883 00:D8B3: A5 AA              LDA   Baslnl            ; get found line pointer low byte
   884 00:D8B5: E5 7B              SBC   Svarl             ; subtract start of vars low byte
   885 00:D8B7: A8                 TAY                     ; copy to bytes in first block count
   886 00:D8B8: B0 03              BCS   LAB_12D0          ; branch if overflow
   887                        
   888 00:D8BA: E8                 INX                     ; increment block count (correct for =0 loop exit)
   889 00:D8BB: C6 74              DEC   ut2_ph            ; decrement destination high byte
   890                        LAB_12D0
   891 00:D8BD: 18                 CLC                     ; clear carry for add
   892 00:D8BE: 65 71              ADC   ut1_pl            ; add source pointer low byte
   893 00:D8C0: 90 03              BCC   LAB_12D8          ; branch if no overflow
   894                        
   895 00:D8C2: C6 72              DEC   ut1_ph            ; else decrement source pointer high byte
   896 00:D8C4: 18                 CLC                     ; clear carry
   897                        
   898                                                      ; close up memory to delete old line
   899                        LAB_12D8
   900 00:D8C5: B1 71              LDA   (ut1_pl),Y        ; get byte from source
   901 00:D8C7: 91 73              STA   (ut2_pl),Y        ; copy to destination
   902 00:D8C9: C8                 INY                     ; increment index
   903 00:D8CA: D0 F9              BNE   LAB_12D8          ; while <> 0 do this block
   904                        
   905 00:D8CC: E6 72              INC   ut1_ph            ; increment source pointer high byte
   906 00:D8CE: E6 74              INC   ut2_ph            ; increment destination pointer high byte
   907 00:D8D0: CA                 DEX                     ; decrement block count
   908 00:D8D1: D0 F2              BNE   LAB_12D8          ; loop until all done
   909                        
   910                                                      ; got new line in buffer and no existing same #
   911                        LAB_12E6
   912 00:D8D3: AD 21 02           LDA   Ibuffs            ; get byte from start of input buffer
   913 00:D8D6: F0 3F              BEQ   LAB_1319          ; if null line just go flush stack/vars and exit
   914                        
   915                                                      ; got new line and it isn't empty line
   916 00:D8D8: A5 85              LDA   Ememl             ; get end of mem low byte
   917 00:D8DA: A4 86              LDY   Ememh             ; get end of mem high byte
   918 00:D8DC: 85 81              STA   Sstorl            ; set bottom of string space low byte
   919 00:D8DE: 84 82              STY   Sstorh            ; set bottom of string space high byte
   920 00:D8E0: A5 7B              LDA   Svarl             ; get start of vars low byte  (end of BASIC)
   921 00:D8E2: 85 A6              STA   Obendl            ; save old block end low byte
   922 00:D8E4: A4 7C              LDY   Svarh             ; get start of vars high byte (end of BASIC)
   923 00:D8E6: 84 A7              STY   Obendh            ; save old block end high byte
   924 00:D8E8: 65 5D              ADC   Ibptr             ; add input buffer pointer    (also buffer length)
   925 00:D8EA: 90 01              BCC   LAB_1301          ; branch if no overflow from add
   926                        
   927 00:D8EC: C8                 INY                     ; else increment high byte
   928                        LAB_1301
   929 00:D8ED: 85 A4              STA   Nbendl            ; save new block end low byte (move to, low byte)
   930 00:D8EF: 84 A5              STY   Nbendh            ; save new block end high byte
   931 00:D8F1: 20 C1 D7           JSR   LAB_11CF          ; open up space in memory
   932                                                      ; old start pointer Ostrtl,Ostrth set by the find line call
   933 00:D8F4: A5 7F              LDA   Earryl            ; get array mem end low byte
   934 00:D8F6: A4 80              LDY   Earryh            ; get array mem end high byte
   935 00:D8F8: 85 7B              STA   Svarl             ; save start of vars low byte
   936 00:D8FA: 84 7C              STY   Svarh             ; save start of vars high byte
   937 00:D8FC: A4 5D              LDY   Ibptr             ; get input buffer pointer    (also buffer length)
   938 00:D8FE: 88                 DEY                     ; adjust for loop type
   939                        LAB_1311
   940 00:D8FF: B9 1D 02           LDA   Ibuffs-4,Y        ; get byte from crunched line
   941 00:D902: 91 AA              STA   (Baslnl),Y        ; save it to program memory
   942 00:D904: 88                 DEY                     ; decrement count
   943 00:D905: C0 03              CPY   #$03              ; compare with first byte-1
   944 00:D907: D0 F6              BNE   LAB_1311          ; continue while count <> 3
   945                        
   946 00:D909: A5 12              LDA   Itemph            ; get line # high byte
   947 00:D90B: 91 AA              STA   (Baslnl),Y        ; save it to program memory
   948 00:D90D: 88                 DEY                     ; decrement count
   949 00:D90E: A5 11              LDA   Itempl            ; get line # low byte
   950 00:D910: 91 AA              STA   (Baslnl),Y        ; save it to program memory
   951 00:D912: 88                 DEY                     ; decrement count
   952 00:D913: A9 FF              LDA   #$FF              ; set byte to allow chain rebuild. if you didn't set this
   953                                                      ; byte then a zero already here would stop the chain rebuild
   954                                                      ; as it would think it was the [EOT] marker.
   955 00:D915: 91 AA              STA   (Baslnl),Y        ; save it to program memory
   956                        
   957                        LAB_1319
   958 00:D917: 20 68 DA           JSR   LAB_1477          ; reset execution to start, clear vars and flush stack
   959 00:D91A: A6 79              LDX   Smeml             ; get start of mem low byte
   960 00:D91C: A5 7A              LDA   Smemh             ; get start of mem high byte
   961 00:D91E: A0 01              LDY   #$01              ; index to high byte of next line pointer
   962                        LAB_1325
   963 00:D920: 86 71              STX   ut1_pl            ; set line start pointer low byte
   964 00:D922: 85 72              STA   ut1_ph            ; set line start pointer high byte
   965 00:D924: B1 71              LDA   (ut1_pl),Y        ; get it
   966 00:D926: F0 18              BEQ   LAB_133E          ; exit if end of program
   967                        
   968                        ; rebuild chaining of Basic lines
   969                        
   970 00:D928: A0 04              LDY   #$04              ; point to first code byte of line
   971                                                      ; there is always 1 byte + [EOL] as null entries are deleted
   972                        LAB_1330
   973 00:D92A: C8                 INY                     ; next code byte
   974 00:D92B: B1 71              LDA   (ut1_pl),Y        ; get byte
   975 00:D92D: D0 FB              BNE   LAB_1330          ; loop if not [EOL]
   976                        
   977 00:D92F: 38                 SEC                     ; set carry for add + 1
   978 00:D930: 98                 TYA                     ; copy end index
   979 00:D931: 65 71              ADC   ut1_pl            ; add to line start pointer low byte
   980 00:D933: AA                 TAX                     ; copy to X
   981 00:D934: A0 00              LDY   #$00              ; clear index, point to this line's next line pointer
   982 00:D936: 91 71              STA   (ut1_pl),Y        ; set next line pointer low byte
   983 00:D938: 98                 TYA                     ; clear A
   984 00:D939: 65 72              ADC   ut1_ph            ; add line start pointer high byte + carry
   985 00:D93B: C8                 INY                     ; increment index to high byte
   986 00:D93C: 91 71              STA   (ut1_pl),Y        ; save next line pointer low byte
   987 00:D93E: 90 E0              BCC   LAB_1325          ; go do next line, branch always, carry clear
   988                        
   989                        
   990                        LAB_133E
   991 00:D940: 4C 6A D8           JMP   LAB_127D          ; else we just wait for Basic command, no "Ready"
   992                        
   993                        ; print "? " and get BASIC input
   994                        
   995                        LAB_INLN
   996 00:D943: 20 EC DF           JSR   LAB_18E3          ; print "?" character
   997 00:D946: 20 E9 DF           JSR   LAB_18E0          ; print " "
   998 00:D949: D0 05              BNE   LAB_1357          ; call for BASIC input and return
   999                        
  1000                        ; receive line from keyboard
  1001                        
  1002                                                      ; $08 as delete key (BACKSPACE on standard keyboard)
  1003                        LAB_134B
  1004 00:D94B: 20 EE DF           JSR   LAB_PRNA          ; go print the character
  1005 00:D94E: CA                 DEX                     ; decrement the buffer counter (delete)
  1006 00:D94F: 2C                 .byte $2C               ; make LDX into BIT abs
  1007                        
  1008                        ; call for BASIC input (main entry point)
  1009                        
  1010                        LAB_1357
  1011 00:D950: A2 00              LDX   #$00              ; clear BASIC line buffer pointer
  1012                        LAB_1359
  1013 00:D952: 20 F8 F7           JSR   V_INPT            ; call scan input device
  1014 00:D955: 90 FB              BCC   LAB_1359          ; loop if no byte
  1015                        
  1016 00:D957: F0 F9              BEQ   LAB_1359          ; loop until valid input (ignore NULLs)
  1017                        
  1018 00:D959: C9 07              CMP   #$07              ; compare with [BELL]
  1019 00:D95B: F0 10              BEQ   LAB_1378          ; branch if [BELL]
  1020                        
  1021 00:D95D: C9 0D              CMP   #$0D              ; compare with [CR]
  1022 00:D95F: F0 19              BEQ   LAB_1384          ; do CR/LF exit if [CR]
  1023                        
  1024 00:D961: E0 00              CPX   #$00              ; compare pointer with $00
  1025 00:D963: D0 04              BNE   LAB_1374          ; branch if not empty
  1026                        
  1027                        ; next two lines ignore any non print character and [SPACE] if input buffer empty
  1028                        
  1029 00:D965: C9 21              CMP   #$21              ; compare with [SP]+1
  1030 00:D967: 90 E9              BCC   LAB_1359          ; if < ignore character
  1031                        
  1032                        LAB_1374
  1033 00:D969: C9 08              CMP   #$08              ; compare with [BACKSPACE] (delete last character)
  1034 00:D96B: F0 DE              BEQ   LAB_134B          ; go delete last character
  1035                        
  1036                        LAB_1378
  1037 00:D96D: E0 47              CPX   #Ibuffe-Ibuffs    ; compare character count with max
  1038 00:D96F: B0 0C              BCS   LAB_138E          ; skip store and do [BELL] if buffer full
  1039                        
  1040 00:D971: 9D 21 02           STA   Ibuffs,X          ; else store in buffer
  1041 00:D974: E8                 INX                     ; increment pointer
  1042                        LAB_137F
  1043 00:D975: 20 EE DF           JSR   LAB_PRNA          ; go print the character
  1044 00:D978: D0 D8              BNE   LAB_1359          ; always loop for next character
  1045                        
  1046                        LAB_1384
  1047 00:D97A: 4C 8A DF           JMP   LAB_1866          ; do CR/LF exit to BASIC
  1048                        
  1049                        ; announce buffer full
  1050                        
  1051                        LAB_138E
  1052 00:D97D: A9 07              LDA   #$07              ; [BELL] character into A
  1053 00:D97F: D0 F4              BNE   LAB_137F          ; go print the [BELL] but ignore input character
  1054                                                      ; branch always
  1055                        
  1056                        ; crunch keywords into Basic tokens
  1057                        ; position independent buffer version ..
  1058                        ; faster, dictionary search version ....
  1059                        
  1060                        LAB_13A6
  1061 00:D981: A0 FF              LDY   #$FF              ; set save index (makes for easy math later)
  1062                        
  1063 00:D983: 38                 SEC                     ; set carry for subtract
  1064 00:D984: A5 C3              LDA   Bpntrl            ; get basic execute pointer low byte
  1065 00:D986: E9 21              SBC   #<Ibuffs          ; subtract input buffer start pointer
  1066 00:D988: AA                 TAX                     ; copy result to X (index past line # if any)
  1067                        
  1068 00:D989: 86 60              STX   Oquote            ; clear open quote/DATA flag
  1069                        LAB_13AC
  1070 00:D98B: BD 21 02           LDA   Ibuffs,X          ; get byte from input buffer
  1071 00:D98E: F0 51              BEQ   LAB_13EC          ; if null save byte then exit
  1072                        
  1073 00:D990: C9 5F              CMP   #'_'              ; compare with "_"
  1074 00:D992: B0 4D              BCS   LAB_13EC          ; if >= go save byte then continue crunching
  1075                        
  1076 00:D994: C9 3C              CMP   #'<'              ; compare with "<"
  1077 00:D996: B0 0E              BCS   LAB_13CC          ; if >= go crunch now
  1078                        
  1079 00:D998: C9 30              CMP   #'0'              ; compare with "0"
  1080 00:D99A: B0 45              BCS   LAB_13EC          ; if >= go save byte then continue crunching
  1081                        
  1082 00:D99C: 85 5C              STA   Scnquo            ; save buffer byte as search character
  1083 00:D99E: C9 22              CMP   #$22              ; is it quote character?
  1084 00:D9A0: F0 61              BEQ   LAB_1410          ; branch if so (copy quoted string)
  1085                        
  1086 00:D9A2: C9 2A              CMP   #'*'              ; compare with "*"
  1087 00:D9A4: 90 3B              BCC   LAB_13EC          ; if < go save byte then continue crunching
  1088                        
  1089                                                      ; else crunch now
  1090                        LAB_13CC
  1091 00:D9A6: 24 60              BIT   Oquote            ; get open quote/DATA token flag
  1092 00:D9A8: 70 37              BVS   LAB_13EC          ; branch if b6 of Oquote set (was DATA)
  1093                                                      ; go save byte then continue crunching
  1094                        
  1095 00:D9AA: 86 78              STX   TempB             ; save buffer read index
  1096 00:D9AC: 84 BA              STY   csidx             ; copy buffer save index
  1097 00:D9AE: A0 20              LDY   #<TAB_1STC        ; get keyword first character table low address
  1098 00:D9B0: 84 73              STY   ut2_pl            ; save pointer low byte
  1099 00:D9B2: A0 FA              LDY   #>TAB_1STC        ; get keyword first character table high address
  1100 00:D9B4: 84 74              STY   ut2_ph            ; save pointer high byte
  1101 00:D9B6: A0 00              LDY   #$00              ; clear table pointer
  1102                        
  1103                        LAB_13D0
  1104 00:D9B8: D1 73              CMP   (ut2_pl),Y        ; compare with keyword first character table byte
  1105 00:D9BA: F0 05              BEQ   LAB_13D1          ; go do word_table_chr if match
  1106                        
  1107 00:D9BC: 90 21              BCC   LAB_13EA          ; if < keyword first character table byte go restore
  1108                                                      ; Y and save to crunched
  1109                        
  1110 00:D9BE: C8                 INY                     ; else increment pointer
  1111 00:D9BF: D0 F7              BNE   LAB_13D0          ; and loop (branch always)
  1112                        
  1113                        ; have matched first character of some keyword
  1114                        
  1115                        LAB_13D1
  1116 00:D9C1: 98                 TYA                     ; copy matching index
  1117 00:D9C2: 0A                 ASL                     ; *2 (bytes per pointer)
  1118 00:D9C3: AA                 TAX                     ; copy to new index
  1119 00:D9C4: BD 3E FA           LDA   TAB_CHRT,X        ; get keyword table pointer low byte
  1120 00:D9C7: 85 73              STA   ut2_pl            ; save pointer low byte
  1121 00:D9C9: BD 3F FA           LDA   TAB_CHRT+1,X      ; get keyword table pointer high byte
  1122 00:D9CC: 85 74              STA   ut2_ph            ; save pointer high byte
  1123                        
  1124 00:D9CE: A0 FF              LDY   #$FF              ; clear table pointer (make -1 for start)
  1125                        
  1126 00:D9D0: A6 78              LDX   TempB             ; restore buffer read index
  1127                        
  1128                        LAB_13D6
  1129 00:D9D2: C8                 INY                     ; next table byte
  1130 00:D9D3: B1 73              LDA   (ut2_pl),Y        ; get byte from table
  1131                        LAB_13D8
  1132 00:D9D5: 30 08              BMI   LAB_13EA          ; all bytes matched so go save token
  1133                        
  1134 00:D9D7: E8                 INX                     ; next buffer byte
  1135 00:D9D8: DD 21 02           CMP   Ibuffs,X          ; compare with byte from input buffer
  1136 00:D9DB: F0 F5              BEQ   LAB_13D6          ; go compare next if match
  1137                        
  1138 00:D9DD: D0 2B              BNE   LAB_1417          ; branch if >< (not found keyword)
  1139                        
  1140                        LAB_13EA
  1141 00:D9DF: A4 BA              LDY   csidx             ; restore save index
  1142                        
  1143                                                      ; save crunched to output
  1144                        LAB_13EC
  1145 00:D9E1: E8                 INX                     ; increment buffer index (to next input byte)
  1146 00:D9E2: C8                 INY                     ; increment save index (to next output byte)
  1147 00:D9E3: 99 21 02           STA   Ibuffs,Y          ; save byte to output
  1148 00:D9E6: C9 00              CMP   #$00              ; set the flags, set carry
  1149 00:D9E8: F0 32              BEQ   LAB_142A          ; do exit if was null [EOL]
  1150                        
  1151                                                      ; A holds token or byte here
  1152 00:D9EA: E9 3A              SBC   #':'              ; subtract ":" (carry set by CMP #00)
  1153 00:D9EC: F0 04              BEQ   LAB_13FF          ; branch if it was ":" (is now $00)
  1154                        
  1155                                                      ; A now holds token-$3A
  1156 00:D9EE: C9 49              CMP   #TK_DATA-$3A      ; compare with DATA token - $3A
  1157 00:D9F0: D0 02              BNE   LAB_1401          ; branch if not DATA
  1158                        
  1159                                                      ; token was : or DATA
  1160                        LAB_13FF
  1161 00:D9F2: 85 60              STA   Oquote            ; save token-$3A (clear for ":", TK_DATA-$3A for DATA)
  1162                        LAB_1401
  1163 00:D9F4: 49 57              EOR   #TK_REM-$3A       ; effectively subtract REM token offset
  1164 00:D9F6: D0 93              BNE   LAB_13AC          ; If wasn't REM then go crunch rest of line
  1165                        
  1166 00:D9F8: 85 5C              STA   Asrch             ; else was REM so set search for [EOL]
  1167                        
  1168                                                      ; loop for REM, "..." etc.
  1169                        LAB_1408
  1170 00:D9FA: BD 21 02           LDA   Ibuffs,X          ; get byte from input buffer
  1171 00:D9FD: F0 E2              BEQ   LAB_13EC          ; branch if null [EOL]
  1172                        
  1173 00:D9FF: C5 5C              CMP   Asrch             ; compare with stored character
  1174 00:DA01: F0 DE              BEQ   LAB_13EC          ; branch if match (end quote)
  1175                        
  1176                                                      ; entry for copy string in quotes, don't crunch
  1177                        LAB_1410
  1178 00:DA03: C8                 INY                     ; increment buffer save index
  1179 00:DA04: 99 21 02           STA   Ibuffs,Y          ; save byte to output
  1180 00:DA07: E8                 INX                     ; increment buffer read index
  1181 00:DA08: D0 F0              BNE   LAB_1408          ; loop while <> 0 (should never be 0!)
  1182                        
  1183                                                      ; not found keyword this go
  1184                        LAB_1417
  1185 00:DA0A: A6 78              LDX   TempB             ; compare has failed, restore buffer index (start byte!)
  1186                        
  1187                                                      ; now find the end of this word in the table
  1188                        LAB_141B
  1189 00:DA0C: B1 73              LDA   (ut2_pl),Y        ; get table byte
  1190 00:DA0E: 08                 PHP                     ; save status
  1191 00:DA0F: C8                 INY                     ; increment table index
  1192 00:DA10: 28                 PLP                     ; restore byte status
  1193 00:DA11: 10 F9              BPL   LAB_141B          ; if not end of keyword go do next
  1194                        
  1195 00:DA13: B1 73              LDA   (ut2_pl),Y        ; get byte from keyword table
  1196 00:DA15: D0 BE              BNE   LAB_13D8          ; go test next word if not zero byte (end of table)
  1197                        
  1198                                                      ; reached end of table with no match
  1199 00:DA17: BD 21 02           LDA   Ibuffs,X          ; restore byte from input buffer
  1200 00:DA1A: 10 C3              BPL   LAB_13EA          ; branch always (all bytes in buffer are $00-$7F)
  1201                                                      ; go save byte in output and continue crunching
  1202                        
  1203                                                      ; reached [EOL]
  1204                        LAB_142A
  1205 00:DA1C: C8                 INY                     ; increment pointer
  1206 00:DA1D: C8                 INY                     ; increment pointer (makes it next line pointer high byte)
  1207 00:DA1E: 99 21 02           STA   Ibuffs,Y          ; save [EOL] (marks [EOT] in immediate mode)
  1208 00:DA21: C8                 INY                     ; adjust for line copy
  1209 00:DA22: C8                 INY                     ; adjust for line copy
  1210 00:DA23: C8                 INY                     ; adjust for line copy
  1211                        ; *** begin patch for when Ibuffs is $xx00 - Daryl Rictor ***
  1212                        ; *** insert
  1213                              .IF   Ibuffs&$FF=0
  1214                              LDA   Bpntrl            ; test for $00
  1215                              BNE   LAB_142P          ; not $00
  1216                              DEC   Bpntrh            ; allow for increment when $xx00
  1217                        LAB_142P
  1218                              .ENDIF
  1219                        ; *** end   patch for when Ibuffs is $xx00 - Daryl Rictor ***
  1220                        ; end of patch
  1221 00:DA24: C6 C3              DEC   Bpntrl            ; allow for increment
  1222 00:DA26: 60                 RTS
  1223                        
  1224                        ; search Basic for temp integer line number from start of mem
  1225                        
  1226                        LAB_SSLN
  1227 00:DA27: A5 79              LDA   Smeml             ; get start of mem low byte
  1228 00:DA29: A6 7A              LDX   Smemh             ; get start of mem high byte
  1229                        
  1230                        ; search Basic for temp integer line number from AX
  1231                        ; returns carry set if found
  1232                        ; returns Baslnl/Baslnh pointer to found or next higher (not found) line
  1233                        
  1234                        ; old 541 new 507
  1235                        
  1236                        LAB_SHLN
  1237 00:DA2B: A0 01              LDY   #$01              ; set index
  1238 00:DA2D: 85 AA              STA   Baslnl            ; save low byte as current
  1239 00:DA2F: 86 AB              STX   Baslnh            ; save high byte as current
  1240 00:DA31: B1 AA              LDA   (Baslnl),Y        ; get pointer high byte from addr
  1241 00:DA33: F0 1A              BEQ   LAB_145F          ; pointer was zero so we're done, do 'not found' exit
  1242                        
  1243 00:DA35: A0 03              LDY   #$03              ; set index to line # high byte
  1244 00:DA37: B1 AA              LDA   (Baslnl),Y        ; get line # high byte
  1245 00:DA39: 88                 DEY                     ; decrement index (point to low byte)
  1246 00:DA3A: C5 12              CMP   Itemph            ; compare with temporary integer high byte
  1247 00:DA3C: D0 04              BNE   LAB_1455          ; if <> skip low byte check
  1248                        
  1249 00:DA3E: B1 AA              LDA   (Baslnl),Y        ; get line # low byte
  1250 00:DA40: C5 11              CMP   Itempl            ; compare with temporary integer low byte
  1251                        LAB_1455
  1252 00:DA42: B0 09              BCS   LAB_145E          ; else if temp < this line, exit (passed line#)
  1253                        
  1254                        LAB_1456
  1255 00:DA44: 88                 DEY                     ; decrement index to next line ptr high byte
  1256 00:DA45: B1 AA              LDA   (Baslnl),Y        ; get next line pointer high byte
  1257 00:DA47: AA                 TAX                     ; copy to X
  1258 00:DA48: 88                 DEY                     ; decrement index to next line ptr low byte
  1259 00:DA49: B1 AA              LDA   (Baslnl),Y        ; get next line pointer low byte
  1260 00:DA4B: 90 DE              BCC   LAB_SHLN          ; go search for line # in temp (Itempl/Itemph) from AX
  1261                                                      ; (carry always clear)
  1262                        
  1263                        LAB_145E
  1264 00:DA4D: F0 01              BEQ   LAB_1460          ; exit if temp = found line #, carry is set
  1265                        
  1266                        LAB_145F
  1267 00:DA4F: 18                 CLC                     ; clear found flag
  1268                        LAB_1460
  1269 00:DA50: 60                 RTS
  1270                        
  1271                        ; perform NEW
  1272                        
  1273                        LAB_NEW
  1274 00:DA51: D0 FD              BNE   LAB_1460          ; exit if not end of statement (to do syntax error)
  1275                        
  1276                        LAB_1463
  1277 00:DA53: A9 00              LDA   #$00              ; clear A
  1278 00:DA55: A8                 TAY                     ; clear Y
  1279 00:DA56: 91 79              STA   (Smeml),Y         ; clear first line, next line pointer, low byte
  1280 00:DA58: C8                 INY                     ; increment index
  1281 00:DA59: 91 79              STA   (Smeml),Y         ; clear first line, next line pointer, high byte
  1282 00:DA5B: 18                 CLC                     ; clear carry
  1283 00:DA5C: A5 79              LDA   Smeml             ; get start of mem low byte
  1284 00:DA5E: 69 02              ADC   #$02              ; calculate end of BASIC low byte
  1285 00:DA60: 85 7B              STA   Svarl             ; save start of vars low byte
  1286 00:DA62: A5 7A              LDA   Smemh             ; get start of mem high byte
  1287 00:DA64: 69 00              ADC   #$00              ; add any carry
  1288 00:DA66: 85 7C              STA   Svarh             ; save start of vars high byte
  1289                        
  1290                        ; reset execution to start, clear vars and flush stack
  1291                        
  1292                        LAB_1477
  1293 00:DA68: 18                 CLC                     ; clear carry
  1294 00:DA69: A5 79              LDA   Smeml             ; get start of mem low byte
  1295 00:DA6B: 69 FF              ADC   #$FF              ; -1
  1296 00:DA6D: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  1297 00:DA6F: A5 7A              LDA   Smemh             ; get start of mem high byte
  1298 00:DA71: 69 FF              ADC   #$FF              ; -1+carry
  1299 00:DA73: 85 C4              STA   Bpntrh            ; save BASIC execute pointer high byte
  1300                        
  1301                        ; "CLEAR" command gets here
  1302                        
  1303                        LAB_147A
  1304 00:DA75: A5 85              LDA   Ememl             ; get end of mem low byte
  1305 00:DA77: A4 86              LDY   Ememh             ; get end of mem high byte
  1306 00:DA79: 85 81              STA   Sstorl            ; set bottom of string space low byte
  1307 00:DA7B: 84 82              STY   Sstorh            ; set bottom of string space high byte
  1308 00:DA7D: A5 7B              LDA   Svarl             ; get start of vars low byte
  1309 00:DA7F: A4 7C              LDY   Svarh             ; get start of vars high byte
  1310 00:DA81: 85 7D              STA   Sarryl            ; save var mem end low byte
  1311 00:DA83: 84 7E              STY   Sarryh            ; save var mem end high byte
  1312 00:DA85: 85 7F              STA   Earryl            ; save array mem end low byte
  1313 00:DA87: 84 80              STY   Earryh            ; save array mem end high byte
  1314 00:DA89: 20 40 DC           JSR   LAB_161A          ; perform RESTORE command
  1315                        
  1316                        ; flush stack and clear continue flag
  1317                        
  1318                        LAB_1491
  1319 00:DA8C: A2 68              LDX   #des_sk           ; set descriptor stack pointer
  1320 00:DA8E: 86 65              STX   next_s            ; save descriptor stack pointer
  1321 00:DA90: 68                 PLA                     ; pull return address low byte
  1322 00:DA91: AA                 TAX                     ; copy return address low byte
  1323 00:DA92: 68                 PLA                     ; pull return address high byte
  1324 00:DA93: 8E FE 01           STX   LAB_SKFE          ; save to cleared stack
  1325 00:DA96: 8D FF 01           STA   LAB_SKFF          ; save to cleared stack
  1326 00:DA99: A2 FD              LDX   #$FD              ; new stack pointer
  1327 00:DA9B: 9A                 TXS                     ; reset stack
  1328 00:DA9C: A9 00              LDA   #$00              ; clear byte
  1329                        ;*** fix p2: no longer necessary as the continue pointer is saved anyway
  1330                        ;      STA   Cpntrh            ; clear continue pointer high byte
  1331 00:DA9E: 85 61              STA   Sufnxf            ; clear subscript/FNX flag
  1332                        LAB_14A6
  1333 00:DAA0: 60                 RTS
  1334                        
  1335                        ; perform CLEAR
  1336                        
  1337                        LAB_CLEAR
  1338 00:DAA1: F0 D2              BEQ   LAB_147A          ; if no following token go do "CLEAR"
  1339                        
  1340                                                      ; else there was a following token (go do syntax error)
  1341 00:DAA3: 60                 RTS
  1342                        
  1343                        ; perform LIST [n][-m]
  1344                        ; bigger, faster version (a _lot_ faster)
  1345                        
  1346                        LAB_LIST
  1347 00:DAA4: 90 06              BCC   LAB_14BD          ; branch if next character numeric (LIST n..)
  1348                        
  1349 00:DAA6: F0 04              BEQ   LAB_14BD          ; branch if next character [NULL] (LIST)
  1350                        
  1351 00:DAA8: C9 B7              CMP   #TK_MINUS         ; compare with token for -
  1352 00:DAAA: D0 F4              BNE   LAB_14A6          ; exit if not - (LIST -m)
  1353                        
  1354                                                      ; LIST [[n][-m]]
  1355                                                      ; this bit sets the n , if present, as the start and end
  1356                        LAB_14BD
  1357 00:DAAC: 20 56 DE           JSR   LAB_GFPN          ; get fixed-point number into temp integer
  1358 00:DAAF: 20 27 DA           JSR   LAB_SSLN          ; search BASIC for temp integer line number
  1359                                                      ; (pointer in Baslnl/Baslnh)
  1360 00:DAB2: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  1361 00:DAB5: F0 0C              BEQ   LAB_14D4          ; branch if no more characters
  1362                        
  1363                                                      ; this bit checks the - is present
  1364 00:DAB7: C9 B7              CMP   #TK_MINUS         ; compare with token for -
  1365 00:DAB9: D0 95              BNE   LAB_1460          ; return if not "-" (will be Syntax error)
  1366                        
  1367                                                      ; LIST [n]-m
  1368                                                      ; the - was there so set m as the end value
  1369 00:DABB: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  1370 00:DABE: 20 56 DE           JSR   LAB_GFPN          ; get fixed-point number into temp integer
  1371 00:DAC1: D0 8D              BNE   LAB_1460          ; exit if not ok
  1372                        
  1373                        LAB_14D4
  1374 00:DAC3: A5 11              LDA   Itempl            ; get temporary integer low byte
  1375 00:DAC5: 05 12              ORA   Itemph            ; OR temporary integer high byte
  1376 00:DAC7: D0 06              BNE   LAB_14E2          ; branch if start set
  1377                        
  1378 00:DAC9: A9 FF              LDA   #$FF              ; set for -1
  1379 00:DACB: 85 11              STA   Itempl            ; set temporary integer low byte
  1380 00:DACD: 85 12              STA   Itemph            ; set temporary integer high byte
  1381                        LAB_14E2
  1382 00:DACF: A0 01              LDY   #$01              ; set index for line
  1383 00:DAD1: 84 60              STY   Oquote            ; clear open quote flag
  1384 00:DAD3: 20 93 DF           JSR   LAB_CRLF          ; print CR/LF
  1385 00:DAD6: B1 AA              LDA   (Baslnl),Y        ; get next line pointer high byte
  1386                                                      ; pointer initially set by search at LAB_14BD
  1387 00:DAD8: F0 3E              BEQ   LAB_152B          ; if null all done so exit
  1388 00:DADA: 20 16 DC           JSR   LAB_1629          ; do CRTL-C check vector
  1389                        
  1390 00:DADD: C8                 INY                     ; increment index for line
  1391 00:DADE: B1 AA              LDA   (Baslnl),Y        ; get line # low byte
  1392 00:DAE0: AA                 TAX                     ; copy to X
  1393 00:DAE1: C8                 INY                     ; increment index
  1394 00:DAE2: B1 AA              LDA   (Baslnl),Y        ; get line # high byte
  1395 00:DAE4: C5 12              CMP   Itemph            ; compare with temporary integer high byte
  1396 00:DAE6: D0 04              BNE   LAB_14FF          ; branch if no high byte match
  1397                        
  1398 00:DAE8: E4 11              CPX   Itempl            ; compare with temporary integer low byte
  1399 00:DAEA: F0 02              BEQ   LAB_1501          ; branch if = last line to do (< will pass next branch)
  1400                        
  1401                        LAB_14FF                      ; else ..
  1402 00:DAEC: B0 2A              BCS   LAB_152B          ; if greater all done so exit
  1403                        
  1404                        LAB_1501
  1405 00:DAEE: 84 97              STY   Tidx1             ; save index for line
  1406 00:DAF0: 20 8F F1           JSR   LAB_295E          ; print XA as unsigned integer
  1407 00:DAF3: A9 20              LDA   #$20              ; space is the next character
  1408                        LAB_1508
  1409 00:DAF5: A4 97              LDY   Tidx1             ; get index for line
  1410 00:DAF7: 29 7F              AND   #$7F              ; mask top out bit of character
  1411                        LAB_150C
  1412 00:DAF9: 20 EE DF           JSR   LAB_PRNA          ; go print the character
  1413 00:DAFC: C9 22              CMP   #$22              ; was it " character
  1414 00:DAFE: D0 06              BNE   LAB_1519          ; branch if not
  1415                        
  1416                                                      ; we are either entering or leaving a pair of quotes
  1417 00:DB00: A5 60              LDA   Oquote            ; get open quote flag
  1418 00:DB02: 49 FF              EOR   #$FF              ; toggle it
  1419 00:DB04: 85 60              STA   Oquote            ; save it back
  1420                        LAB_1519
  1421 00:DB06: C8                 INY                     ; increment index
  1422 00:DB07: B1 AA              LDA   (Baslnl),Y        ; get next byte
  1423 00:DB09: D0 0E              BNE   LAB_152E          ; branch if not [EOL] (go print character)
  1424 00:DB0B: A8                 TAY                     ; else clear index
  1425 00:DB0C: B1 AA              LDA   (Baslnl),Y        ; get next line pointer low byte
  1426 00:DB0E: AA                 TAX                     ; copy to X
  1427 00:DB0F: C8                 INY                     ; increment index
  1428 00:DB10: B1 AA              LDA   (Baslnl),Y        ; get next line pointer high byte
  1429 00:DB12: 86 AA              STX   Baslnl            ; set pointer to line low byte
  1430 00:DB14: 85 AB              STA   Baslnh            ; set pointer to line high byte
  1431 00:DB16: D0 B7              BNE   LAB_14E2          ; go do next line if not [EOT]
  1432                                                      ; else ..
  1433                        LAB_152B
  1434 00:DB18: 60                 RTS
  1435                        
  1436                        LAB_152E
  1437 00:DB19: 10 DE              BPL   LAB_150C          ; just go print it if not token byte
  1438                        
  1439                                                      ; else was token byte so uncrunch it (maybe)
  1440 00:DB1B: 24 60              BIT   Oquote            ; test the open quote flag
  1441 00:DB1D: 30 DA              BMI   LAB_150C          ; just go print character if open quote set
  1442                        
  1443 00:DB1F: A2 FC              LDX   #>LAB_KEYT        ; get table address high byte
  1444 00:DB21: 0A                 ASL                     ; *2
  1445 00:DB22: 0A                 ASL                     ; *4
  1446 00:DB23: 90 02              BCC   LAB_152F          ; branch if no carry
  1447                        
  1448 00:DB25: E8                 INX                     ; else increment high byte
  1449 00:DB26: 18                 CLC                     ; clear carry for add
  1450                        LAB_152F
  1451 00:DB27: 69 21              ADC   #<LAB_KEYT        ; add low byte
  1452 00:DB29: 90 01              BCC   LAB_1530          ; branch if no carry
  1453                        
  1454 00:DB2B: E8                 INX                     ; else increment high byte
  1455                        LAB_1530
  1456 00:DB2C: 85 73              STA   ut2_pl            ; save table pointer low byte
  1457 00:DB2E: 86 74              STX   ut2_ph            ; save table pointer high byte
  1458 00:DB30: 84 97              STY   Tidx1             ; save index for line
  1459 00:DB32: A0 00              LDY   #$00              ; clear index
  1460 00:DB34: B1 73              LDA   (ut2_pl),Y        ; get length
  1461 00:DB36: AA                 TAX                     ; copy length
  1462 00:DB37: C8                 INY                     ; increment index
  1463 00:DB38: B1 73              LDA   (ut2_pl),Y        ; get 1st character
  1464 00:DB3A: CA                 DEX                     ; decrement length
  1465 00:DB3B: F0 B8              BEQ   LAB_1508          ; if no more characters exit and print
  1466                        
  1467 00:DB3D: 20 EE DF           JSR   LAB_PRNA          ; go print the character
  1468 00:DB40: C8                 INY                     ; increment index
  1469 00:DB41: B1 73              LDA   (ut2_pl),Y        ; get keyword address low byte
  1470 00:DB43: 48                 PHA                     ; save it for now
  1471 00:DB44: C8                 INY                     ; increment index
  1472 00:DB45: B1 73              LDA   (ut2_pl),Y        ; get keyword address high byte
  1473 00:DB47: A0 00              LDY   #$00
  1474 00:DB49: 85 74              STA   ut2_ph            ; save keyword pointer high byte
  1475 00:DB4B: 68                 PLA                     ; pull low byte
  1476 00:DB4C: 85 73              STA   ut2_pl            ; save keyword pointer low byte
  1477                        LAB_1540
  1478 00:DB4E: B1 73              LDA   (ut2_pl),Y        ; get character
  1479 00:DB50: CA                 DEX                     ; decrement character count
  1480 00:DB51: F0 A2              BEQ   LAB_1508          ; if last character exit and print
  1481                        
  1482 00:DB53: 20 EE DF           JSR   LAB_PRNA          ; go print the character
  1483 00:DB56: C8                 INY                     ; increment index
  1484 00:DB57: D0 F5              BNE   LAB_1540          ; loop for next character
  1485                        
  1486                        ; perform FOR
  1487                        
  1488                        LAB_FOR
  1489 00:DB59: A9 80              LDA   #$80              ; set FNX
  1490 00:DB5B: 85 61              STA   Sufnxf            ; set subscript/FNX flag
  1491 00:DB5D: 20 B5 DE           JSR   LAB_LET           ; go do LET
  1492 00:DB60: 68                 PLA                     ; pull return address
  1493 00:DB61: 68                 PLA                     ; pull return address
  1494 00:DB62: A9 10              LDA   #$10              ; we need 16d bytes !
  1495 00:DB64: 20 03 D8           JSR   LAB_1212          ; check room on stack for A bytes
  1496 00:DB67: 20 9B DD           JSR   LAB_SNBS          ; scan for next BASIC statement ([:] or [EOL])
  1497 00:DB6A: 18                 CLC                     ; clear carry for add
  1498 00:DB6B: 98                 TYA                     ; copy index to A
  1499 00:DB6C: 65 C3              ADC   Bpntrl            ; add BASIC execute pointer low byte
  1500 00:DB6E: 48                 PHA                     ; push onto stack
  1501 00:DB6F: A5 C4              LDA   Bpntrh            ; get BASIC execute pointer high byte
  1502 00:DB71: 69 00              ADC   #$00              ; add carry
  1503 00:DB73: 48                 PHA                     ; push onto stack
  1504 00:DB74: A5 88              LDA   Clineh            ; get current line high byte
  1505 00:DB76: 48                 PHA                     ; push onto stack
  1506 00:DB77: A5 87              LDA   Clinel            ; get current line low byte
  1507 00:DB79: 48                 PHA                     ; push onto stack
  1508 00:DB7A: A9 AD              LDA   #TK_TO            ; get "TO" token
  1509 00:DB7C: 20 F1 E2           JSR   LAB_SCCA          ; scan for CHR$(A) , else do syntax error then warm start
  1510 00:DB7F: 20 D0 E1           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  1511 00:DB82: 20 CD E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  1512                                                      ; else do type mismatch
  1513                        ; *** begin patch  2.22p5.1   TO expression may get sign bit flipped
  1514                        ; *** add
  1515 00:DB85: 20 E6 EF           JSR   LAB_27BA          ; round FAC1
  1516                        ; *** end   patch  2.22p5.1   TO expression may get sign bit flipped
  1517 00:DB88: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  1518 00:DB8A: 09 7F              ORA   #$7F              ; set all non sign bits
  1519 00:DB8C: 25 AD              AND   FAC1_1            ; and FAC1 mantissa1
  1520 00:DB8E: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  1521 00:DB90: A9 9B              LDA   #<LAB_159F        ; set return address low byte
  1522 00:DB92: A0 DB              LDY   #>LAB_159F        ; set return address high byte
  1523 00:DB94: 85 71              STA   ut1_pl            ; save return address low byte
  1524 00:DB96: 84 72              STY   ut1_ph            ; save return address high byte
  1525 00:DB98: 4C 87 E2           JMP   LAB_1B66          ; round FAC1 and put on stack (returns to next instruction)
  1526                        
  1527                        LAB_159F
  1528 00:DB9B: A9 F0              LDA   #<LAB_259C        ; set 1 pointer low addr (default step size)
  1529 00:DB9D: A0 F8              LDY   #>LAB_259C        ; set 1 pointer high addr
  1530 00:DB9F: 20 8A EF           JSR   LAB_UFAC          ; unpack memory (AY) into FAC1
  1531 00:DBA2: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  1532 00:DBA5: C9 B2              CMP   #TK_STEP          ; compare with STEP token
  1533 00:DBA7: D0 06              BNE   LAB_15B3          ; jump if not "STEP"
  1534                        
  1535                                                      ;.was step so ..
  1536 00:DBA9: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  1537 00:DBAC: 20 CD E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  1538                                                      ; else do type mismatch
  1539                        LAB_15B3
  1540 00:DBAF: 20 F6 EF           JSR   LAB_27CA          ; return A=FF,C=1/-ve A=01,C=0/+ve
  1541 00:DBB2: 85 B0              STA   FAC1_s            ; set FAC1 sign (b7)
  1542                                                      ; this is +1 for +ve step and -1 for -ve step, in NEXT we
  1543                                                      ; compare the FOR value and the TO value and return +1 if
  1544                                                      ; FOR > TO, 0 if FOR = TO and -1 if FOR < TO. the value
  1545                                                      ; here (+/-1) is then compared to that result and if they
  1546                                                      ; are the same (+ve and FOR > TO or -ve and FOR < TO) then
  1547                                                      ; the loop is done
  1548                                                     
  1549                        ; *** begin patch  2.22p5.3   potential return address -$100 (page not incremented) ***
  1550                        ; *** add
  1551                           .IF $&$FF=$FD
  1552                              NOP                     ; return address of JSR +1 (on  next page)
  1553                           .ENDIF  
  1554                        ; *** end   patch  2.22p5.3   potential return address -$100 (page not incremented) ***
  1555 00:DBB4: 20 79 E2           JSR   LAB_1B5B          ; push sign, round FAC1 and put on stack
  1556 00:DBB7: A5 98              LDA   Frnxth            ; get var pointer for FOR/NEXT high byte
  1557 00:DBB9: 48                 PHA                     ; push on stack
  1558 00:DBBA: A5 97              LDA   Frnxtl            ; get var pointer for FOR/NEXT low byte
  1559 00:DBBC: 48                 PHA                     ; push on stack
  1560 00:DBBD: A9 81              LDA   #TK_FOR           ; get FOR token
  1561 00:DBBF: 48                 PHA                     ; push on stack
  1562                        
  1563                        ; interpreter inner loop
  1564                        
  1565                        LAB_15C2
  1566 00:DBC0: 20 16 DC           JSR   LAB_1629          ; do CRTL-C check vector
  1567 00:DBC3: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  1568 00:DBC5: A4 C4              LDY   Bpntrh            ; get BASIC execute pointer high byte
  1569                        
  1570 00:DBC7: A6 88              LDX   Clineh            ; continue line is $FFxx for immediate mode
  1571                                                      ; ($00xx for RUN from immediate mode)
  1572 00:DBC9: E8                 INX                     ; increment it (now $00 if immediate mode)
  1573                        ;*** fix p2: skip no longer necessary as the continue pointer is saved anyway
  1574                        ;      BEQ   LAB_15D1          ; branch if null (immediate mode)
  1575                        
  1576 00:DBCA: 85 8B              STA   Cpntrl            ; save continue pointer low byte
  1577 00:DBCC: 84 8C              STY   Cpntrh            ; save continue pointer high byte
  1578                        LAB_15D1
  1579 00:DBCE: A0 00              LDY   #$00              ; clear index
  1580 00:DBD0: B1 C3              LDA   (Bpntrl),Y        ; get next byte
  1581 00:DBD2: F0 07              BEQ   LAB_15DC          ; branch if null [EOL]
  1582                        
  1583 00:DBD4: C9 3A              CMP   #':'              ; compare with ":"
  1584 00:DBD6: F0 1D              BEQ   LAB_15F6          ; branch if = (statement separator)
  1585                        
  1586                        LAB_15D9
  1587 00:DBD8: 4C 02 E3           JMP   LAB_SNER          ; else syntax error then warm start
  1588                        
  1589                                                      ; have reached [EOL]
  1590                        LAB_15DC
  1591 00:DBDB: A0 02              LDY   #$02              ; set index
  1592 00:DBDD: B1 C3              LDA   (Bpntrl),Y        ; get next line pointer high byte
  1593 00:DBDF: 18                 CLC                     ; clear carry for no "BREAK" message
  1594 00:DBE0: F0 50              BEQ   LAB_1651          ; if null go to immediate mode (was immediate or [EOT]
  1595                                                      ; marker)
  1596                        
  1597 00:DBE2: C8                 INY                     ; increment index
  1598 00:DBE3: B1 C3              LDA   (Bpntrl),Y        ; get line # low byte
  1599 00:DBE5: 85 87              STA   Clinel            ; save current line low byte
  1600 00:DBE7: C8                 INY                     ; increment index
  1601 00:DBE8: B1 C3              LDA   (Bpntrl),Y        ; get line # high byte
  1602 00:DBEA: 85 88              STA   Clineh            ; save current line high byte
  1603 00:DBEC: 98                 TYA                     ; A now = 4
  1604 00:DBED: 65 C3              ADC   Bpntrl            ; add BASIC execute pointer low byte
  1605 00:DBEF: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  1606 00:DBF1: 90 02              BCC   LAB_15F6          ; branch if no overflow
  1607                        
  1608 00:DBF3: E6 C4              INC   Bpntrh            ; else increment BASIC execute pointer high byte
  1609                        LAB_15F6
  1610 00:DBF5: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  1611                        
  1612                        LAB_15F9
  1613 00:DBF8: 20 FE DB           JSR   LAB_15FF          ; go interpret BASIC code from (Bpntrl)
  1614                        
  1615                        LAB_15FC
  1616 00:DBFB: 4C C0 DB           JMP   LAB_15C2          ; loop
  1617                        
  1618                        ; interpret BASIC code from (Bpntrl)
  1619                        
  1620                        LAB_15FF
  1621 00:DBFE: F0 4E              BEQ   LAB_1628          ; exit if zero [EOL]
  1622                        
  1623                        LAB_1602
  1624 00:DC00: 0A                 ASL                     ; *2 bytes per vector and normalise token
  1625 00:DC01: B0 03              BCS   LAB_1609          ; branch if was token
  1626                        
  1627 00:DC03: 4C B5 DE           JMP   LAB_LET           ; else go do implied LET
  1628                        
  1629                        LAB_1609
  1630 00:DC06: C9 56              CMP   #(TK_TAB-$80)*2   ; compare normalised token * 2 with TAB
  1631 00:DC08: B0 CE              BCS   LAB_15D9          ; branch if A>=TAB (do syntax error then warm start)
  1632                                                      ; only tokens before TAB can start a line
  1633 00:DC0A: A8                 TAY                     ; copy to index
  1634 00:DC0B: B9 18 F9           LDA   LAB_CTBL+1,Y      ; get vector high byte
  1635 00:DC0E: 48                 PHA                     ; onto stack
  1636 00:DC0F: B9 17 F9           LDA   LAB_CTBL,Y        ; get vector low byte
  1637 00:DC12: 48                 PHA                     ; onto stack
  1638 00:DC13: 4C BC 00           JMP   LAB_IGBY          ; jump to increment and scan memory
  1639                                                      ; then "return" to vector
  1640                        
  1641                        ; CTRL-C check jump. this is called as a subroutine but exits back via a jump if a
  1642                        ; key press is detected.
  1643                        
  1644                        LAB_1629
  1645 00:DC16: 6C 03 02           JMP   (VEC_CC)          ; ctrl c check vector
  1646                        
  1647                        ; if there was a key press it gets back here ..
  1648                        
  1649                        LAB_1636
  1650 00:DC19: C9 03              CMP   #$03              ; compare with CTRL-C
  1651                        
  1652                        ; perform STOP
  1653                        
  1654                        LAB_STOP
  1655 00:DC1B: B0 01              BCS   LAB_163B          ; branch if token follows STOP
  1656                                                      ; else just END
  1657                        ; END
  1658                        
  1659                        LAB_END
  1660 00:DC1D: 18                 CLC                     ; clear the carry, indicate a normal program end
  1661                        LAB_163B
  1662 00:DC1E: D0 61              BNE   LAB_167A          ; if wasn't CTRL-C or there is a following byte return
  1663                        
  1664 00:DC20: A5 C4              LDA   Bpntrh            ; get the BASIC execute pointer high byte
  1665                        ;*** fix p2: skip no longer necessary as the continue pointer is saved anyway
  1666                        ;      EOR   #>Ibuffs          ; compare with buffer address high byte (Cb unchanged)
  1667                        ;      BEQ   LAB_164F          ; branch if the BASIC pointer is in the input buffer
  1668                        ;                              ; (can't continue in immediate mode)
  1669                        ;                              ; else ..
  1670                        ;      EOR   #>Ibuffs          ; correct the bits
  1671 00:DC22: A4 C3              LDY   Bpntrl            ; get BASIC execute pointer low byte
  1672 00:DC24: 84 8B              STY   Cpntrl            ; save continue pointer low byte
  1673 00:DC26: 85 8C              STA   Cpntrh            ; save continue pointer high byte
  1674                        LAB_1647
  1675 00:DC28: A5 87              LDA   Clinel            ; get current line low byte
  1676 00:DC2A: A4 88              LDY   Clineh            ; get current line high byte
  1677 00:DC2C: 85 89              STA   Blinel            ; save break line low byte
  1678 00:DC2E: 84 8A              STY   Blineh            ; save break line high byte
  1679                        LAB_164F
  1680 00:DC30: 68                 PLA                     ; pull return address low
  1681 00:DC31: 68                 PLA                     ; pull return address high
  1682                        LAB_1651
  1683 00:DC32: 90 07              BCC   LAB_165E          ; if was program end just do warm start
  1684                        
  1685                                                      ; else ..
  1686 00:DC34: A9 EE              LDA   #<LAB_BMSG        ; point to "Break" low byte
  1687 00:DC36: A0 FE              LDY   #>LAB_BMSG        ; point to "Break" high byte
  1688 00:DC38: 4C 52 D8           JMP   LAB_1269          ; print "Break" and do warm start
  1689                        
  1690                        LAB_165E
  1691 00:DC3B: 4C 5D D8           JMP   LAB_1274          ; go do warm start
  1692                        
  1693                        ; perform RESTORE
  1694                        
  1695                        LAB_RESTORE
  1696 00:DC3E: D0 0F              BNE   LAB_RESTOREn      ; branch if next character not null (RESTORE n)
  1697                        
  1698                        LAB_161A
  1699 00:DC40: 38                 SEC                     ; set carry for subtract
  1700 00:DC41: A5 79              LDA   Smeml             ; get start of mem low byte
  1701 00:DC43: E9 01              SBC   #$01              ; -1
  1702 00:DC45: A4 7A              LDY   Smemh             ; get start of mem high byte
  1703 00:DC47: B0 01              BCS   LAB_1624          ; branch if no underflow
  1704                        
  1705                        LAB_uflow
  1706 00:DC49: 88                 DEY                     ; else decrement high byte
  1707                        LAB_1624
  1708 00:DC4A: 85 8F              STA   Dptrl             ; save DATA pointer low byte
  1709 00:DC4C: 84 90              STY   Dptrh             ; save DATA pointer high byte
  1710                        LAB_1628
  1711 00:DC4E: 60                 RTS
  1712                        
  1713                                                      ; is RESTORE n
  1714                        LAB_RESTOREn
  1715 00:DC4F: 20 56 DE           JSR   LAB_GFPN          ; get fixed-point number into temp integer
  1716 00:DC52: 20 9E DD           JSR   LAB_SNBL          ; scan for next BASIC line
  1717 00:DC55: A5 88              LDA   Clineh            ; get current line high byte
  1718 00:DC57: C5 12              CMP   Itemph            ; compare with temporary integer high byte
  1719 00:DC59: B0 0B              BCS   LAB_reset_search  ; branch if >= (start search from beginning)
  1720                        
  1721 00:DC5B: 98                 TYA                     ; else copy line index to A
  1722 00:DC5C: 38                 SEC                     ; set carry (+1)
  1723 00:DC5D: 65 C3              ADC   Bpntrl            ; add BASIC execute pointer low byte
  1724 00:DC5F: A6 C4              LDX   Bpntrh            ; get BASIC execute pointer high byte
  1725 00:DC61: 90 07              BCC   LAB_go_search     ; branch if no overflow to high byte
  1726                        
  1727 00:DC63: E8                 INX                     ; increment high byte
  1728 00:DC64: B0 04              BCS   LAB_go_search     ; branch always (can never be carry clear)
  1729                        
  1730                        ; search for line # in temp (Itempl/Itemph) from start of mem pointer (Smeml)
  1731                        
  1732                        LAB_reset_search
  1733 00:DC66: A5 79              LDA   Smeml             ; get start of mem low byte
  1734 00:DC68: A6 7A              LDX   Smemh             ; get start of mem high byte
  1735                        
  1736                        ; search for line # in temp (Itempl/Itemph) from (AX)
  1737                        
  1738                        LAB_go_search
  1739                        
  1740 00:DC6A: 20 2B DA           JSR   LAB_SHLN          ; search Basic for temp integer line number from AX
  1741 00:DC6D: B0 03              BCS   LAB_line_found    ; if carry set go set pointer
  1742                        
  1743 00:DC6F: 4C 70 DD           JMP   LAB_16F7          ; else go do "Undefined statement" error
  1744                        
  1745                        LAB_line_found
  1746                                                      ; carry already set for subtract
  1747 00:DC72: A5 AA              LDA   Baslnl            ; get pointer low byte
  1748 00:DC74: E9 01              SBC   #$01              ; -1
  1749 00:DC76: A4 AB              LDY   Baslnh            ; get pointer high byte
  1750 00:DC78: B0 D0              BCS   LAB_1624          ; branch if no underflow (save DATA pointer and return)
  1751                        
  1752 00:DC7A: 90 CD              BCC   LAB_uflow         ; else decrement high byte then save DATA pointer and
  1753                                                      ; return (branch always)
  1754                        
  1755                        ; perform NULL
  1756                        
  1757                        LAB_NULL
  1758 00:DC7C: 20 A0 EB           JSR   LAB_GTBY          ; get byte parameter
  1759 00:DC7F: 86 0D              STX   Nullct            ; save new NULL count
  1760                        LAB_167A
  1761 00:DC81: 60                 RTS
  1762                        
  1763                        ; perform CONT
  1764                        
  1765                        LAB_CONT
  1766 00:DC82: D0 FD              BNE   LAB_167A          ; if following byte exit to do syntax error
  1767                        
  1768 00:DC84: A4 8C              LDY   Cpntrh            ; get continue pointer high byte
  1769 00:DC86: C0 02              CPY   #>Ibuffs          ; *** fix p2: test direct mode
  1770 00:DC88: D0 05              BNE   LAB_166C          ; go do continue if we can
  1771                        
  1772 00:DC8A: A2 1E              LDX   #$1E              ; error code $1E ("Can't continue" error)
  1773 00:DC8C: 4C 3F D8           JMP   LAB_XERR          ; do error #X, then warm start
  1774                        
  1775                                                      ; we can continue so ..
  1776                        LAB_166C
  1777 00:DC8F: A9 93              LDA   #TK_ON            ; set token for ON
  1778 00:DC91: 20 23 F6           JSR   LAB_IRQ           ; set IRQ flags
  1779 00:DC94: A9 93              LDA   #TK_ON            ; set token for ON
  1780 00:DC96: 20 26 F6           JSR   LAB_NMI           ; set NMI flags
  1781                        
  1782 00:DC99: 84 C4              STY   Bpntrh            ; save BASIC execute pointer high byte
  1783 00:DC9B: A5 8B              LDA   Cpntrl            ; get continue pointer low byte
  1784 00:DC9D: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  1785 00:DC9F: A5 89              LDA   Blinel            ; get break line low byte
  1786 00:DCA1: A4 8A              LDY   Blineh            ; get break line high byte
  1787 00:DCA3: 85 87              STA   Clinel            ; set current line low byte
  1788 00:DCA5: 84 88              STY   Clineh            ; set current line high byte
  1789 00:DCA7: 60                 RTS
  1790                        
  1791                        ; perform RUN
  1792                        
  1793                        LAB_RUN
  1794 00:DCA8: D0 03              BNE   LAB_1696          ; branch if RUN n
  1795 00:DCAA: 4C 68 DA           JMP   LAB_1477          ; reset execution to start, clear variables, flush stack and
  1796                                                      ; return
  1797                        
  1798                        ; does RUN n
  1799                        
  1800                        LAB_1696
  1801 00:DCAD: 20 75 DA           JSR   LAB_147A          ; go do "CLEAR"
  1802 00:DCB0: F0 2E              BEQ   LAB_16B0          ; get n and do GOTO n (branch always as CLEAR sets Z=1)
  1803                        
  1804                        ; perform DO
  1805                        
  1806                        LAB_DO
  1807 00:DCB2: A9 05              LDA   #$05              ; need 5 bytes for DO
  1808 00:DCB4: 20 03 D8           JSR   LAB_1212          ; check room on stack for A bytes
  1809 00:DCB7: A5 C4              LDA   Bpntrh            ; get BASIC execute pointer high byte
  1810 00:DCB9: 48                 PHA                     ; push on stack
  1811 00:DCBA: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  1812 00:DCBC: 48                 PHA                     ; push on stack
  1813 00:DCBD: A5 88              LDA   Clineh            ; get current line high byte
  1814 00:DCBF: 48                 PHA                     ; push on stack
  1815 00:DCC0: A5 87              LDA   Clinel            ; get current line low byte
  1816 00:DCC2: 48                 PHA                     ; push on stack
  1817 00:DCC3: A9 9D              LDA   #TK_DO            ; token for DO
  1818 00:DCC5: 48                 PHA                     ; push on stack
  1819 00:DCC6: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  1820 00:DCC9: 4C C0 DB           JMP   LAB_15C2          ; go do interpreter inner loop
  1821                        
  1822                        ; perform GOSUB
  1823                        
  1824                        LAB_GOSUB
  1825 00:DCCC: A9 05              LDA   #$05              ; need 5 bytes for GOSUB
  1826 00:DCCE: 20 03 D8           JSR   LAB_1212          ; check room on stack for A bytes
  1827 00:DCD1: A5 C4              LDA   Bpntrh            ; get BASIC execute pointer high byte
  1828 00:DCD3: 48                 PHA                     ; push on stack
  1829 00:DCD4: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  1830 00:DCD6: 48                 PHA                     ; push on stack
  1831 00:DCD7: A5 88              LDA   Clineh            ; get current line high byte
  1832 00:DCD9: 48                 PHA                     ; push on stack
  1833 00:DCDA: A5 87              LDA   Clinel            ; get current line low byte
  1834 00:DCDC: 48                 PHA                     ; push on stack
  1835 00:DCDD: A9 8D              LDA   #TK_GOSUB         ; token for GOSUB
  1836 00:DCDF: 48                 PHA                     ; push on stack
  1837                        LAB_16B0
  1838 00:DCE0: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  1839 00:DCE3: 20 E9 DC           JSR   LAB_GOTO          ; perform GOTO n
  1840 00:DCE6: 4C C0 DB           JMP   LAB_15C2          ; go do interpreter inner loop
  1841                                                      ; (can't RTS, we used the stack!)
  1842                        
  1843                        ; perform GOTO
  1844                        
  1845                        LAB_GOTO
  1846 00:DCE9: 20 56 DE           JSR   LAB_GFPN          ; get fixed-point number into temp integer
  1847 00:DCEC: 20 9E DD           JSR   LAB_SNBL          ; scan for next BASIC line
  1848 00:DCEF: A5 88              LDA   Clineh            ; get current line high byte
  1849 00:DCF1: C5 12              CMP   Itemph            ; compare with temporary integer high byte
  1850 00:DCF3: B0 0B              BCS   LAB_16D0          ; branch if >= (start search from beginning)
  1851                        
  1852 00:DCF5: 98                 TYA                     ; else copy line index to A
  1853 00:DCF6: 38                 SEC                     ; set carry (+1)
  1854 00:DCF7: 65 C3              ADC   Bpntrl            ; add BASIC execute pointer low byte
  1855 00:DCF9: A6 C4              LDX   Bpntrh            ; get BASIC execute pointer high byte
  1856 00:DCFB: 90 07              BCC   LAB_16D4          ; branch if no overflow to high byte
  1857                        
  1858 00:DCFD: E8                 INX                     ; increment high byte
  1859 00:DCFE: B0 04              BCS   LAB_16D4          ; branch always (can never be carry)
  1860                        
  1861                        ; search for line # in temp (Itempl/Itemph) from start of mem pointer (Smeml)
  1862                        
  1863                        LAB_16D0
  1864 00:DD00: A5 79              LDA   Smeml             ; get start of mem low byte
  1865 00:DD02: A6 7A              LDX   Smemh             ; get start of mem high byte
  1866                        
  1867                        ; search for line # in temp (Itempl/Itemph) from (AX)
  1868                        
  1869                        LAB_16D4
  1870 00:DD04: 20 2B DA           JSR   LAB_SHLN          ; search Basic for temp integer line number from AX
  1871 00:DD07: 90 67              BCC   LAB_16F7          ; if carry clear go do "Undefined statement" error
  1872                                                      ; (unspecified statement)
  1873                        
  1874                                                      ; carry already set for subtract
  1875 00:DD09: A5 AA              LDA   Baslnl            ; get pointer low byte
  1876 00:DD0B: E9 01              SBC   #$01              ; -1
  1877 00:DD0D: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  1878 00:DD0F: A5 AB              LDA   Baslnh            ; get pointer high byte
  1879 00:DD11: E9 00              SBC   #$00              ; subtract carry
  1880 00:DD13: 85 C4              STA   Bpntrh            ; save BASIC execute pointer high byte
  1881                        LAB_16E5
  1882 00:DD15: 60                 RTS
  1883                        
  1884                        LAB_DONOK
  1885 00:DD16: A2 22              LDX   #$22              ; error code $22 ("LOOP without DO" error)
  1886 00:DD18: 4C 3F D8           JMP   LAB_XERR          ; do error #X, then warm start
  1887                        
  1888                        ; perform LOOP
  1889                        
  1890                        LAB_LOOP
  1891 00:DD1B: A8                 TAY                     ; save following token
  1892 00:DD1C: BA                 TSX                     ; copy stack pointer
  1893 00:DD1D: BD 03 01           LDA   LAB_STAK+3,X      ; get token byte from stack
  1894 00:DD20: C9 9D              CMP   #TK_DO            ; compare with DO token
  1895 00:DD22: D0 F2              BNE   LAB_DONOK         ; branch if no matching DO
  1896                        
  1897 00:DD24: E8                 INX                     ; dump calling routine return address
  1898 00:DD25: E8                 INX                     ; dump calling routine return address
  1899 00:DD26: 9A                 TXS                     ; correct stack
  1900 00:DD27: 98                 TYA                     ; get saved following token back
  1901 00:DD28: F0 20              BEQ   LoopAlways        ; if no following token loop forever
  1902                                                      ; (stack pointer in X)
  1903                        
  1904 00:DD2A: C9 3A              CMP   #':'              ; could be ':'
  1905 00:DD2C: F0 1C              BEQ   LoopAlways        ; if :... loop forever
  1906                        
  1907 00:DD2E: E9 B3              SBC   #TK_UNTIL         ; subtract token for UNTIL, we know carry is set here
  1908 00:DD30: AA                 TAX                     ; copy to X (if it was UNTIL then Y will be correct)
  1909 00:DD31: F0 04              BEQ   DoRest            ; branch if was UNTIL
  1910                        
  1911 00:DD33: CA                 DEX                     ; decrement result
  1912 00:DD34: D0 62              BNE   LAB_16FC          ; if not WHILE go do syntax error and warm start
  1913                                                      ; only if the token was WHILE will this fail
  1914                        
  1915 00:DD36: CA                 DEX                     ; set invert result byte
  1916                        DoRest
  1917 00:DD37: 86 98              STX   Frnxth            ; save invert result byte
  1918 00:DD39: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  1919 00:DD3C: 20 E1 E1           JSR   LAB_EVEX          ; evaluate expression
  1920 00:DD3F: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  1921 00:DD41: F0 02              BEQ   DoCmp             ; if =0 go do straight compare
  1922                        
  1923 00:DD43: A9 FF              LDA   #$FF              ; else set all bits
  1924                        DoCmp
  1925 00:DD45: BA                 TSX                     ; copy stack pointer
  1926 00:DD46: 45 98              EOR   Frnxth            ; EOR with invert byte
  1927 00:DD48: D0 1A              BNE   LoopDone          ; if <> 0 clear stack and back to interpreter loop
  1928                        
  1929                                                      ; loop condition wasn't met so do it again
  1930                        LoopAlways
  1931 00:DD4A: BD 02 01           LDA   LAB_STAK+2,X      ; get current line low byte
  1932 00:DD4D: 85 87              STA   Clinel            ; save current line low byte
  1933 00:DD4F: BD 03 01           LDA   LAB_STAK+3,X      ; get current line high byte
  1934 00:DD52: 85 88              STA   Clineh            ; save current line high byte
  1935 00:DD54: BD 04 01           LDA   LAB_STAK+4,X      ; get BASIC execute pointer low byte
  1936 00:DD57: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  1937 00:DD59: BD 05 01           LDA   LAB_STAK+5,X      ; get BASIC execute pointer high byte
  1938 00:DD5C: 85 C4              STA   Bpntrh            ; save BASIC execute pointer high byte
  1939 00:DD5E: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  1940 00:DD61: 4C C0 DB           JMP   LAB_15C2          ; go do interpreter inner loop
  1941                        
  1942                                                      ; clear stack and back to interpreter loop
  1943                        LoopDone
  1944 00:DD64: E8                 INX                     ; dump DO token
  1945 00:DD65: E8                 INX                     ; dump current line low byte
  1946 00:DD66: E8                 INX                     ; dump current line high byte
  1947 00:DD67: E8                 INX                     ; dump BASIC execute pointer low byte
  1948 00:DD68: E8                 INX                     ; dump BASIC execute pointer high byte
  1949 00:DD69: 9A                 TXS                     ; correct stack
  1950 00:DD6A: 4C 8A DD           JMP   LAB_DATA          ; go perform DATA (find : or [EOL])
  1951                        
  1952                        ; do the return without gosub error
  1953                        
  1954                        LAB_16F4
  1955 00:DD6D: A2 04              LDX   #$04              ; error code $04 ("RETURN without GOSUB" error)
  1956 00:DD6F: 2C                 .byte $2C               ; makes next line BIT LAB_0EA2
  1957                        
  1958                        LAB_16F7                      ; do undefined statement error
  1959 00:DD70: A2 0E              LDX   #$0E              ; error code $0E ("Undefined statement" error)
  1960 00:DD72: 4C 3F D8           JMP   LAB_XERR          ; do error #X, then warm start
  1961                        
  1962                        ; perform RETURN
  1963                        
  1964                        LAB_RETURN
  1965 00:DD75: D0 9E              BNE   LAB_16E5          ; exit if following token (to allow syntax error)
  1966                        
  1967                        LAB_16E8
  1968 00:DD77: 68                 PLA                     ; dump calling routine return address
  1969 00:DD78: 68                 PLA                     ; dump calling routine return address
  1970 00:DD79: 68                 PLA                     ; pull token
  1971 00:DD7A: C9 8D              CMP   #TK_GOSUB         ; compare with GOSUB token
  1972 00:DD7C: D0 EF              BNE   LAB_16F4          ; branch if no matching GOSUB
  1973                        
  1974                        LAB_16FF
  1975 00:DD7E: 68                 PLA                     ; pull current line low byte
  1976 00:DD7F: 85 87              STA   Clinel            ; save current line low byte
  1977 00:DD81: 68                 PLA                     ; pull current line high byte
  1978 00:DD82: 85 88              STA   Clineh            ; save current line high byte
  1979 00:DD84: 68                 PLA                     ; pull BASIC execute pointer low byte
  1980 00:DD85: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  1981 00:DD87: 68                 PLA                     ; pull BASIC execute pointer high byte
  1982 00:DD88: 85 C4              STA   Bpntrh            ; save BASIC execute pointer high byte
  1983                        
  1984                                                      ; now do the DATA statement as we could be returning into
  1985                                                      ; the middle of an ON <var> GOSUB n,m,p,q line
  1986                                                      ; (the return address used by the DATA statement is the one
  1987                                                      ; pushed before the GOSUB was executed!)
  1988                        
  1989                        ; perform DATA
  1990                        
  1991                        LAB_DATA
  1992 00:DD8A: 20 9B DD           JSR   LAB_SNBS          ; scan for next BASIC statement ([:] or [EOL])
  1993                        
  1994                                                      ; set BASIC execute pointer
  1995                        LAB_170F
  1996 00:DD8D: 98                 TYA                     ; copy index to A
  1997 00:DD8E: 18                 CLC                     ; clear carry for add
  1998 00:DD8F: 65 C3              ADC   Bpntrl            ; add BASIC execute pointer low byte
  1999 00:DD91: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  2000 00:DD93: 90 02              BCC   LAB_1719          ; skip next if no carry
  2001                        
  2002 00:DD95: E6 C4              INC   Bpntrh            ; else increment BASIC execute pointer high byte
  2003                        LAB_1719
  2004 00:DD97: 60                 RTS
  2005                        
  2006                        LAB_16FC
  2007 00:DD98: 4C 02 E3           JMP   LAB_SNER          ; do syntax error then warm start
  2008                        
  2009                        ; scan for next BASIC statement ([:] or [EOL])
  2010                        ; returns Y as index to [:] or [EOL]
  2011                        
  2012                        LAB_SNBS
  2013 00:DD9B: A2 3A              LDX   #':'              ; set look for character = ":"
  2014 00:DD9D: 2C                 .byte $2C               ; makes next line BIT $00A2
  2015                        
  2016                        ; scan for next BASIC line
  2017                        ; returns Y as index to [EOL]
  2018                        
  2019                        LAB_SNBL
  2020 00:DD9E: A2 00              LDX   #$00              ; set alt search character = [EOL]
  2021 00:DDA0: A0 00              LDY   #$00              ; set search character = [EOL]
  2022 00:DDA2: 84 5C              STY   Asrch             ; store search character
  2023                        LAB_1725
  2024 00:DDA4: 8A                 TXA                     ; get alt search character
  2025 00:DDA5: 45 5C              EOR   Asrch             ; toggle search character, effectively swap with $00
  2026 00:DDA7: 85 5C              STA   Asrch             ; save swapped search character
  2027                        LAB_172D
  2028 00:DDA9: B1 C3              LDA   (Bpntrl),Y        ; get next byte
  2029 00:DDAB: F0 EA              BEQ   LAB_1719          ; exit if null [EOL]
  2030                        
  2031 00:DDAD: C5 5C              CMP   Asrch             ; compare with search character
  2032 00:DDAF: F0 E6              BEQ   LAB_1719          ; exit if found
  2033                        
  2034 00:DDB1: C8                 INY                     ; increment index
  2035 00:DDB2: C9 22              CMP   #$22              ; compare current character with open quote
  2036 00:DDB4: D0 F3              BNE   LAB_172D          ; if not open quote go get next character
  2037                        
  2038 00:DDB6: F0 EC              BEQ   LAB_1725          ; if found go swap search character for alt search character
  2039                        
  2040                        ; perform IF
  2041                        
  2042                        LAB_IF
  2043 00:DDB8: 20 E1 E1           JSR   LAB_EVEX          ; evaluate the expression
  2044 00:DDBB: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2045 00:DDBE: C9 B0              CMP   #TK_THEN          ; compare with THEN token
  2046 00:DDC0: F0 11              BEQ   LAB_174B          ; if it was THEN go do IF
  2047                        
  2048                                                      ; wasn't IF .. THEN so must be IF .. GOTO
  2049 00:DDC2: C9 89              CMP   #TK_GOTO          ; compare with GOTO token
  2050 00:DDC4: D0 D2              BNE   LAB_16FC          ; if it wasn't GOTO go do syntax error
  2051                        
  2052 00:DDC6: A6 C3              LDX   Bpntrl            ; save the basic pointer low byte
  2053 00:DDC8: A4 C4              LDY   Bpntrh            ; save the basic pointer high byte
  2054 00:DDCA: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  2055 00:DDCD: B0 C9              BCS   LAB_16FC          ; if not numeric go do syntax error
  2056                        
  2057 00:DDCF: 86 C3              STX   Bpntrl            ; restore the basic pointer low byte
  2058 00:DDD1: 84 C4              STY   Bpntrh            ; restore the basic pointer high byte
  2059                        LAB_174B
  2060 00:DDD3: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  2061 00:DDD5: F0 1E              BEQ   LAB_174E          ; if the result was zero go look for an ELSE
  2062                        
  2063 00:DDD7: 20 BC 00           JSR   LAB_IGBY          ; else increment and scan memory
  2064 00:DDDA: B0 03              BCS   LAB_174D          ; if not numeric go do var or keyword
  2065                        
  2066                        LAB_174C
  2067 00:DDDC: 4C E9 DC           JMP   LAB_GOTO          ; else was numeric so do GOTO n
  2068                        
  2069                                                      ; is var or keyword
  2070                        LAB_174D
  2071                        ; *** patch       allow NEXT, LOOP & RETURN to find FOR, DO or GOSUB structure on stack
  2072                        ; *** replace
  2073                        ;      CMP   #TK_RETURN        ; compare the byte with the token for RETURN
  2074                        ;      BNE   LAB_174G          ; if it wasn't RETURN go interpret BASIC code from (Bpntrl)
  2075                        ;                              ; and return to this code to process any following code
  2076                        ;
  2077                        ;      JMP   LAB_1602          ; else it was RETURN so interpret BASIC code from (Bpntrl)
  2078                        ;                              ; but don't return here
  2079                        ;
  2080                        ;LAB_174G
  2081                        ;      JSR   LAB_15FF          ; interpret BASIC code from (Bpntrl)
  2082                        ;
  2083                        ;; the IF was executed and there may be a following ELSE so the code needs to return
  2084                        ;; here to check and ignore the ELSE if present
  2085                        ;
  2086                        ;      LDY   #$00              ; clear the index
  2087                        ;      LDA   (Bpntrl),Y        ; get the next BASIC byte
  2088                        ;      CMP   #TK_ELSE          ; compare it with the token for ELSE
  2089                        ;      BEQ   LAB_DATA          ; if ELSE ignore the following statement
  2090                        ;
  2091                        ;; there was no ELSE so continue execution of IF <expr> THEN <stat> [: <stat>]. any
  2092                        ;; following ELSE will, correctly, cause a syntax error
  2093                        ;
  2094                        ;      RTS                     ; else return to the interpreter inner loop
  2095                        ;
  2096                        ; *** with
  2097 00:DDDF: 68                 PLA                     ; discard interpreter loop return address
  2098 00:DDE0: 68                 PLA                     ; so data structures are at the correct stack offset
  2099 00:DDE1: 20 C2 00           JSR   LAB_GBYT          ; restore token or variable
  2100 00:DDE4: 20 FE DB           JSR   LAB_15FF          ; interpret BASIC code from (Bpntrl)
  2101                        
  2102                        ; the IF was executed and there may be a following ELSE so the code needs to return
  2103                        ; here to check and ignore the ELSE if present
  2104                        
  2105 00:DDE7: A0 00              LDY   #$00              ; clear the index
  2106 00:DDE9: B1 C3              LDA   (Bpntrl),Y        ; get the next BASIC byte
  2107 00:DDEB: C9 AC              CMP   #TK_ELSE          ; compare it with the token for ELSE
  2108 00:DDED: D0 03              BNE   LAB_no_ELSE       ; no - continue on this line
  2109 00:DDEF: 20 8A DD           JSR   LAB_DATA          ; yes - skip the rest of the line
  2110                        
  2111                        ; there was no ELSE so continue execution of IF <expr> THEN <stat> [: <stat>]. any
  2112                        ; following ELSE will, correctly, cause a syntax error
  2113                        
  2114                        LAB_no_ELSE
  2115 00:DDF2: 4C C0 DB           JMP LAB_15C2            ; return to the interpreter inner loop
  2116                        ; *** end patch  allow NEXT, LOOP & RETURN to find FOR, DO or GOSUB structure on stack
  2117                        
  2118                        ; perform ELSE after IF
  2119                        
  2120                        LAB_174E
  2121 00:DDF5: A0 00              LDY   #$00              ; clear the BASIC byte index
  2122 00:DDF7: A2 01              LDX   #$01              ; clear the nesting depth
  2123                        LAB_1750
  2124 00:DDF9: C8                 INY                     ; increment the BASIC byte index
  2125 00:DDFA: B1 C3              LDA   (Bpntrl),Y        ; get the next BASIC byte
  2126 00:DDFC: F0 0F              BEQ   LAB_1753          ; if EOL go add the pointer and return
  2127                        
  2128 00:DDFE: C9 8B              CMP   #TK_IF            ; compare the byte with the token for IF
  2129 00:DE00: D0 03              BNE   LAB_1752          ; if not IF token skip the depth increment
  2130                        
  2131 00:DE02: E8                 INX                     ; else increment the nesting depth ..
  2132 00:DE03: D0 F4              BNE   LAB_1750          ; .. and continue looking
  2133                        
  2134                        LAB_1752
  2135 00:DE05: C9 AC              CMP   #TK_ELSE          ; compare the byte with the token for ELSE
  2136 00:DE07: D0 F0              BNE   LAB_1750          ; if not ELSE token continue looking
  2137                        
  2138 00:DE09: CA                 DEX                     ; was ELSE so decrement the nesting depth
  2139 00:DE0A: D0 ED              BNE   LAB_1750          ; loop if still nested
  2140                        
  2141 00:DE0C: C8                 INY                     ; increment the BASIC byte index past the ELSE
  2142                        
  2143                        ; found the matching ELSE, now do <{n|statement}>
  2144                        
  2145                        LAB_1753
  2146 00:DE0D: 98                 TYA                     ; else copy line index to A
  2147 00:DE0E: 18                 CLC                     ; clear carry for add
  2148 00:DE0F: 65 C3              ADC   Bpntrl            ; add the BASIC execute pointer low byte
  2149 00:DE11: 85 C3              STA   Bpntrl            ; save the BASIC execute pointer low byte
  2150 00:DE13: 90 02              BCC   LAB_1754          ; branch if no overflow to high byte
  2151                        
  2152 00:DE15: E6 C4              INC   Bpntrh            ; else increment the BASIC execute pointer high byte
  2153                        LAB_1754
  2154 00:DE17: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2155 00:DE1A: 90 C0              BCC   LAB_174C          ; if numeric do GOTO n
  2156                                                      ; the code will return to the interpreter loop at the
  2157                                                      ; tail end of the GOTO <n>
  2158                        
  2159 00:DE1C: 4C FE DB           JMP   LAB_15FF          ; interpret BASIC code from (Bpntrl)
  2160                                                      ; the code will return to the interpreter loop at the
  2161                                                      ; tail end of the <statement>
  2162                        
  2163                        ; perform REM, skip (rest of) line
  2164                        
  2165                        LAB_REM
  2166 00:DE1F: 20 9E DD           JSR   LAB_SNBL          ; scan for next BASIC line
  2167 00:DE22: 4C 8D DD           JMP   LAB_170F          ; go set BASIC execute pointer and return, branch always
  2168                        
  2169                        LAB_16FD
  2170 00:DE25: 4C 02 E3           JMP   LAB_SNER          ; do syntax error then warm start
  2171                        
  2172                        ; perform ON
  2173                        
  2174                        LAB_ON
  2175 00:DE28: C9 A9              CMP   #TK_IRQ           ; was it IRQ token ?
  2176 00:DE2A: D0 03              BNE   LAB_NOIN          ; if not go check NMI
  2177                        
  2178 00:DE2C: 4C 47 F6           JMP   LAB_SIRQ          ; else go set-up IRQ
  2179                        
  2180                        LAB_NOIN
  2181 00:DE2F: C9 AA              CMP   #TK_NMI           ; was it NMI token ?
  2182 00:DE31: D0 03              BNE   LAB_NONM          ; if not go do normal ON command
  2183                        
  2184 00:DE33: 4C 4A F6           JMP   LAB_SNMI          ; else go set-up NMI
  2185                        
  2186                        LAB_NONM
  2187 00:DE36: 20 A0 EB           JSR   LAB_GTBY          ; get byte parameter
  2188 00:DE39: 48                 PHA                     ; push GOTO/GOSUB token
  2189 00:DE3A: C9 8D              CMP   #TK_GOSUB         ; compare with GOSUB token
  2190 00:DE3C: F0 04              BEQ   LAB_176B          ; branch if GOSUB
  2191                        
  2192 00:DE3E: C9 89              CMP   #TK_GOTO          ; compare with GOTO token
  2193                        LAB_1767
  2194 00:DE40: D0 E3              BNE   LAB_16FD          ; if not GOTO do syntax error then warm start
  2195                        
  2196                        
  2197                        ; next character was GOTO or GOSUB
  2198                        
  2199                        LAB_176B
  2200 00:DE42: C6 AF              DEC   FAC1_3            ; decrement index (byte value)
  2201 00:DE44: D0 04              BNE   LAB_1773          ; branch if not zero
  2202                        
  2203 00:DE46: 68                 PLA                     ; pull GOTO/GOSUB token
  2204 00:DE47: 4C 00 DC           JMP   LAB_1602          ; go execute it
  2205                        
  2206                        LAB_1773
  2207 00:DE4A: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  2208 00:DE4D: 20 56 DE           JSR   LAB_GFPN          ; get fixed-point number into temp integer (skip this n)
  2209                                                      ; (we could LDX #',' and JSR LAB_SNBL+2, then we
  2210                                                      ; just BNE LAB_176B for the loop. should be quicker ..
  2211                                                      ; no we can't, what if we meet a colon or [EOL]?)
  2212 00:DE50: C9 2C              CMP   #$2C              ; compare next character with ","
  2213 00:DE52: F0 EE              BEQ   LAB_176B          ; loop if ","
  2214                        
  2215                        LAB_177E
  2216 00:DE54: 68                 PLA                     ; else pull keyword token (run out of options)
  2217                                                      ; also dump +/-1 pointer low byte and exit
  2218                        LAB_177F
  2219 00:DE55: 60                 RTS
  2220                        
  2221                        ; takes n * 106 + 11 cycles where n is the number of digits
  2222                        
  2223                        ; get fixed-point number into temp integer
  2224                        
  2225                        LAB_GFPN
  2226 00:DE56: A2 00              LDX   #$00              ; clear reg
  2227 00:DE58: 86 11              STX   Itempl            ; clear temporary integer low byte
  2228                        LAB_1785
  2229 00:DE5A: 86 12              STX   Itemph            ; save temporary integer high byte
  2230 00:DE5C: B0 F7              BCS   LAB_177F          ; return if carry set, end of scan, character was
  2231                                                      ; not 0-9
  2232                        
  2233 00:DE5E: E0 19              CPX   #$19              ; compare high byte with $19
  2234 00:DE60: A8                 TAY                     ; ensure Zb = 0 if the branch is taken
  2235 00:DE61: B0 DD              BCS   LAB_1767          ; branch if >=, makes max line # 63999 because next
  2236                                                      ; bit does *$0A, = 64000, compare at target will fail
  2237                                                      ; and do syntax error
  2238                        
  2239 00:DE63: E9 2F              SBC   #'0'-1            ; subtract "0", $2F + carry, from byte
  2240 00:DE65: A8                 TAY                     ; copy binary digit
  2241 00:DE66: A5 11              LDA   Itempl            ; get temporary integer low byte
  2242 00:DE68: 0A                 ASL                     ; *2 low byte
  2243 00:DE69: 26 12              ROL   Itemph            ; *2 high byte
  2244 00:DE6B: 0A                 ASL                     ; *2 low byte
  2245 00:DE6C: 26 12              ROL   Itemph            ; *2 high byte, *4
  2246 00:DE6E: 65 11              ADC   Itempl            ; + low byte, *5
  2247 00:DE70: 85 11              STA   Itempl            ; save it
  2248 00:DE72: 8A                 TXA                     ; get high byte copy to A
  2249 00:DE73: 65 12              ADC   Itemph            ; + high byte, *5
  2250 00:DE75: 06 11              ASL   Itempl            ; *2 low byte, *10d
  2251 00:DE77: 2A                 ROL                     ; *2 high byte, *10d
  2252 00:DE78: AA                 TAX                     ; copy high byte back to X
  2253 00:DE79: 98                 TYA                     ; get binary digit back
  2254 00:DE7A: 65 11              ADC   Itempl            ; add number low byte
  2255 00:DE7C: 85 11              STA   Itempl            ; save number low byte
  2256 00:DE7E: 90 01              BCC   LAB_17B3          ; if no overflow to high byte get next character
  2257                        
  2258 00:DE80: E8                 INX                     ; else increment high byte
  2259                        LAB_17B3
  2260 00:DE81: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  2261 00:DE84: 4C 5A DE           JMP   LAB_1785          ; loop for next character
  2262                        
  2263                        ; perform DEC
  2264                        
  2265                        LAB_DEC
  2266 00:DE87: A9 F4              LDA   #<LAB_2AFD        ; set -1 pointer low byte
  2267 00:DE89: 2C                 .byte $2C               ; BIT abs to skip the LDA below
  2268                        
  2269                        ; perform INC
  2270                        
  2271                        LAB_INC
  2272 00:DE8A: A9 F0              LDA   #<LAB_259C        ; set 1 pointer low byte
  2273                        LAB_17B5
  2274 00:DE8C: 48                 PHA                     ; save +/-1 pointer low byte
  2275                        LAB_17B7
  2276 00:DE8D: 20 B8 E4           JSR   LAB_GVAR          ; get var address
  2277 00:DE90: A6 5F              LDX   Dtypef            ; get data type flag, $FF=string, $00=numeric
  2278 00:DE92: 30 1E              BMI   IncrErr           ; exit if string
  2279                        
  2280 00:DE94: 85 97              STA   Lvarpl            ; save var address low byte
  2281 00:DE96: 84 98              STY   Lvarph            ; save var address high byte
  2282 00:DE98: 20 8A EF           JSR   LAB_UFAC          ; unpack memory (AY) into FAC1
  2283 00:DE9B: 68                 PLA                     ; get +/-1 pointer low byte
  2284 00:DE9C: 48                 PHA                     ; save +/-1 pointer low byte
  2285 00:DE9D: A0 F8              LDY   #>LAB_259C        ; set +/-1 pointer high byte (both the same)
  2286 00:DE9F: 20 CB EC           JSR   LAB_246C          ; add (AY) to FAC1
  2287 00:DEA2: 20 B0 EF           JSR   LAB_PFAC          ; pack FAC1 into variable (Lvarpl)
  2288                        
  2289 00:DEA5: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2290 00:DEA8: C9 2C              CMP   #','              ; compare with ","
  2291 00:DEAA: D0 A8              BNE   LAB_177E          ; exit if not "," (either end or error)
  2292                        
  2293                                                      ; was "," so another INCR variable to do
  2294 00:DEAC: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  2295 00:DEAF: 4C 8D DE           JMP   LAB_17B7          ; go do next var
  2296                        
  2297                        IncrErr
  2298 00:DEB2: 4C DC E1           JMP   LAB_1ABC          ; do "Type mismatch" error then warm start
  2299                        
  2300                        ; perform LET
  2301                        
  2302                        LAB_LET
  2303 00:DEB5: 20 B8 E4           JSR   LAB_GVAR          ; get var address
  2304 00:DEB8: 85 97              STA   Lvarpl            ; save var address low byte
  2305 00:DEBA: 84 98              STY   Lvarph            ; save var address high byte
  2306 00:DEBC: A9 C1              LDA   #TK_EQUAL         ; get = token
  2307 00:DEBE: 20 F1 E2           JSR   LAB_SCCA          ; scan for CHR$(A), else do syntax error then warm start
  2308 00:DEC1: A5 5F              LDA   Dtypef            ; get data type flag, $FF=string, $00=numeric
  2309 00:DEC3: 48                 PHA                     ; push data type flag
  2310 00:DEC4: 20 E1 E1           JSR   LAB_EVEX          ; evaluate expression
  2311 00:DEC7: 68                 PLA                     ; pop data type flag
  2312 00:DEC8: 2A                 ROL                     ; set carry if type = string
  2313                        ; *** begin patch  result of a string compare stores string pointer to variable
  2314                        ;                  but should store FAC1 (true/false value)
  2315                        ; *** replace
  2316                        ;      JSR   LAB_CKTM          ; type match check, set C for string
  2317                        ;      BNE   LAB_17D5          ; branch if string
  2318                        ; *** with
  2319 00:DEC9: 20 D3 E1           JSR   LAB_CKTM          ; type match check, keep C (expected type)
  2320 00:DECC: B0 03              BCS   LAB_17D5          ; branch if string
  2321                        ; *** end patch
  2322                        
  2323 00:DECE: 4C B0 EF           JMP   LAB_PFAC          ; pack FAC1 into variable (Lvarpl) and return
  2324                        
  2325                        ; string LET
  2326                        
  2327                        LAB_17D5
  2328 00:DED1: A0 02              LDY   #$02              ; set index to pointer high byte
  2329 00:DED3: B1 AE              LDA   (des_pl),Y        ; get string pointer high byte
  2330 00:DED5: C5 82              CMP   Sstorh            ; compare bottom of string space high byte
  2331 00:DED7: 90 17              BCC   LAB_17F4          ; if less assign value and exit (was in program memory)
  2332                        
  2333 00:DED9: D0 07              BNE   LAB_17E6          ; branch if >
  2334                                                      ; else was equal so compare low bytes
  2335 00:DEDB: 88                 DEY                     ; decrement index
  2336 00:DEDC: B1 AE              LDA   (des_pl),Y        ; get pointer low byte
  2337 00:DEDE: C5 81              CMP   Sstorl            ; compare bottom of string space low byte
  2338 00:DEE0: 90 0E              BCC   LAB_17F4          ; if less assign value and exit (was in program memory)
  2339                        
  2340                                                      ; pointer was >= to bottom of string space pointer
  2341                        LAB_17E6
  2342 00:DEE2: A4 AF              LDY   des_ph            ; get descriptor pointer high byte
  2343 00:DEE4: C4 7C              CPY   Svarh             ; compare start of vars high byte
  2344 00:DEE6: 90 08              BCC   LAB_17F4          ; branch if less (descriptor is on stack)
  2345                        
  2346 00:DEE8: D0 0D              BNE   LAB_17FB          ; branch if greater (descriptor is not on stack)
  2347                        
  2348                                                      ; else high bytes were equal so ..
  2349 00:DEEA: A5 AE              LDA   des_pl            ; get descriptor pointer low byte
  2350 00:DEEC: C5 7B              CMP   Svarl             ; compare start of vars low byte
  2351 00:DEEE: B0 07              BCS   LAB_17FB          ; branch if >= (descriptor is not on stack)
  2352                        
  2353                        LAB_17F4
  2354 00:DEF0: A5 AE              LDA   des_pl            ; get descriptor pointer low byte
  2355 00:DEF2: A4 AF              LDY   des_ph            ; get descriptor pointer high byte
  2356 00:DEF4: 4C 0D DF           JMP   LAB_1811          ; clean stack, copy descriptor to variable and return
  2357                        
  2358                                                      ; make space and copy string
  2359                        LAB_17FB
  2360 00:DEF7: A0 00              LDY   #$00              ; index to length
  2361 00:DEF9: B1 AE              LDA   (des_pl),Y        ; get string length
  2362 00:DEFB: 20 40 E8           JSR   LAB_209C          ; copy string
  2363 00:DEFE: A5 9E              LDA   des_2l            ; get descriptor pointer low byte
  2364 00:DF00: A4 9F              LDY   des_2h            ; get descriptor pointer high byte
  2365 00:DF02: 85 B8              STA   ssptr_l           ; save descriptor pointer low byte
  2366 00:DF04: 84 B9              STY   ssptr_h           ; save descriptor pointer high byte
  2367 00:DF06: 20 25 EA           JSR   LAB_228A          ; copy string from descriptor (sdescr) to (Sutill)
  2368 00:DF09: A9 AC              LDA   #<FAC1_e          ; set descriptor pointer low byte
  2369 00:DF0B: A0 00              LDY   #>FAC1_e          ; get descriptor pointer high byte
  2370                        
  2371                                                      ; clean stack and assign value to string variable
  2372                        LAB_1811
  2373 00:DF0D: 85 9E              STA   des_2l            ; save descriptor_2 pointer low byte
  2374 00:DF0F: 84 9F              STY   des_2h            ; save descriptor_2 pointer high byte
  2375 00:DF11: 20 87 EA           JSR   LAB_22EB          ; clean descriptor stack, YA = pointer
  2376 00:DF14: A0 00              LDY   #$00              ; index to length
  2377 00:DF16: B1 9E              LDA   (des_2l),Y        ; get string length
  2378 00:DF18: 91 97              STA   (Lvarpl),Y        ; copy to let string variable
  2379 00:DF1A: C8                 INY                     ; index to string pointer low byte
  2380 00:DF1B: B1 9E              LDA   (des_2l),Y        ; get string pointer low byte
  2381 00:DF1D: 91 97              STA   (Lvarpl),Y        ; copy to let string variable
  2382 00:DF1F: C8                 INY                     ; index to string pointer high byte
  2383 00:DF20: B1 9E              LDA   (des_2l),Y        ; get string pointer high byte
  2384 00:DF22: 91 97              STA   (Lvarpl),Y        ; copy to let string variable
  2385 00:DF24: 60                 RTS
  2386                        
  2387                        ; perform GET
  2388                        
  2389                        LAB_GET
  2390 00:DF25: 20 B8 E4           JSR   LAB_GVAR          ; get var address
  2391 00:DF28: 85 97              STA   Lvarpl            ; save var address low byte
  2392 00:DF2A: 84 98              STY   Lvarph            ; save var address high byte
  2393 00:DF2C: 20 0F F6           JSR   INGET             ; get input byte
  2394 00:DF2F: A6 5F              LDX   Dtypef            ; get data type flag, $FF=string, $00=numeric
  2395 00:DF31: 30 07              BMI   LAB_GETS          ; go get string character
  2396                        
  2397                                                      ; was numeric get
  2398 00:DF33: A8                 TAY                     ; copy character to Y
  2399 00:DF34: 20 74 E7           JSR   LAB_1FD0          ; convert Y to byte in FAC1
  2400 00:DF37: 4C B0 EF           JMP   LAB_PFAC          ; pack FAC1 into variable (Lvarpl) and return
  2401                        
  2402                        LAB_GETS
  2403 00:DF3A: 48                 PHA                     ; save character
  2404 00:DF3B: A9 01              LDA   #$01              ; string is single byte
  2405 00:DF3D: B0 01              BCS   LAB_IsByte        ; branch if byte received
  2406                        
  2407 00:DF3F: 68                 PLA                     ; string is null
  2408                        LAB_IsByte
  2409 00:DF40: 20 48 E8           JSR   LAB_MSSP          ; make string space A bytes long A=$AC=length,
  2410                                                      ; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
  2411 00:DF43: F0 05              BEQ   LAB_NoSt          ; skip store if null string
  2412                        
  2413 00:DF45: 68                 PLA                     ; get character back
  2414 00:DF46: A0 00              LDY   #$00              ; clear index
  2415 00:DF48: 91 AD              STA   (str_pl),Y        ; save byte in string (byte IS string!)
  2416                        LAB_NoSt
  2417 00:DF4A: 20 95 E8           JSR   LAB_RTST          ; check for space on descriptor stack then put address
  2418                                                      ; and length on descriptor stack and update stack pointers
  2419                        
  2420 00:DF4D: 4C D1 DE           JMP   LAB_17D5          ; do string LET and return
  2421                        
  2422                        ; perform PRINT
  2423                        
  2424                        LAB_1829
  2425 00:DF50: 20 D7 DF           JSR   LAB_18C6          ; print string from Sutill/Sutilh
  2426                        LAB_182C
  2427 00:DF53: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2428                        
  2429                        ; PRINT
  2430                        
  2431                        LAB_PRINT
  2432 00:DF56: F0 3B              BEQ   LAB_CRLF          ; if nothing following just print CR/LF
  2433                        
  2434                        LAB_1831
  2435 00:DF58: C9 AB              CMP   #TK_TAB           ; compare with TAB( token
  2436 00:DF5A: F0 56              BEQ   LAB_18A2          ; go do TAB/SPC
  2437                        
  2438 00:DF5C: C9 AF              CMP   #TK_SPC           ; compare with SPC( token
  2439 00:DF5E: F0 52              BEQ   LAB_18A2          ; go do TAB/SPC
  2440                        
  2441 00:DF60: C9 2C              CMP   #','              ; compare with ","
  2442 00:DF62: F0 38              BEQ   LAB_188B          ; go do move to next TAB mark
  2443                        
  2444 00:DF64: C9 3B              CMP   #';'              ; compare with ";"
  2445 00:DF66: F0 66              BEQ   LAB_18BD          ; if ";" continue with PRINT processing
  2446                        
  2447 00:DF68: 20 E1 E1           JSR   LAB_EVEX          ; evaluate expression
  2448 00:DF6B: 24 5F              BIT   Dtypef            ; test data type flag, $FF=string, $00=numeric
  2449 00:DF6D: 30 E1              BMI   LAB_1829          ; branch if string
  2450                        
  2451 00:DF6F: 20 A2 F1           JSR   LAB_296E          ; convert FAC1 to string
  2452 00:DF72: 20 52 E8           JSR   LAB_20AE          ; print " terminated string to Sutill/Sutilh
  2453 00:DF75: A0 00              LDY   #$00              ; clear index
  2454                        
  2455                        ; don't check fit if terminal width byte is zero
  2456                        
  2457 00:DF77: A5 0F              LDA   TWidth            ; get terminal width byte
  2458 00:DF79: F0 0A              BEQ   LAB_185E          ; skip check if zero
  2459                        
  2460 00:DF7B: 38                 SEC                     ; set carry for subtract
  2461 00:DF7C: E5 0E              SBC   TPos              ; subtract terminal position
  2462 00:DF7E: F1 AE              SBC   (des_pl),Y        ; subtract string length
  2463 00:DF80: B0 03              BCS   LAB_185E          ; branch if less than terminal width
  2464                        
  2465 00:DF82: 20 93 DF           JSR   LAB_CRLF          ; else print CR/LF
  2466                        LAB_185E
  2467 00:DF85: 20 D7 DF           JSR   LAB_18C6          ; print string from Sutill/Sutilh
  2468 00:DF88: F0 C9              BEQ   LAB_182C          ; always go continue processing line
  2469                        
  2470                        ; CR/LF return to BASIC from BASIC input handler
  2471                        
  2472                        LAB_1866
  2473 00:DF8A: A9 00              LDA   #$00              ; clear byte
  2474 00:DF8C: 9D 21 02           STA   Ibuffs,X          ; null terminate input
  2475 00:DF8F: A2 21              LDX   #<Ibuffs          ; set X to buffer start-1 low byte
  2476 00:DF91: A0 02              LDY   #>Ibuffs          ; set Y to buffer start-1 high byte
  2477                        
  2478                        ; print CR/LF
  2479                        
  2480                        LAB_CRLF
  2481 00:DF93: A9 0D              LDA   #$0D              ; load [CR]
  2482 00:DF95: 20 EE DF           JSR   LAB_PRNA          ; go print the character
  2483 00:DF98: A9 0A              LDA   #$0A              ; load [LF]
  2484 00:DF9A: D0 52              BNE   LAB_PRNA          ; go print the character and return, branch always
  2485                        
  2486                        LAB_188B
  2487 00:DF9C: A5 0E              LDA   TPos              ; get terminal position
  2488 00:DF9E: C5 10              CMP   Iclim             ; compare with input column limit
  2489 00:DFA0: 90 05              BCC   LAB_1897          ; branch if less
  2490                        
  2491 00:DFA2: 20 93 DF           JSR   LAB_CRLF          ; else print CR/LF (next line)
  2492 00:DFA5: D0 27              BNE   LAB_18BD          ; continue with PRINT processing (branch always)
  2493                        
  2494                        LAB_1897
  2495 00:DFA7: 38                 SEC                     ; set carry for subtract
  2496                        LAB_1898
  2497 00:DFA8: E5 64              SBC   TabSiz            ; subtract TAB size
  2498 00:DFAA: B0 FC              BCS   LAB_1898          ; loop if result was +ve
  2499                        
  2500 00:DFAC: 49 FF              EOR   #$FF              ; complement it
  2501 00:DFAE: 69 01              ADC   #$01              ; +1 (twos complement)
  2502 00:DFB0: D0 12              BNE   LAB_18B6          ; always print A spaces (result is never $00)
  2503                        
  2504                                                      ; do TAB/SPC
  2505                        LAB_18A2
  2506 00:DFB2: 48                 PHA                     ; save token
  2507 00:DFB3: 20 9D EB           JSR   LAB_SGBY          ; scan and get byte parameter
  2508 00:DFB6: C9 29              CMP   #$29              ; is next character )
  2509 00:DFB8: D0 7B              BNE   LAB_1910          ; if not do syntax error then warm start
  2510                        
  2511 00:DFBA: 68                 PLA                     ; get token back
  2512 00:DFBB: C9 AB              CMP   #TK_TAB           ; was it TAB ?
  2513 00:DFBD: D0 06              BNE   LAB_18B7          ; if not go do SPC
  2514                        
  2515                                                      ; calculate TAB offset
  2516 00:DFBF: 8A                 TXA                     ; copy integer value to A
  2517 00:DFC0: E5 0E              SBC   TPos              ; subtract terminal position
  2518 00:DFC2: 90 0A              BCC   LAB_18BD          ; branch if result was < 0 (can't TAB backwards)
  2519                        
  2520                                                      ; print A spaces
  2521                        LAB_18B6
  2522 00:DFC4: AA                 TAX                     ; copy result to X
  2523                        LAB_18B7
  2524 00:DFC5: 8A                 TXA                     ; set flags on size for SPC
  2525 00:DFC6: F0 06              BEQ   LAB_18BD          ; branch if result was = $0, already here
  2526                        
  2527                                                      ; print X spaces
  2528                        LAB_18BA
  2529 00:DFC8: 20 E9 DF           JSR   LAB_18E0          ; print " "
  2530 00:DFCB: CA                 DEX                     ; decrement count
  2531 00:DFCC: D0 FA              BNE   LAB_18BA          ; loop if not all done
  2532                        
  2533                                                      ; continue with PRINT processing
  2534                        LAB_18BD
  2535 00:DFCE: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  2536 00:DFD1: D0 85              BNE   LAB_1831          ; if more to print go do it
  2537                        
  2538 00:DFD3: 60                 RTS
  2539                        
  2540                        ; print null terminated string from memory
  2541                        
  2542                        LAB_18C3
  2543 00:DFD4: 20 52 E8           JSR   LAB_20AE          ; print " terminated string to Sutill/Sutilh
  2544                        
  2545                        ; print string from Sutill/Sutilh
  2546                        
  2547                        LAB_18C6
  2548 00:DFD7: 20 52 EA           JSR   LAB_22B6          ; pop string off descriptor stack, or from top of string
  2549                                                      ; space returns with A = length, X=$71=pointer low byte,
  2550                                                      ; Y=$72=pointer high byte
  2551 00:DFDA: A0 00              LDY   #$00              ; reset index
  2552 00:DFDC: AA                 TAX                     ; copy length to X
  2553 00:DFDD: F0 49              BEQ   LAB_188C          ; exit (RTS) if null string
  2554                        
  2555                        LAB_18CD
  2556                        
  2557 00:DFDF: B1 71              LDA   (ut1_pl),Y        ; get next byte
  2558 00:DFE1: 20 EE DF           JSR   LAB_PRNA          ; go print the character
  2559 00:DFE4: C8                 INY                     ; increment index
  2560 00:DFE5: CA                 DEX                     ; decrement count
  2561 00:DFE6: D0 F7              BNE   LAB_18CD          ; loop if not done yet
  2562                        
  2563 00:DFE8: 60                 RTS
  2564                        
  2565                                                      ; Print single format character
  2566                        ; print " "
  2567                        
  2568                        LAB_18E0
  2569 00:DFE9: A9 20              LDA   #$20              ; load " "
  2570 00:DFEB: 2C                 .byte $2C               ; change next line to BIT LAB_3FA9
  2571                        
  2572                        ; print "?" character
  2573                        
  2574                        LAB_18E3
  2575 00:DFEC: A9 3F              LDA   #$3F              ; load "?" character
  2576                        
  2577                        ; print character in A
  2578                        ; now includes the null handler
  2579                        ; also includes infinite line length code
  2580                        ; note! some routines expect this one to exit with Zb=0
  2581                        
  2582                        LAB_PRNA
  2583 00:DFEE: C9 20              CMP   #' '              ; compare with " "
  2584 00:DFF0: 90 19              BCC   LAB_18F9          ; branch if less (non printing)
  2585                        
  2586                                                      ; else printable character
  2587 00:DFF2: 48                 PHA                     ; save the character
  2588                        
  2589                        ; don't check fit if terminal width byte is zero
  2590                        
  2591 00:DFF3: A5 0F              LDA   TWidth            ; get terminal width
  2592 00:DFF5: D0 0A              BNE   LAB_18F0          ; branch if not zero (not infinite length)
  2593                        
  2594                        ; is "infinite line" so check TAB position
  2595                        
  2596 00:DFF7: A5 0E              LDA   TPos              ; get position
  2597 00:DFF9: E5 64              SBC   TabSiz            ; subtract TAB size, carry set by CMP #$20 above
  2598 00:DFFB: D0 0B              BNE   LAB_18F7          ; skip reset if different
  2599                        
  2600 00:DFFD: 85 0E              STA   TPos              ; else reset position
  2601 00:DFFF: F0 07              BEQ   LAB_18F7          ; go print character
  2602                        
  2603                        LAB_18F0
  2604 00:E001: C5 0E              CMP   TPos              ; compare with terminal character position
  2605 00:E003: D0 03              BNE   LAB_18F7          ; branch if not at end of line
  2606                        
  2607 00:E005: 20 93 DF           JSR   LAB_CRLF          ; else print CR/LF
  2608                        LAB_18F7
  2609 00:E008: E6 0E              INC   TPos              ; increment terminal position
  2610 00:E00A: 68                 PLA                     ; get character back
  2611                        LAB_18F9
  2612 00:E00B: 20 FB F7           JSR   V_OUTP            ; output byte via output vector
  2613 00:E00E: C9 0D              CMP   #$0D              ; compare with [CR]
  2614 00:E010: D0 14              BNE   LAB_188A          ; branch if not [CR]
  2615                        
  2616                                                      ; else print nullct nulls after the [CR]
  2617 00:E012: 86 78              STX   TempB             ; save buffer index
  2618 00:E014: A6 0D              LDX   Nullct            ; get null count
  2619 00:E016: F0 0A              BEQ   LAB_1886          ; branch if no nulls
  2620                        
  2621 00:E018: A9 00              LDA   #$00              ; load [NULL]
  2622                        LAB_1880
  2623 00:E01A: 20 EE DF           JSR   LAB_PRNA          ; go print the character
  2624 00:E01D: CA                 DEX                     ; decrement count
  2625 00:E01E: D0 FA              BNE   LAB_1880          ; loop if not all done
  2626                        
  2627 00:E020: A9 0D              LDA   #$0D              ; restore the character (and set the flags)
  2628                        LAB_1886
  2629 00:E022: 86 0E              STX   TPos              ; clear terminal position (X always = zero when we get here)
  2630 00:E024: A6 78              LDX   TempB             ; restore buffer index
  2631                        LAB_188A
  2632 00:E026: 29 FF              AND   #$FF              ; set the flags
  2633                        LAB_188C
  2634 00:E028: 60                 RTS
  2635                        
  2636                        ; handle bad input data
  2637                        
  2638                        LAB_1904
  2639 00:E029: A5 62              LDA   Imode             ; get input mode flag, $00=INPUT, $00=READ
  2640 00:E02B: 10 0B              BPL   LAB_1913          ; branch if INPUT (go do redo)
  2641                        
  2642 00:E02D: A5 8D              LDA   Dlinel            ; get current DATA line low byte
  2643 00:E02F: A4 8E              LDY   Dlineh            ; get current DATA line high byte
  2644 00:E031: 85 87              STA   Clinel            ; save current line low byte
  2645 00:E033: 84 88              STY   Clineh            ; save current line high byte
  2646                        LAB_1910
  2647 00:E035: 4C 02 E3           JMP   LAB_SNER          ; do syntax error then warm start
  2648                        
  2649                                                      ; mode was INPUT
  2650                        LAB_1913
  2651 00:E038: A9 22              LDA   #<LAB_REDO        ; point to redo message (low addr)
  2652 00:E03A: A0 FF              LDY   #>LAB_REDO        ; point to redo message (high addr)
  2653 00:E03C: 20 D4 DF           JSR   LAB_18C3          ; print null terminated string from memory
  2654 00:E03F: A5 8B              LDA   Cpntrl            ; get continue pointer low byte
  2655 00:E041: A4 8C              LDY   Cpntrh            ; get continue pointer high byte
  2656 00:E043: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  2657 00:E045: 84 C4              STY   Bpntrh            ; save BASIC execute pointer high byte
  2658 00:E047: 60                 RTS
  2659                        
  2660                        ; perform INPUT
  2661                        
  2662                        LAB_INPUT
  2663 00:E048: C9 22              CMP   #$22              ; compare next byte with open quote
  2664 00:E04A: D0 0B              BNE   LAB_1934          ; branch if no prompt string
  2665                        
  2666 00:E04C: 20 BE E2           JSR   LAB_1BC1          ; print "..." string
  2667 00:E04F: A9 3B              LDA   #$3B              ; load A with ";"
  2668 00:E051: 20 F1 E2           JSR   LAB_SCCA          ; scan for CHR$(A), else do syntax error then warm start
  2669 00:E054: 20 D7 DF           JSR   LAB_18C6          ; print string from Sutill/Sutilh
  2670                        
  2671                                                      ; done with prompt, now get data
  2672                        LAB_1934
  2673 00:E057: 20 78 E7           JSR   LAB_CKRN          ; check not Direct, back here if ok
  2674 00:E05A: 20 43 D9           JSR   LAB_INLN          ; print "? " and get BASIC input
  2675 00:E05D: A9 00              LDA   #$00              ; set mode = INPUT
  2676 00:E05F: CD 21 02           CMP   Ibuffs            ; test first byte in buffer
  2677 00:E062: D0 09              BNE   LAB_1953          ; branch if not null input
  2678                        
  2679                        ; *** change p2: keep carry set to throw break message
  2680                        ;      CLC                     ; was null input so clear carry to exit program
  2681 00:E064: 4C 28 DC           JMP   LAB_1647          ; go do BREAK exit
  2682                        
  2683                        ; perform READ
  2684                        
  2685                        LAB_READ
  2686 00:E067: A6 8F              LDX   Dptrl             ; get DATA pointer low byte
  2687 00:E069: A4 90              LDY   Dptrh             ; get DATA pointer high byte
  2688 00:E06B: A9 80              LDA   #$80              ; set mode = READ
  2689                        
  2690                        LAB_1953
  2691 00:E06D: 85 62              STA   Imode             ; set input mode flag, $00=INPUT, $80=READ
  2692 00:E06F: 86 91              STX   Rdptrl            ; save READ pointer low byte
  2693 00:E071: 84 92              STY   Rdptrh            ; save READ pointer high byte
  2694                        
  2695                                                      ; READ or INPUT next variable from list
  2696                        LAB_195B
  2697 00:E073: 20 B8 E4           JSR   LAB_GVAR          ; get (var) address
  2698 00:E076: 85 97              STA   Lvarpl            ; save address low byte
  2699 00:E078: 84 98              STY   Lvarph            ; save address high byte
  2700 00:E07A: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  2701 00:E07C: A4 C4              LDY   Bpntrh            ; get BASIC execute pointer high byte
  2702 00:E07E: 85 11              STA   Itempl            ; save as temporary integer low byte
  2703 00:E080: 84 12              STY   Itemph            ; save as temporary integer high byte
  2704 00:E082: A6 91              LDX   Rdptrl            ; get READ pointer low byte
  2705 00:E084: A4 92              LDY   Rdptrh            ; get READ pointer high byte
  2706 00:E086: 86 C3              STX   Bpntrl            ; set BASIC execute pointer low byte
  2707 00:E088: 84 C4              STY   Bpntrh            ; set BASIC execute pointer high byte
  2708 00:E08A: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2709 00:E08D: D0 11              BNE   LAB_1988          ; branch if not null
  2710                        
  2711                                                      ; pointer was to null entry
  2712 00:E08F: 24 62              BIT   Imode             ; test input mode flag, $00=INPUT, $80=READ
  2713 00:E091: 30 65              BMI   LAB_19DD          ; branch if READ
  2714                        
  2715                                                      ; mode was INPUT
  2716 00:E093: 20 EC DF           JSR   LAB_18E3          ; print "?" character (double ? for extended input)
  2717 00:E096: 20 43 D9           JSR   LAB_INLN          ; print "? " and get BASIC input
  2718 00:E099: 86 C3              STX   Bpntrl            ; set BASIC execute pointer low byte
  2719 00:E09B: 84 C4              STY   Bpntrh            ; set BASIC execute pointer high byte
  2720                        LAB_1985
  2721 00:E09D: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2722                        LAB_1988
  2723 00:E0A0: 24 5F              BIT   Dtypef            ; test data type flag, $FF=string, $00=numeric
  2724 00:E0A2: 10 24              BPL   LAB_19B0          ; branch if numeric
  2725                        
  2726                                                      ; else get string
  2727 00:E0A4: 85 5B              STA   Srchc             ; save search character
  2728 00:E0A6: C9 22              CMP   #$22              ; was it " ?
  2729 00:E0A8: F0 07              BEQ   LAB_1999          ; branch if so
  2730                        
  2731 00:E0AA: A9 3A              LDA   #':'              ; else search character is ":"
  2732 00:E0AC: 85 5B              STA   Srchc             ; set new search character
  2733 00:E0AE: A9 2C              LDA   #','              ; other search character is ","
  2734 00:E0B0: 18                 CLC                     ; clear carry for add
  2735                        LAB_1999
  2736 00:E0B1: 85 5C              STA   Asrch             ; set second search character
  2737 00:E0B3: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  2738 00:E0B5: A4 C4              LDY   Bpntrh            ; get BASIC execute pointer high byte
  2739                        
  2740 00:E0B7: 69 00              ADC   #$00              ; c is =1 if we came via the BEQ LAB_1999, else =0
  2741 00:E0B9: 90 01              BCC   LAB_19A4          ; branch if no execute pointer low byte rollover
  2742                        
  2743 00:E0BB: C8                 INY                     ; else increment high byte
  2744                        LAB_19A4
  2745 00:E0BC: 20 58 E8           JSR   LAB_20B4          ; print Srchc or Asrch terminated string to Sutill/Sutilh
  2746 00:E0BF: 20 DC EB           JSR   LAB_23F3          ; restore BASIC execute pointer from temp (Btmpl/Btmph)
  2747 00:E0C2: 20 D1 DE           JSR   LAB_17D5          ; go do string LET
  2748 00:E0C5: 4C CE E0           JMP   LAB_19B6          ; go check string terminator
  2749                        
  2750                                                      ; get numeric INPUT
  2751                        LAB_19B0
  2752 00:E0C8: 20 B3 F0           JSR   LAB_2887          ; get FAC1 from string
  2753 00:E0CB: 20 B0 EF           JSR   LAB_PFAC          ; pack FAC1 into (Lvarpl)
  2754                        LAB_19B6
  2755 00:E0CE: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2756 00:E0D1: F0 0A              BEQ   LAB_19C5          ; branch if null (last entry)
  2757                        
  2758 00:E0D3: C9 2C              CMP   #','              ; else compare with ","
  2759 00:E0D5: F0 03              BEQ   LAB_19C2          ; branch if ","
  2760                        
  2761 00:E0D7: 4C 29 E0           JMP   LAB_1904          ; else go handle bad input data
  2762                        
  2763                                                      ; got good input data
  2764                        LAB_19C2
  2765 00:E0DA: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  2766                        LAB_19C5
  2767 00:E0DD: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte (temp READ/INPUT ptr)
  2768 00:E0DF: A4 C4              LDY   Bpntrh            ; get BASIC execute pointer high byte (temp READ/INPUT ptr)
  2769 00:E0E1: 85 91              STA   Rdptrl            ; save for now
  2770 00:E0E3: 84 92              STY   Rdptrh            ; save for now
  2771 00:E0E5: A5 11              LDA   Itempl            ; get temporary integer low byte (temp BASIC execute ptr)
  2772 00:E0E7: A4 12              LDY   Itemph            ; get temporary integer high byte (temp BASIC execute ptr)
  2773 00:E0E9: 85 C3              STA   Bpntrl            ; set BASIC execute pointer low byte
  2774 00:E0EB: 84 C4              STY   Bpntrh            ; set BASIC execute pointer high byte
  2775 00:E0ED: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2776 00:E0F0: F0 2C              BEQ   LAB_1A03          ; if null go do extra ignored message
  2777                        
  2778 00:E0F2: 20 FE E2           JSR   LAB_1C01          ; else scan for "," , else do syntax error then warm start
  2779 00:E0F5: 4C 73 E0           JMP   LAB_195B          ; go INPUT next variable from list
  2780                        
  2781                                                      ; find next DATA statement or do "Out of DATA" error
  2782                        LAB_19DD
  2783 00:E0F8: 20 9B DD           JSR   LAB_SNBS          ; scan for next BASIC statement ([:] or [EOL])
  2784 00:E0FB: C8                 INY                     ; increment index
  2785 00:E0FC: AA                 TAX                     ; copy character ([:] or [EOL])
  2786 00:E0FD: D0 12              BNE   LAB_19F6          ; branch if [:]
  2787                        
  2788 00:E0FF: A2 06              LDX   #$06              ; set for "Out of DATA" error
  2789 00:E101: C8                 INY                     ; increment index, now points to next line pointer high byte
  2790 00:E102: B1 C3              LDA   (Bpntrl),Y        ; get next line pointer high byte
  2791 00:E104: F0 73              BEQ   LAB_1A54          ; branch if end (eventually does error X)
  2792                        
  2793 00:E106: C8                 INY                     ; increment index
  2794 00:E107: B1 C3              LDA   (Bpntrl),Y        ; get next line # low byte
  2795 00:E109: 85 8D              STA   Dlinel            ; save current DATA line low byte
  2796 00:E10B: C8                 INY                     ; increment index
  2797 00:E10C: B1 C3              LDA   (Bpntrl),Y        ; get next line # high byte
  2798 00:E10E: C8                 INY                     ; increment index
  2799 00:E10F: 85 8E              STA   Dlineh            ; save current DATA line high byte
  2800                        LAB_19F6
  2801 00:E111: B1 C3              LDA   (Bpntrl),Y        ; get byte
  2802 00:E113: C8                 INY                     ; increment index
  2803 00:E114: AA                 TAX                     ; copy to X
  2804 00:E115: 20 8D DD           JSR   LAB_170F          ; set BASIC execute pointer
  2805 00:E118: E0 83              CPX   #TK_DATA          ; compare with "DATA" token
  2806 00:E11A: F0 81              BEQ   LAB_1985          ; was "DATA" so go do next READ
  2807                        
  2808 00:E11C: D0 DA              BNE   LAB_19DD          ; go find next statement if not "DATA"
  2809                        
  2810                        ; end of INPUT/READ routine
  2811                        
  2812                        LAB_1A03
  2813 00:E11E: A5 91              LDA   Rdptrl            ; get temp READ pointer low byte
  2814 00:E120: A4 92              LDY   Rdptrh            ; get temp READ pointer high byte
  2815 00:E122: A6 62              LDX   Imode             ; get input mode flag, $00=INPUT, $80=READ
  2816 00:E124: 10 03              BPL   LAB_1A0E          ; branch if INPUT
  2817                        
  2818 00:E126: 4C 4A DC           JMP   LAB_1624          ; save AY as DATA pointer and return
  2819                        
  2820                                                      ; we were getting INPUT
  2821                        LAB_1A0E
  2822 00:E129: A0 00              LDY   #$00              ; clear index
  2823 00:E12B: B1 91              LDA   (Rdptrl),Y        ; get next byte
  2824 00:E12D: D0 01              BNE   LAB_1A1B          ; error if not end of INPUT
  2825                        
  2826 00:E12F: 60                 RTS
  2827                        
  2828                                                      ; user typed too much
  2829                        LAB_1A1B
  2830 00:E130: A9 11              LDA   #<LAB_IMSG        ; point to extra ignored message (low addr)
  2831 00:E132: A0 FF              LDY   #>LAB_IMSG        ; point to extra ignored message (high addr)
  2832 00:E134: 4C D4 DF           JMP   LAB_18C3          ; print null terminated string from memory and return
  2833                        
  2834                        ; search the stack for FOR activity
  2835                        ; exit with z=1 if FOR else exit with z=0
  2836                        
  2837                        LAB_11A1
  2838 00:E137: BA                 TSX                     ; copy stack pointer
  2839 00:E138: E8                 INX                     ; +1 pass return address
  2840 00:E139: E8                 INX                     ; +2 pass return address
  2841 00:E13A: E8                 INX                     ; +3 pass calling routine return address
  2842 00:E13B: E8                 INX                     ; +4 pass calling routine return address
  2843                        LAB_11A6
  2844 00:E13C: BD 01 01           LDA   LAB_STAK+1,X      ; get token byte from stack
  2845 00:E13F: C9 81              CMP   #TK_FOR           ; is it FOR token
  2846 00:E141: D0 21              BNE   LAB_11CE          ; exit if not FOR token
  2847                        
  2848                                                      ; was FOR token
  2849 00:E143: A5 98              LDA   Frnxth            ; get var pointer for FOR/NEXT high byte
  2850 00:E145: D0 0A              BNE   LAB_11BB          ; branch if not null
  2851                        
  2852 00:E147: BD 02 01           LDA   LAB_STAK+2,X      ; get FOR variable pointer low byte
  2853 00:E14A: 85 97              STA   Frnxtl            ; save var pointer for FOR/NEXT low byte
  2854 00:E14C: BD 03 01           LDA   LAB_STAK+3,X      ; get FOR variable pointer high byte
  2855 00:E14F: 85 98              STA   Frnxth            ; save var pointer for FOR/NEXT high byte
  2856                        LAB_11BB
  2857 00:E151: DD 03 01           CMP   LAB_STAK+3,X      ; compare var pointer with stacked var pointer (high byte)
  2858 00:E154: D0 07              BNE   LAB_11C7          ; branch if no match
  2859                        
  2860 00:E156: A5 97              LDA   Frnxtl            ; get var pointer for FOR/NEXT low byte
  2861 00:E158: DD 02 01           CMP   LAB_STAK+2,X      ; compare var pointer with stacked var pointer (low byte)
  2862 00:E15B: F0 07              BEQ   LAB_11CE          ; exit if match found
  2863                        
  2864                        LAB_11C7
  2865 00:E15D: 8A                 TXA                     ; copy index
  2866 00:E15E: 18                 CLC                     ; clear carry for add
  2867 00:E15F: 69 10              ADC   #$10              ; add FOR stack use size
  2868 00:E161: AA                 TAX                     ; copy back to index
  2869 00:E162: D0 D8              BNE   LAB_11A6          ; loop if not at start of stack
  2870                        
  2871                        LAB_11CE
  2872 00:E164: 60                 RTS
  2873                        
  2874                        ; perform NEXT
  2875                        
  2876                        LAB_NEXT
  2877 00:E165: D0 04              BNE   LAB_1A46          ; branch if NEXT var
  2878                        
  2879 00:E167: A0 00              LDY   #$00              ; else clear Y
  2880 00:E169: F0 03              BEQ   LAB_1A49          ; branch always (no variable to search for)
  2881                        
  2882                        ; NEXT var
  2883                        
  2884                        LAB_1A46
  2885 00:E16B: 20 B8 E4           JSR   LAB_GVAR          ; get variable address
  2886                        LAB_1A49
  2887 00:E16E: 85 97              STA   Frnxtl            ; store variable pointer low byte
  2888 00:E170: 84 98              STY   Frnxth            ; store variable pointer high byte
  2889                                                      ; (both cleared if no variable defined)
  2890 00:E172: 20 37 E1           JSR   LAB_11A1          ; search the stack for FOR activity
  2891 00:E175: F0 04              BEQ   LAB_1A56          ; branch if found
  2892                        
  2893 00:E177: A2 00              LDX   #$00              ; else set error $00 ("NEXT without FOR" error)
  2894                        LAB_1A54
  2895 00:E179: F0 63              BEQ   LAB_1ABE          ; do error #X, then warm start
  2896                        
  2897                        LAB_1A56
  2898 00:E17B: 9A                 TXS                     ; set stack pointer, X set by search, dumps return addresses
  2899                        
  2900 00:E17C: 8A                 TXA                     ; copy stack pointer
  2901 00:E17D: 38                 SEC                     ; set carry for subtract
  2902 00:E17E: E9 F7              SBC   #$F7              ; point to TO var
  2903 00:E180: 85 73              STA   ut2_pl            ; save pointer to TO var for compare
  2904 00:E182: 69 FB              ADC   #$FB              ; point to STEP var
  2905                        
  2906 00:E184: A0 01              LDY   #>LAB_STAK        ; point to stack page high byte
  2907 00:E186: 20 8A EF           JSR   LAB_UFAC          ; unpack memory (STEP value) into FAC1
  2908 00:E189: BA                 TSX                     ; get stack pointer back
  2909 00:E18A: BD 08 01           LDA   LAB_STAK+8,X      ; get step sign
  2910 00:E18D: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  2911 00:E18F: A5 97              LDA   Frnxtl            ; get FOR variable pointer low byte
  2912 00:E191: A4 98              LDY   Frnxth            ; get FOR variable pointer high byte
  2913 00:E193: 20 CB EC           JSR   LAB_246C          ; add (FOR variable) to FAC1
  2914 00:E196: 20 B0 EF           JSR   LAB_PFAC          ; pack FAC1 into (FOR variable)
  2915 00:E199: A0 01              LDY   #>LAB_STAK        ; point to stack page high byte
  2916 00:E19B: 20 26 F0           JSR   LAB_27FA          ; compare FAC1 with (Y,ut2_pl) (TO value)
  2917 00:E19E: BA                 TSX                     ; get stack pointer back
  2918 00:E19F: DD 08 01           CMP   LAB_STAK+8,X      ; compare step sign
  2919 00:E1A2: F0 17              BEQ   LAB_1A9B          ; branch if = (loop complete)
  2920                        
  2921                                                      ; loop back and do it all again
  2922 00:E1A4: BD 0D 01           LDA   LAB_STAK+$0D,X    ; get FOR line low byte
  2923 00:E1A7: 85 87              STA   Clinel            ; save current line low byte
  2924 00:E1A9: BD 0E 01           LDA   LAB_STAK+$0E,X    ; get FOR line high byte
  2925 00:E1AC: 85 88              STA   Clineh            ; save current line high byte
  2926 00:E1AE: BD 10 01           LDA   LAB_STAK+$10,X    ; get BASIC execute pointer low byte
  2927 00:E1B1: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  2928 00:E1B3: BD 0F 01           LDA   LAB_STAK+$0F,X    ; get BASIC execute pointer high byte
  2929 00:E1B6: 85 C4              STA   Bpntrh            ; save BASIC execute pointer high byte
  2930                        LAB_1A98
  2931 00:E1B8: 4C C0 DB           JMP   LAB_15C2          ; go do interpreter inner loop
  2932                        
  2933                                                      ; loop complete so carry on
  2934                        LAB_1A9B
  2935 00:E1BB: 8A                 TXA                     ; stack copy to A
  2936 00:E1BC: 69 0F              ADC   #$0F              ; add $10 ($0F+carry) to dump FOR structure
  2937 00:E1BE: AA                 TAX                     ; copy back to index
  2938 00:E1BF: 9A                 TXS                     ; copy to stack pointer
  2939 00:E1C0: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2940 00:E1C3: C9 2C              CMP   #','              ; compare with ","
  2941 00:E1C5: D0 F1              BNE   LAB_1A98          ; branch if not "," (go do interpreter inner loop)
  2942                        
  2943                                                      ; was "," so another NEXT variable to do
  2944 00:E1C7: 20 BC 00           JSR   LAB_IGBY          ; else increment and scan memory
  2945 00:E1CA: 20 6B E1           JSR   LAB_1A46          ; do NEXT (var)
  2946                        
  2947                        ; evaluate expression and check is numeric, else do type mismatch
  2948                        
  2949                        LAB_EVNM
  2950 00:E1CD: 20 E1 E1           JSR   LAB_EVEX          ; evaluate expression
  2951                        
  2952                        ; check if source is numeric, else do type mismatch
  2953                        
  2954                        LAB_CTNM
  2955 00:E1D0: 18                 CLC                     ; destination is numeric
  2956 00:E1D1: 24                 .byte $24               ; makes next line BIT $38
  2957                        
  2958                        ; check if source is string, else do type mismatch
  2959                        
  2960                        LAB_CTST
  2961 00:E1D2: 38                 SEC                     ; required type is string
  2962                        
  2963                        ; type match check, set C for string, clear C for numeric
  2964                        
  2965                        LAB_CKTM
  2966 00:E1D3: 24 5F              BIT   Dtypef            ; test data type flag, $FF=string, $00=numeric
  2967 00:E1D5: 30 03              BMI   LAB_1ABA          ; branch if data type is string
  2968                        
  2969                                                      ; else data type was numeric
  2970 00:E1D7: B0 03              BCS   LAB_1ABC          ; if required type is string do type mismatch error
  2971                        LAB_1AB9
  2972 00:E1D9: 60                 RTS
  2973                        
  2974                                                      ; data type was string, now check required type
  2975                        LAB_1ABA
  2976 00:E1DA: B0 FD              BCS   LAB_1AB9          ; exit if required type is string
  2977                        
  2978                                                      ; else do type mismatch error
  2979                        LAB_1ABC
  2980 00:E1DC: A2 18              LDX   #$18              ; error code $18 ("Type mismatch" error)
  2981                        LAB_1ABE
  2982 00:E1DE: 4C 3F D8           JMP   LAB_XERR          ; do error #X, then warm start
  2983                        
  2984                        ; evaluate expression
  2985                        
  2986                        LAB_EVEX
  2987 00:E1E1: A6 C3              LDX   Bpntrl            ; get BASIC execute pointer low byte
  2988 00:E1E3: D0 02              BNE   LAB_1AC7          ; skip next if not zero
  2989                        
  2990 00:E1E5: C6 C4              DEC   Bpntrh            ; else decrement BASIC execute pointer high byte
  2991                        LAB_1AC7
  2992 00:E1E7: C6 C3              DEC   Bpntrl            ; decrement BASIC execute pointer low byte
  2993                        
  2994                        LAB_EVEZ
  2995 00:E1E9: A9 00              LDA   #$00              ; set null precedence (flag done)
  2996                        LAB_1ACC
  2997 00:E1EB: 48                 PHA                     ; push precedence byte
  2998 00:E1EC: A9 02              LDA   #$02              ; 2 bytes
  2999 00:E1EE: 20 03 D8           JSR   LAB_1212          ; check room on stack for A bytes
  3000 00:E1F1: 20 CD E2           JSR   LAB_GVAL          ; get value from line
  3001 00:E1F4: A9 00              LDA   #$00              ; clear A
  3002 00:E1F6: 85 9B              STA   comp_f            ; clear compare function flag
  3003                        LAB_1ADB
  3004 00:E1F8: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  3005                        LAB_1ADE
  3006 00:E1FB: 38                 SEC                     ; set carry for subtract
  3007 00:E1FC: E9 C0              SBC   #TK_GT            ; subtract token for > (lowest comparison function)
  3008 00:E1FE: 90 17              BCC   LAB_1AFA          ; branch if < TK_GT
  3009                        
  3010 00:E200: C9 03              CMP   #$03              ; compare with ">" to "<" tokens
  3011 00:E202: B0 13              BCS   LAB_1AFA          ; branch if >= TK_SGN (highest evaluation function +1)
  3012                        
  3013                                                      ; was token for > = or < (A = 0, 1 or 2)
  3014 00:E204: C9 01              CMP   #$01              ; compare with token for =
  3015 00:E206: 2A                 ROL                     ; *2, b0 = carry (=1 if token was = or <)
  3016                                                      ; (A = 0, 3 or 5)
  3017 00:E207: 49 01              EOR   #$01              ; toggle b0
  3018                                                      ; (A = 1, 2 or 4. 1 if >, 2 if =, 4 if <)
  3019 00:E209: 45 9B              EOR   comp_f            ; EOR with compare function flag bits
  3020 00:E20B: C5 9B              CMP   comp_f            ; compare with compare function flag
  3021 00:E20D: 90 67              BCC   LAB_1B53          ; if <(comp_f) do syntax error then warm start
  3022                                                      ; was more than one <, = or >)
  3023                        
  3024 00:E20F: 85 9B              STA   comp_f            ; save new compare function flag
  3025 00:E211: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  3026 00:E214: 4C FB E1           JMP   LAB_1ADE          ; go do next character
  3027                        
  3028                                                      ; token is < ">" or > "<" tokens
  3029                        LAB_1AFA
  3030 00:E217: A6 9B              LDX   comp_f            ; get compare function flag
  3031 00:E219: D0 2C              BNE   LAB_1B2A          ; branch if compare function
  3032                        
  3033 00:E21B: B0 79              BCS   LAB_1B78          ; go do functions
  3034                        
  3035                                                      ; else was <  TK_GT so is operator or lower
  3036 00:E21D: 69 0A              ADC   #TK_GT-TK_PLUS    ; add # of operators (+, -, *, /, ^, AND, OR or EOR)
  3037 00:E21F: 90 75              BCC   LAB_1B78          ; branch if < + operator
  3038                        
  3039                                                      ; carry was set so token was +, -, *, /, ^, AND, OR or EOR
  3040 00:E221: D0 07              BNE   LAB_1B0B          ; branch if not + token
  3041                        
  3042 00:E223: 24 5F              BIT   Dtypef            ; test data type flag, $FF=string, $00=numeric
  3043 00:E225: 10 03              BPL   LAB_1B0B          ; branch if not string
  3044                        
  3045                                                      ; will only be $00 if type is string and token was +
  3046 00:E227: 4C E8 E9           JMP   LAB_224D          ; add strings, string 1 is in descriptor des_pl, string 2
  3047                                                      ; is in line, and return
  3048                        
  3049                        LAB_1B0B
  3050 00:E22A: 85 71              STA   ut1_pl            ; save it
  3051 00:E22C: 0A                 ASL                     ; *2
  3052 00:E22D: 65 71              ADC   ut1_pl            ; *3
  3053 00:E22F: A8                 TAY                     ; copy to index
  3054                        LAB_1B13
  3055 00:E230: 68                 PLA                     ; pull previous precedence
  3056 00:E231: D9 F9 F9           CMP   LAB_OPPT,Y        ; compare with precedence byte
  3057 00:E234: B0 65              BCS   LAB_1B7D          ; branch if A >=
  3058                        
  3059 00:E236: 20 D0 E1           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  3060                        LAB_1B1C
  3061 00:E239: 48                 PHA                     ; save precedence
  3062                        LAB_1B1D
  3063 00:E23A: 20 62 E2           JSR   LAB_1B43          ; get vector, execute function then continue evaluation
  3064 00:E23D: 68                 PLA                     ; restore precedence
  3065 00:E23E: A4 99              LDY   prstk             ; get precedence stacked flag
  3066 00:E240: 10 19              BPL   LAB_1B3C          ; branch if stacked values
  3067                        
  3068 00:E242: AA                 TAX                     ; copy precedence (set flags)
  3069 00:E243: F0 76              BEQ   LAB_1B9D          ; exit if done
  3070                        
  3071 00:E245: D0 5D              BNE   LAB_1B86          ; else pop FAC2 and return, branch always
  3072                        
  3073                        LAB_1B2A
  3074 00:E247: 26 5F              ROL   Dtypef            ; shift data type flag into Cb
  3075 00:E249: 8A                 TXA                     ; copy compare function flag
  3076 00:E24A: 85 5F              STA   Dtypef            ; clear data type flag, X is 0xxx xxxx
  3077 00:E24C: 2A                 ROL                     ; shift data type into compare function byte b0
  3078 00:E24D: A6 C3              LDX   Bpntrl            ; get BASIC execute pointer low byte
  3079 00:E24F: D0 02              BNE   LAB_1B34          ; branch if no underflow
  3080                        
  3081 00:E251: C6 C4              DEC   Bpntrh            ; else decrement BASIC execute pointer high byte
  3082                        LAB_1B34
  3083 00:E253: C6 C3              DEC   Bpntrl            ; decrement BASIC execute pointer low byte
  3084             0000000C   TK_LT_PLUS  equ TK_LT-TK_PLUS
  3085 00:E255: A0 24              LDY   #TK_LT_PLUS*3     ; set offset to last operator entry
  3086 00:E257: 85 9B              STA   comp_f            ; save new compare function flag
  3087 00:E259: D0 D5              BNE   LAB_1B13          ; branch always
  3088                        
  3089                        LAB_1B3C
  3090 00:E25B: D9 F9 F9           CMP   LAB_OPPT,Y        ;.compare with stacked function precedence
  3091 00:E25E: B0 44              BCS   LAB_1B86          ; branch if A >=, pop FAC2 and return
  3092                        
  3093 00:E260: 90 D7              BCC   LAB_1B1C          ; branch always
  3094                        
  3095                        ;.get vector, execute function then continue evaluation
  3096                        
  3097                        LAB_1B43
  3098 00:E262: B9 FB F9           LDA   LAB_OPPT+2,Y      ; get function vector high byte
  3099 00:E265: 48                 PHA                     ; onto stack
  3100 00:E266: B9 FA F9           LDA   LAB_OPPT+1,Y      ; get function vector low byte
  3101 00:E269: 48                 PHA                     ; onto stack
  3102                                                      ; now push sign, round FAC1 and put on stack
  3103                        ; *** begin patch  2.22p5.3   potential return address -$100 (page not incremented) ***
  3104                        ; *** add
  3105                           .IF $&$FF=$FD
  3106                              NOP                     ; return address of JSR +1 (on  next page)
  3107                           .ENDIF  
  3108                        ; *** end   patch  2.22p5.3   potential return address -$100 (page not incremented) ***
  3109 00:E26A: 20 79 E2           JSR   LAB_1B5B          ; function will return here, then the next RTS will call
  3110                                                      ; the function
  3111 00:E26D: A5 9B              LDA   comp_f            ; get compare function flag
  3112 00:E26F: 48                 PHA                     ; push compare evaluation byte
  3113 00:E270: B9 F9 F9           LDA   LAB_OPPT,Y        ; get precedence byte
  3114 00:E273: 4C EB E1           JMP   LAB_1ACC          ; continue evaluating expression
  3115                        
  3116                        LAB_1B53
  3117 00:E276: 4C 02 E3           JMP   LAB_SNER          ; do syntax error then warm start
  3118                        
  3119                        ; push sign, round FAC1 and put on stack
  3120                        
  3121                        LAB_1B5B
  3122 00:E279: 68                 PLA                     ; get return addr low byte
  3123 00:E27A: 85 71              STA   ut1_pl            ; save it
  3124 00:E27C: E6 71              INC   ut1_pl            ; increment it (was ret-1 pushed? yes!)
  3125                                                      ; note! no check is made on the high byte! if the calling
  3126                                                      ; routine assembles to a page edge then this all goes
  3127                                                      ; horribly wrong !!!
  3128 00:E27E: 68                 PLA                     ; get return addr high byte
  3129 00:E27F: 85 72              STA   ut1_ph            ; save it
  3130 00:E281: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  3131 00:E283: 48                 PHA                     ; push sign
  3132                        
  3133                        ; round FAC1 and put on stack
  3134                        
  3135                        ; *** begin patch  2.22p5.1   TO expression may get sign bit flipped
  3136                        ; *** replace
  3137                        ;LAB_1B66
  3138                        ;      JSR   LAB_27BA          ; round FAC1
  3139                        ; *** with
  3140 00:E284: 20 E6 EF           JSR   LAB_27BA          ; round FAC1
  3141                        LAB_1B66
  3142                        ; *** end   patch  2.22p5.1   TO expression may get sign bit flipped
  3143 00:E287: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  3144 00:E289: 48                 PHA                     ; push on stack
  3145 00:E28A: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  3146 00:E28C: 48                 PHA                     ; push on stack
  3147 00:E28D: A5 AD              LDA   FAC1_1            ; get FAC1 mantissa1
  3148 00:E28F: 48                 PHA                     ; push on stack
  3149 00:E290: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  3150 00:E292: 48                 PHA                     ; push on stack
  3151 00:E293: 6C 71 00           JMP   (ut1_pl)          ; return, sort of
  3152                        
  3153                        ; do functions
  3154                        
  3155                        LAB_1B78
  3156 00:E296: A0 FF              LDY   #$FF              ; flag function
  3157 00:E298: 68                 PLA                     ; pull precedence byte
  3158                        LAB_1B7B
  3159 00:E299: F0 20              BEQ   LAB_1B9D          ; exit if done
  3160                        
  3161                        LAB_1B7D
  3162 00:E29B: C9 64              CMP   #$64              ; compare previous precedence with $64
  3163 00:E29D: F0 03              BEQ   LAB_1B84          ; branch if was $64 (< function)
  3164                        
  3165 00:E29F: 20 D0 E1           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  3166                        LAB_1B84
  3167 00:E2A2: 84 99              STY   prstk             ; save precedence stacked flag
  3168                        
  3169                                                      ; pop FAC2 and return
  3170                        LAB_1B86
  3171 00:E2A4: 68                 PLA                     ; pop byte
  3172 00:E2A5: 4A                 LSR                     ; shift out comparison evaluation lowest bit
  3173 00:E2A6: 85 63              STA   Cflag             ; save comparison evaluation flag
  3174 00:E2A8: 68                 PLA                     ; pop exponent
  3175 00:E2A9: 85 B3              STA   FAC2_e            ; save FAC2 exponent
  3176 00:E2AB: 68                 PLA                     ; pop mantissa1
  3177 00:E2AC: 85 B4              STA   FAC2_1            ; save FAC2 mantissa1
  3178 00:E2AE: 68                 PLA                     ; pop mantissa2
  3179 00:E2AF: 85 B5              STA   FAC2_2            ; save FAC2 mantissa2
  3180 00:E2B1: 68                 PLA                     ; pop mantissa3
  3181 00:E2B2: 85 B6              STA   FAC2_3            ; save FAC2 mantissa3
  3182 00:E2B4: 68                 PLA                     ; pop sign
  3183 00:E2B5: 85 B7              STA   FAC2_s            ; save FAC2 sign (b7)
  3184 00:E2B7: 45 B0              EOR   FAC1_s            ; EOR FAC1 sign (b7)
  3185 00:E2B9: 85 B8              STA   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  3186                        LAB_1B9D
  3187 00:E2BB: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  3188 00:E2BD: 60                 RTS
  3189                        
  3190                        ; print "..." string to string util area
  3191                        
  3192                        LAB_1BC1
  3193 00:E2BE: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  3194 00:E2C0: A4 C4              LDY   Bpntrh            ; get BASIC execute pointer high byte
  3195 00:E2C2: 69 00              ADC   #$00              ; add carry to low byte
  3196 00:E2C4: 90 01              BCC   LAB_1BCA          ; branch if no overflow
  3197                        
  3198 00:E2C6: C8                 INY                     ; increment high byte
  3199                        LAB_1BCA
  3200 00:E2C7: 20 52 E8           JSR   LAB_20AE          ; print " terminated string to Sutill/Sutilh
  3201 00:E2CA: 4C DC EB           JMP   LAB_23F3          ; restore BASIC execute pointer from temp and return
  3202                        
  3203                        ; get value from line
  3204                        
  3205                        LAB_GVAL
  3206 00:E2CD: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  3207 00:E2D0: B0 03              BCS   LAB_1BAC          ; branch if not numeric character
  3208                        
  3209                                                      ; else numeric string found (e.g. 123)
  3210                        LAB_1BA9
  3211 00:E2D2: 4C B3 F0           JMP   LAB_2887          ; get FAC1 from string and return
  3212                        
  3213                        ; get value from line .. continued
  3214                        
  3215                                                      ; wasn't a number so ..
  3216                        LAB_1BAC
  3217 00:E2D5: AA                 TAX                     ; set the flags
  3218 00:E2D6: 30 2F              BMI   LAB_1BD0          ; if -ve go test token values
  3219                        
  3220                                                      ; else it is either a string, number, variable or (<expr>)
  3221 00:E2D8: C9 24              CMP   #'$'              ; compare with "$"
  3222 00:E2DA: F0 F6              BEQ   LAB_1BA9          ; branch if "$", hex number
  3223                        
  3224 00:E2DC: C9 25              CMP   #'%'              ; else compare with "%"
  3225 00:E2DE: F0 F2              BEQ   LAB_1BA9          ; branch if "%", binary number
  3226                        
  3227 00:E2E0: C9 2E              CMP   #'.'              ; compare with "."
  3228 00:E2E2: F0 EE              BEQ   LAB_1BA9          ; if so get FAC1 from string and return (e.g. was .123)
  3229                        
  3230                                                      ; it wasn't any sort of number so ..
  3231 00:E2E4: C9 22              CMP   #$22              ; compare with "
  3232 00:E2E6: F0 D6              BEQ   LAB_1BC1          ; branch if open quote
  3233                        
  3234                                                      ; wasn't any sort of number so ..
  3235                        
  3236                        ; evaluate expression within parentheses
  3237                        
  3238 00:E2E8: C9 28              CMP   #'('              ; compare with "("
  3239 00:E2EA: D0 5B              BNE   LAB_1C18          ; if not "(" get (var), return value in FAC1 and $ flag
  3240                        
  3241                        LAB_1BF7
  3242 00:E2EC: 20 E9 E1           JSR   LAB_EVEZ          ; evaluate expression, no decrement
  3243                        
  3244                        ; all the 'scan for' routines return the character after the sought character
  3245                        
  3246                        ; scan for ")" , else do syntax error then warm start
  3247                        
  3248                        LAB_1BFB
  3249 00:E2EF: A9 29              LDA   #$29              ; load A with ")"
  3250                        
  3251                        ; scan for CHR$(A) , else do syntax error then warm start
  3252                        
  3253                        LAB_SCCA
  3254 00:E2F1: A0 00              LDY   #$00              ; clear index
  3255 00:E2F3: D1 C3              CMP   (Bpntrl),Y        ; check next byte is = A
  3256 00:E2F5: D0 0B              BNE   LAB_SNER          ; if not do syntax error then warm start
  3257                        
  3258 00:E2F7: 4C BC 00           JMP   LAB_IGBY          ; increment and scan memory then return
  3259                        
  3260                        ; scan for "(" , else do syntax error then warm start
  3261                        
  3262                        LAB_1BFE
  3263 00:E2FA: A9 28              LDA   #$28              ; load A with "("
  3264 00:E2FC: D0 F3              BNE   LAB_SCCA          ; scan for CHR$(A), else do syntax error then warm start
  3265                                                      ; (branch always)
  3266                        
  3267                        ; scan for "," , else do syntax error then warm start
  3268                        
  3269                        LAB_1C01
  3270 00:E2FE: A9 2C              LDA   #$2C              ; load A with ","
  3271 00:E300: D0 EF              BNE   LAB_SCCA          ; scan for CHR$(A), else do syntax error then warm start
  3272                                                      ; (branch always)
  3273                        
  3274                        ; syntax error then warm start
  3275                        
  3276                        LAB_SNER
  3277 00:E302: A2 02              LDX   #$02              ; error code $02 ("Syntax" error)
  3278 00:E304: 4C 3F D8           JMP   LAB_XERR          ; do error #X, then warm start
  3279                        
  3280                        ; get value from line .. continued
  3281                        ; do tokens
  3282                        
  3283                        LAB_1BD0
  3284 00:E307: C9 B7              CMP   #TK_MINUS         ; compare with token for -
  3285 00:E309: F0 29              BEQ   LAB_1C11          ; branch if - token (do set-up for functions)
  3286                        
  3287                                                      ; wasn't -n so ..
  3288 00:E30B: C9 B6              CMP   #TK_PLUS          ; compare with token for +
  3289 00:E30D: F0 BE              BEQ   LAB_GVAL          ; branch if + token (+n = n so ignore leading +)
  3290                        
  3291 00:E30F: C9 B1              CMP   #TK_NOT           ; compare with token for NOT
  3292 00:E311: D0 13              BNE   LAB_1BE7          ; branch if not token for NOT
  3293                        
  3294                                                      ; was NOT token
  3295             0000000B   TK_EQUAL_PLUS   equ TK_EQUAL-TK_PLUS
  3296 00:E313: A0 21              LDY   #TK_EQUAL_PLUS*3  ; offset to NOT function
  3297 00:E315: D0 1F              BNE   LAB_1C13          ; do set-up for function then execute (branch always)
  3298                        
  3299                        ; do = compare
  3300                        
  3301                        LAB_EQUAL
  3302 00:E317: 20 B4 E5           JSR   LAB_EVIR          ; evaluate integer expression (no sign check)
  3303 00:E31A: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  3304 00:E31C: 49 FF              EOR   #$FF              ; invert it
  3305 00:E31E: A8                 TAY                     ; copy it
  3306 00:E31F: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  3307 00:E321: 49 FF              EOR   #$FF              ; invert it
  3308 00:E323: 4C 67 E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3309                        
  3310                        ; get value from line .. continued
  3311                        
  3312                                                      ; wasn't +, -, or NOT so ..
  3313                        LAB_1BE7
  3314 00:E326: C9 AE              CMP   #TK_FN            ; compare with token for FN
  3315 00:E328: D0 03              BNE   LAB_1BEE          ; branch if not token for FN
  3316                        
  3317 00:E32A: 4C C2 E7           JMP   LAB_201E          ; go evaluate FNx
  3318                        
  3319                        ; get value from line .. continued
  3320                        
  3321                                                      ; wasn't +, -, NOT or FN so ..
  3322                        LAB_1BEE
  3323 00:E32D: E9 C3              SBC   #TK_SGN           ; subtract with token for SGN
  3324 00:E32F: B0 27              BCS   LAB_1C27          ; if a function token go do it
  3325                        
  3326 00:E331: 4C 02 E3           JMP   LAB_SNER          ; else do syntax error
  3327                        
  3328                        ; set-up for functions
  3329                        
  3330                        LAB_1C11
  3331             0000000A   TK_GT_PLUS  equ TK_GT-TK_PLUS
  3332 00:E334: A0 1E              LDY   #TK_GT_PLUS*3     ; set offset from base to > operator
  3333                        LAB_1C13
  3334 00:E336: 68                 PLA                     ; dump return address low byte
  3335                        ; *** begin patch  2.22p5.4  concatenate MINUS or NOT() crashes EhBASIC  ***
  3336                        ; *** replace
  3337                        ;      PLA                     ; dump return address high byte
  3338                        ;      JMP   LAB_1B1D          ; execute function then continue evaluation
  3339                        ; *** with
  3340 00:E337: AA                 TAX                     ; save to trap concatenate
  3341 00:E338: 68                 PLA                     ; dump return address high byte
  3342 00:E339: E0 F0              CPX   #<(LAB_224Da+2)   ; from concatenate low return address?
  3343 00:E33B: D0 04              BNE   LAB_1C13b         ; No - continue!
  3344 00:E33D: C9 E9              CMP   #>(LAB_224Da+2)   ; from concatenate high return address?
  3345 00:E33F: F0 03              BEQ   LAB_1C13a         ; Yes - error!
  3346                        LAB_1C13b
  3347 00:E341: 4C 3A E2           JMP   LAB_1B1D          ; execute function then continue evaluation
  3348                        LAB_1C13a
  3349 00:E344: 4C DC E1           JMP   LAB_1ABC          ; throw "type mismatch error" then warm start      
  3350                        ; *** end   patch  2.22p5.4  concatenate MINUS or NOT() crashes EhBASIC  ***
  3351                        
  3352                        ; variable name set-up
  3353                        ; get (var), return value in FAC_1 and $ flag
  3354                        
  3355                        LAB_1C18
  3356 00:E347: 20 B8 E4           JSR   LAB_GVAR          ; get (var) address
  3357 00:E34A: 85 AE              STA   FAC1_2            ; save address low byte in FAC1 mantissa2
  3358 00:E34C: 84 AF              STY   FAC1_3            ; save address high byte in FAC1 mantissa3
  3359 00:E34E: A6 5F              LDX   Dtypef            ; get data type flag, $FF=string, $00=numeric
  3360 00:E350: 30 03              BMI   LAB_1C25          ; if string then return (does RTS)
  3361                        
  3362                        LAB_1C24
  3363 00:E352: 4C 8A EF           JMP   LAB_UFAC          ; unpack memory (AY) into FAC1
  3364                        
  3365                        LAB_1C25
  3366                        ; *** begin patch  string pointer high byte trashed when moved to stack
  3367                        ; *** add
  3368 00:E355: 46 B9              LSR   FAC1_r            ; clear bit 7 (<$80) = do not round up
  3369                        ; *** end patch 
  3370 00:E357: 60                 RTS
  3371                        
  3372                        ; get value from line .. continued
  3373                        ; only functions left so ..
  3374                        
  3375                        ; set up function references
  3376                        
  3377                        ; new for V2.0+ this replaces a lot of IF .. THEN .. ELSEIF .. THEN .. that was needed
  3378                        ; to process function calls. now the function vector is computed and pushed on the stack
  3379                        ; and the preprocess offset is read. if the preprocess offset is non zero then the vector
  3380                        ; is calculated and the routine called, if not this routine just does RTS. whichever
  3381                        ; happens the RTS at the end of this routine, or the end of the preprocess routine, calls
  3382                        ; the function code
  3383                        
  3384                        ; this also removes some less than elegant code that was used to bypass type checking
  3385                        ; for functions that returned strings
  3386                        
  3387                        LAB_1C27
  3388 00:E358: 0A                 ASL                     ; *2 (2 bytes per function address)
  3389 00:E359: A8                 TAY                     ; copy to index
  3390                        
  3391 00:E35A: B9 B4 F9           LDA   LAB_FTBM,Y        ; get function jump vector high byte
  3392 00:E35D: 48                 PHA                     ; push functions jump vector high byte
  3393 00:E35E: B9 B3 F9           LDA   LAB_FTBL,Y        ; get function jump vector low byte
  3394 00:E361: 48                 PHA                     ; push functions jump vector low byte
  3395                        
  3396 00:E362: B9 6E F9           LDA   LAB_FTPM,Y        ; get function pre process vector high byte
  3397 00:E365: F0 05              BEQ   LAB_1C56          ; skip pre process if null vector
  3398                        
  3399 00:E367: 48                 PHA                     ; push functions pre process vector high byte
  3400 00:E368: B9 6D F9           LDA   LAB_FTPL,Y        ; get function pre process vector low byte
  3401 00:E36B: 48                 PHA                     ; push functions pre process vector low byte
  3402                        
  3403                        LAB_1C56
  3404 00:E36C: 60                 RTS                     ; do function, or pre process, call
  3405                        
  3406                        ; process string expression in parenthesis
  3407                        
  3408                        LAB_PPFS
  3409 00:E36D: 20 EC E2           JSR   LAB_1BF7          ; process expression in parenthesis
  3410 00:E370: 4C D2 E1           JMP   LAB_CTST          ; check if source is string then do function,
  3411                                                      ; else do type mismatch
  3412                        
  3413                        ; process numeric expression in parenthesis
  3414                        
  3415                        LAB_PPFN
  3416 00:E373: 20 EC E2           JSR   LAB_1BF7          ; process expression in parenthesis
  3417 00:E376: 4C D0 E1           JMP   LAB_CTNM          ; check if source is numeric then do function,
  3418                                                      ; else do type mismatch
  3419                        
  3420                        ; set numeric data type and increment BASIC execute pointer
  3421                        
  3422                        LAB_PPBI
  3423 00:E379: 46 5F              LSR   Dtypef            ; clear data type flag, $FF=string, $00=numeric
  3424 00:E37B: 4C BC 00           JMP   LAB_IGBY          ; increment and scan memory then do function
  3425                        
  3426                        ; process string for LEFT$, RIGHT$ or MID$
  3427                        
  3428                        LAB_LRMS
  3429 00:E37E: 20 E9 E1           JSR   LAB_EVEZ          ; evaluate (should be string) expression
  3430 00:E381: 20 FE E2           JSR   LAB_1C01          ; scan for ",", else do syntax error then warm start
  3431 00:E384: 20 D2 E1           JSR   LAB_CTST          ; check if source is string, else do type mismatch
  3432                        
  3433 00:E387: 68                 PLA                     ; get function jump vector low byte
  3434 00:E388: AA                 TAX                     ; save functions jump vector low byte
  3435 00:E389: 68                 PLA                     ; get function jump vector high byte
  3436 00:E38A: A8                 TAY                     ; save functions jump vector high byte
  3437 00:E38B: A5 AF              LDA   des_ph            ; get descriptor pointer high byte
  3438 00:E38D: 48                 PHA                     ; push string pointer high byte
  3439 00:E38E: A5 AE              LDA   des_pl            ; get descriptor pointer low byte
  3440 00:E390: 48                 PHA                     ; push string pointer low byte
  3441 00:E391: 98                 TYA                     ; get function jump vector high byte back
  3442 00:E392: 48                 PHA                     ; save functions jump vector high byte
  3443 00:E393: 8A                 TXA                     ; get function jump vector low byte back
  3444 00:E394: 48                 PHA                     ; save functions jump vector low byte
  3445 00:E395: 20 A0 EB           JSR   LAB_GTBY          ; get byte parameter
  3446 00:E398: 8A                 TXA                     ; copy byte parameter to A
  3447 00:E399: 60                 RTS                     ; go do function
  3448                        
  3449                        ; process numeric expression(s) for BIN$ or HEX$
  3450                        
  3451                        LAB_BHSS
  3452 00:E39A: 20 E9 E1           JSR   LAB_EVEZ          ; process expression
  3453 00:E39D: 20 D0 E1           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  3454 00:E3A0: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  3455 00:E3A2: C9 98              CMP   #$98              ; compare with exponent = 2^24
  3456 00:E3A4: B0 20              BCS   LAB_BHER          ; branch if n>=2^24 (is too big)
  3457                        
  3458 00:E3A6: 20 5D F0           JSR   LAB_2831          ; convert FAC1 floating-to-fixed
  3459 00:E3A9: A2 02              LDX   #$02              ; 3 bytes to do
  3460                        LAB_CFAC
  3461 00:E3AB: B5 AD              LDA   FAC1_1,X          ; get byte from FAC1
  3462 00:E3AD: 95 11              STA   nums_1,X          ; save byte to temp
  3463 00:E3AF: CA                 DEX                     ; decrement index
  3464 00:E3B0: 10 F9              BPL   LAB_CFAC          ; copy FAC1 mantissa to temp
  3465                        
  3466 00:E3B2: 20 C2 00           JSR   LAB_GBYT          ; get next BASIC byte
  3467 00:E3B5: A2 00              LDX   #$00              ; set default to no leading "0"s
  3468 00:E3B7: C9 29              CMP   #')'              ; compare with close bracket
  3469 00:E3B9: F0 0A              BEQ   LAB_1C54          ; if ")" go do rest of function
  3470                        
  3471 00:E3BB: 20 EB EB           JSR   LAB_SCGB          ; scan for "," and get byte
  3472 00:E3BE: 20 C2 00           JSR   LAB_GBYT          ; get last byte back
  3473 00:E3C1: C9 29              CMP   #')'              ; is next character )
  3474 00:E3C3: D0 01              BNE   LAB_BHER          ; if not ")" go do error
  3475                        
  3476                        LAB_1C54
  3477 00:E3C5: 60                 RTS                     ; else do function
  3478                        
  3479                        LAB_BHER
  3480 00:E3C6: 4C 37 E6           JMP   LAB_FCER          ; do function call error then warm start
  3481                        
  3482                        ; perform EOR
  3483                        
  3484                        ; added operator format is the same as AND or OR, precedence is the same as OR
  3485                        
  3486                        ; this bit worked first time but it took a while to sort out the operator table
  3487                        ; pointers and offsets afterwards!
  3488                        
  3489                        LAB_EOR
  3490 00:E3C9: 20 F0 E3           JSR   GetFirst          ; get first integer expression (no sign check)
  3491 00:E3CC: 45 5B              EOR   XOAw_l            ; EOR with expression 1 low byte
  3492 00:E3CE: A8                 TAY                     ; save in Y
  3493 00:E3CF: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  3494 00:E3D1: 45 5C              EOR   XOAw_h            ; EOR with expression 1 high byte
  3495 00:E3D3: 4C 67 E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3496                        
  3497                        ; perform OR
  3498                        
  3499                        LAB_OR
  3500 00:E3D6: 20 F0 E3           JSR   GetFirst          ; get first integer expression (no sign check)
  3501 00:E3D9: 05 5B              ORA   XOAw_l            ; OR with expression 1 low byte
  3502 00:E3DB: A8                 TAY                     ; save in Y
  3503 00:E3DC: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  3504 00:E3DE: 05 5C              ORA   XOAw_h            ; OR with expression 1 high byte
  3505 00:E3E0: 4C 67 E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3506                        
  3507                        ; perform AND
  3508                        
  3509                        LAB_AND
  3510 00:E3E3: 20 F0 E3           JSR   GetFirst          ; get first integer expression (no sign check)
  3511 00:E3E6: 25 5B              AND   XOAw_l            ; AND with expression 1 low byte
  3512 00:E3E8: A8                 TAY                     ; save in Y
  3513 00:E3E9: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  3514 00:E3EB: 25 5C              AND   XOAw_h            ; AND with expression 1 high byte
  3515 00:E3ED: 4C 67 E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3516                        
  3517                        ; get first value for OR, AND or EOR
  3518                        
  3519                        GetFirst
  3520 00:E3F0: 20 B4 E5           JSR   LAB_EVIR          ; evaluate integer expression (no sign check)
  3521 00:E3F3: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  3522 00:E3F5: 85 5C              STA   XOAw_h            ; save it
  3523 00:E3F7: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  3524 00:E3F9: 85 5B              STA   XOAw_l            ; save it
  3525 00:E3FB: 20 D0 EC           JSR   LAB_279B          ; copy FAC2 to FAC1 (get 2nd value in expression)
  3526 00:E3FE: 20 B4 E5           JSR   LAB_EVIR          ; evaluate integer expression (no sign check)
  3527 00:E401: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  3528                        LAB_1C95
  3529 00:E403: 60                 RTS
  3530                        
  3531                        ; perform comparisons
  3532                        
  3533                        ; do < compare
  3534                        
  3535                        LAB_LTHAN
  3536 00:E404: 20 D3 E1           JSR   LAB_CKTM          ; type match check, set C for string
  3537 00:E407: B0 13              BCS   LAB_1CAE          ; branch if string
  3538                        
  3539                                                      ; do numeric < compare
  3540 00:E409: A5 B7              LDA   FAC2_s            ; get FAC2 sign (b7)
  3541 00:E40B: 09 7F              ORA   #$7F              ; set all non sign bits
  3542 00:E40D: 25 B4              AND   FAC2_1            ; and FAC2 mantissa1 (AND in sign bit)
  3543 00:E40F: 85 B4              STA   FAC2_1            ; save FAC2 mantissa1
  3544 00:E411: A9 B3              LDA   #<FAC2_e          ; set pointer low byte to FAC2
  3545 00:E413: A0 00              LDY   #>FAC2_e          ; set pointer high byte to FAC2
  3546 00:E415: 20 24 F0           JSR   LAB_27F8          ; compare FAC1 with FAC2 (AY)
  3547 00:E418: AA                 TAX                     ; copy result
  3548 00:E419: 4C 4D E4           JMP   LAB_1CE1          ; go evaluate result
  3549                        
  3550                                                      ; do string < compare
  3551                        LAB_1CAE
  3552 00:E41C: 46 5F              LSR   Dtypef            ; clear data type flag, $FF=string, $00=numeric
  3553 00:E41E: C6 9B              DEC   comp_f            ; clear < bit in compare function flag
  3554 00:E420: 20 52 EA           JSR   LAB_22B6          ; pop string off descriptor stack, or from top of string
  3555                                                      ; space returns with A = length, X=pointer low byte,
  3556                                                      ; Y=pointer high byte
  3557 00:E423: 85 AC              STA   str_ln            ; save length
  3558 00:E425: 86 AD              STX   str_pl            ; save string pointer low byte
  3559 00:E427: 84 AE              STY   str_ph            ; save string pointer high byte
  3560 00:E429: A5 B5              LDA   FAC2_2            ; get descriptor pointer low byte
  3561 00:E42B: A4 B6              LDY   FAC2_3            ; get descriptor pointer high byte
  3562 00:E42D: 20 56 EA           JSR   LAB_22BA          ; pop (YA) descriptor off stack or from top of string space
  3563                                                      ; returns with A = length, X=pointer low byte,
  3564                                                      ; Y=pointer high byte
  3565 00:E430: 86 B5              STX   FAC2_2            ; save string pointer low byte
  3566 00:E432: 84 B6              STY   FAC2_3            ; save string pointer high byte
  3567 00:E434: AA                 TAX                     ; copy length
  3568 00:E435: 38                 SEC                     ; set carry for subtract
  3569 00:E436: E5 AC              SBC   str_ln            ; subtract string 1 length
  3570 00:E438: F0 08              BEQ   LAB_1CD6          ; branch if str 1 length = string 2 length
  3571                        
  3572 00:E43A: A9 01              LDA   #$01              ; set str 1 length > string 2 length
  3573 00:E43C: 90 04              BCC   LAB_1CD6          ; branch if so
  3574                        
  3575 00:E43E: A6 AC              LDX   str_ln            ; get string 1 length
  3576 00:E440: A9 FF              LDA   #$FF              ; set str 1 length < string 2 length
  3577                        LAB_1CD6
  3578 00:E442: 85 B0              STA   FAC1_s            ; save length compare
  3579 00:E444: A0 FF              LDY   #$FF              ; set index
  3580 00:E446: E8                 INX                     ; adjust for loop
  3581                        LAB_1CDB
  3582 00:E447: C8                 INY                     ; increment index
  3583 00:E448: CA                 DEX                     ; decrement count
  3584 00:E449: D0 07              BNE   LAB_1CE6          ; branch if still bytes to do
  3585                        
  3586 00:E44B: A6 B0              LDX   FAC1_s            ; get length compare back
  3587                        LAB_1CE1
  3588 00:E44D: 30 0F              BMI   LAB_1CF2          ; branch if str 1 < str 2
  3589                        
  3590 00:E44F: 18                 CLC                     ; flag str 1 <= str 2
  3591 00:E450: 90 0C              BCC   LAB_1CF2          ; go evaluate result
  3592                        
  3593                        LAB_1CE6
  3594 00:E452: B1 B5              LDA   (FAC2_2),Y        ; get string 2 byte
  3595 00:E454: D1 AD              CMP   (FAC1_1),Y        ; compare with string 1 byte
  3596 00:E456: F0 EF              BEQ   LAB_1CDB          ; loop if bytes =
  3597                        
  3598 00:E458: A2 FF              LDX   #$FF              ; set str 1 < string 2
  3599 00:E45A: B0 02              BCS   LAB_1CF2          ; branch if so
  3600                        
  3601 00:E45C: A2 01              LDX   #$01              ;  set str 1 > string 2
  3602                        LAB_1CF2
  3603 00:E45E: E8                 INX                     ; x = 0, 1 or 2
  3604 00:E45F: 8A                 TXA                     ; copy to A
  3605 00:E460: 2A                 ROL                     ; *2 (1, 2 or 4)
  3606 00:E461: 25 63              AND   Cflag             ; AND with comparison evaluation flag
  3607 00:E463: F0 02              BEQ   LAB_1CFB          ; branch if 0 (compare is false)
  3608                        
  3609 00:E465: A9 FF              LDA   #$FF              ; else set result true
  3610                        LAB_1CFB
  3611 00:E467: 4C 07 F0           JMP   LAB_27DB          ; save A as integer byte and return
  3612                        
  3613                        LAB_1CFE
  3614 00:E46A: 20 FE E2           JSR   LAB_1C01          ; scan for ",", else do syntax error then warm start
  3615                        
  3616                        ; perform DIM
  3617                        
  3618                        LAB_DIM
  3619 00:E46D: AA                 TAX                     ; copy "DIM" flag to X
  3620 00:E46E: 20 BD E4           JSR   LAB_1D10          ; search for variable
  3621 00:E471: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  3622 00:E474: D0 F4              BNE   LAB_1CFE          ; scan for "," and loop if not null
  3623                        
  3624 00:E476: 60                 RTS
  3625                        
  3626                        ; perform << (left shift)
  3627                        
  3628                        LAB_LSHIFT
  3629 00:E477: 20 AD E4           JSR   GetPair           ; get integer expression and byte (no sign check)
  3630 00:E47A: A5 AE              LDA   FAC1_2            ; get expression high byte
  3631 00:E47C: A6 78              LDX   TempB             ; get shift count
  3632 00:E47E: F0 22              BEQ   NoShift           ; branch if zero
  3633                        
  3634 00:E480: E0 10              CPX   #$10              ; compare bit count with 16d
  3635 00:E482: B0 23              BCS   TooBig            ; branch if >=
  3636                        
  3637                        Ls_loop
  3638 00:E484: 06 AF              ASL   FAC1_3            ; shift low byte
  3639 00:E486: 2A                 ROL                     ; shift high byte
  3640 00:E487: CA                 DEX                     ; decrement bit count
  3641 00:E488: D0 FA              BNE   Ls_loop           ; loop if shift not complete
  3642                        
  3643 00:E48A: A4 AF              LDY   FAC1_3            ; get expression low byte
  3644 00:E48C: 4C 67 E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3645                        
  3646                        ; perform >> (right shift)
  3647                        
  3648                        LAB_RSHIFT
  3649 00:E48F: 20 AD E4           JSR   GetPair           ; get integer expression and byte (no sign check)
  3650 00:E492: A5 AE              LDA   FAC1_2            ; get expression high byte
  3651 00:E494: A6 78              LDX   TempB             ; get shift count
  3652 00:E496: F0 0A              BEQ   NoShift           ; branch if zero
  3653                        
  3654 00:E498: E0 10              CPX   #$10              ; compare bit count with 16d
  3655 00:E49A: B0 0B              BCS   TooBig            ; branch if >=
  3656                        
  3657                        Rs_loop
  3658 00:E49C: 4A                 LSR                     ; shift high byte
  3659 00:E49D: 66 AF              ROR   FAC1_3            ; shift low byte
  3660 00:E49F: CA                 DEX                     ; decrement bit count
  3661 00:E4A0: D0 FA              BNE   Rs_loop           ; loop if shift not complete
  3662                        
  3663                        NoShift
  3664 00:E4A2: A4 AF              LDY   FAC1_3            ; get expression low byte
  3665 00:E4A4: 4C 67 E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3666                        
  3667                        TooBig
  3668 00:E4A7: A9 00              LDA   #$00              ; clear high byte
  3669 00:E4A9: A8                 TAY                     ; copy to low byte
  3670 00:E4AA: 4C 67 E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3671                        
  3672                        GetPair
  3673 00:E4AD: 20 A3 EB           JSR   LAB_EVBY          ; evaluate byte expression, result in X
  3674 00:E4B0: 86 78              STX   TempB             ; save it
  3675 00:E4B2: 20 D0 EC           JSR   LAB_279B          ; copy FAC2 to FAC1 (get 2nd value in expression)
  3676 00:E4B5: 4C B4 E5           JMP   LAB_EVIR          ; evaluate integer expression (no sign check)
  3677                        
  3678                        ; search for variable
  3679                        
  3680                        ; return pointer to variable in Cvaral/Cvarah
  3681                        
  3682                        LAB_GVAR
  3683 00:E4B8: A2 00              LDX   #$00              ; set DIM flag = $00
  3684 00:E4BA: 20 C2 00           JSR   LAB_GBYT          ; scan memory (1st character)
  3685                        LAB_1D10
  3686 00:E4BD: 86 5E              STX   Defdim            ; save DIM flag
  3687                        LAB_1D12
  3688 00:E4BF: 85 93              STA   Varnm1            ; save 1st character
  3689 00:E4C1: 29 7F              AND   #$7F              ; clear FN flag bit
  3690 00:E4C3: 20 2C E5           JSR   LAB_CASC          ; check byte, return C=0 if<"A" or >"Z"
  3691 00:E4C6: B0 03              BCS   LAB_1D1F          ; branch if ok
  3692                        
  3693 00:E4C8: 4C 02 E3           JMP   LAB_SNER          ; else syntax error then warm start
  3694                        
  3695                                                      ; was variable name so ..
  3696                        LAB_1D1F
  3697 00:E4CB: A2 00              LDX   #$00              ; clear 2nd character temp
  3698 00:E4CD: 86 5F              STX   Dtypef            ; clear data type flag, $FF=string, $00=numeric
  3699 00:E4CF: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory (2nd character)
  3700 00:E4D2: 90 05              BCC   LAB_1D2D          ; branch if character = "0"-"9" (ok)
  3701                        
  3702                                                      ; 2nd character wasn't "0" to "9" so ..
  3703 00:E4D4: 20 2C E5           JSR   LAB_CASC          ; check byte, return C=0 if<"A" or >"Z"
  3704 00:E4D7: 90 0B              BCC   LAB_1D38          ; branch if <"A" or >"Z" (go check if string)
  3705                        
  3706                        LAB_1D2D
  3707 00:E4D9: AA                 TAX                     ; copy 2nd character
  3708                        
  3709                                                      ; ignore further (valid) characters in the variable name
  3710                        LAB_1D2E
  3711 00:E4DA: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory (3rd character)
  3712 00:E4DD: 90 FB              BCC   LAB_1D2E          ; loop if character = "0"-"9" (ignore)
  3713                        
  3714 00:E4DF: 20 2C E5           JSR   LAB_CASC          ; check byte, return C=0 if<"A" or >"Z"
  3715 00:E4E2: B0 F6              BCS   LAB_1D2E          ; loop if character = "A"-"Z" (ignore)
  3716                        
  3717                                                      ; check if string variable
  3718                        LAB_1D38
  3719 00:E4E4: C9 24              CMP   #'$'              ; compare with "$"
  3720 00:E4E6: D0 0B              BNE   LAB_1D47          ; branch if not string
  3721                        
  3722                        ; to introduce a new variable type (% suffix for integers say) then this branch
  3723                        ; will need to go to that check and then that branch, if it fails, go to LAB_1D47
  3724                        
  3725                                                      ; type is string
  3726 00:E4E8: A9 FF              LDA   #$FF              ; set data type = string
  3727 00:E4EA: 85 5F              STA   Dtypef            ; set data type flag, $FF=string, $00=numeric
  3728 00:E4EC: 8A                 TXA                     ; get 2nd character back
  3729 00:E4ED: 09 80              ORA   #$80              ; set top bit (indicate string var)
  3730 00:E4EF: AA                 TAX                     ; copy back to 2nd character temp
  3731 00:E4F0: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  3732                        
  3733                        ; after we have determined the variable type we need to come back here to determine
  3734                        ; if it's an array of type. this would plug in a%(b[,c[,d]])) integer arrays nicely
  3735                        
  3736                        
  3737                        LAB_1D47                      ; gets here with character after var name in A
  3738 00:E4F3: 86 94              STX   Varnm2            ; save 2nd character
  3739 00:E4F5: 05 61              ORA   Sufnxf            ; or with subscript/FNX flag (or FN name)
  3740 00:E4F7: C9 28              CMP   #'('              ; compare with "("
  3741 00:E4F9: D0 03              BNE   LAB_1D53          ; branch if not "("
  3742                        
  3743 00:E4FB: 4C C6 E5           JMP   LAB_1E17          ; go find, or make, array
  3744                        
  3745                        ; either find or create var
  3746                        ; var name (1st two characters only!) is in Varnm1,Varnm2
  3747                        
  3748                                                      ; variable name wasn't var(... so look for plain var
  3749                        LAB_1D53
  3750 00:E4FE: A9 00              LDA   #$00              ; clear A
  3751 00:E500: 85 61              STA   Sufnxf            ; clear subscript/FNX flag
  3752 00:E502: A5 7B              LDA   Svarl             ; get start of vars low byte
  3753 00:E504: A6 7C              LDX   Svarh             ; get start of vars high byte
  3754 00:E506: A0 00              LDY   #$00              ; clear index
  3755                        LAB_1D5D
  3756 00:E508: 86 AB              STX   Vrschh            ; save search address high byte
  3757                        LAB_1D5F
  3758 00:E50A: 85 AA              STA   Vrschl            ; save search address low byte
  3759 00:E50C: E4 7E              CPX   Sarryh            ; compare high address with var space end
  3760 00:E50E: D0 04              BNE   LAB_1D69          ; skip next compare if <>
  3761                        
  3762                                                      ; high addresses were = so compare low addresses
  3763 00:E510: C5 7D              CMP   Sarryl            ; compare low address with var space end
  3764 00:E512: F0 2C              BEQ   LAB_1D8B          ; if not found go make new var
  3765                        
  3766                        LAB_1D69
  3767 00:E514: A5 93              LDA   Varnm1            ; get 1st character of var to find
  3768 00:E516: D1 AA              CMP   (Vrschl),Y        ; compare with variable name 1st character
  3769 00:E518: D0 08              BNE   LAB_1D77          ; branch if no match
  3770                        
  3771                                                      ; 1st characters match so compare 2nd characters
  3772 00:E51A: A5 94              LDA   Varnm2            ; get 2nd character of var to find
  3773 00:E51C: C8                 INY                     ; index to point to variable name 2nd character
  3774 00:E51D: D1 AA              CMP   (Vrschl),Y        ; compare with variable name 2nd character
  3775 00:E51F: F0 69              BEQ   LAB_1DD7          ; branch if match (found var)
  3776                        
  3777 00:E521: 88                 DEY                     ; else decrement index (now = $00)
  3778                        LAB_1D77
  3779 00:E522: 18                 CLC                     ; clear carry for add
  3780 00:E523: A5 AA              LDA   Vrschl            ; get search address low byte
  3781 00:E525: 69 06              ADC   #$06              ; +6 (offset to next var name)
  3782 00:E527: 90 E1              BCC   LAB_1D5F          ; loop if no overflow to high byte
  3783                        
  3784 00:E529: E8                 INX                     ; else increment high byte
  3785 00:E52A: D0 DC              BNE   LAB_1D5D          ; loop always (RAM doesn't extend to $FFFF !)
  3786                        
  3787                        ; check byte, return C=0 if<"A" or >"Z" or "a" to "z"
  3788                        
  3789                        LAB_CASC
  3790 00:E52C: C9 61              CMP   #'a'              ; compare with "a"
  3791 00:E52E: B0 0A              BCS   LAB_1D83          ; go check <"z"+1
  3792                        
  3793                        ; check byte, return C=0 if<"A" or >"Z"
  3794                        
  3795                        LAB_1D82
  3796 00:E530: C9 41              CMP   #'A'              ; compare with "A"
  3797 00:E532: 90 05              BCC   LAB_1D8A          ; exit if less
  3798                        
  3799                                                      ; carry is set
  3800 00:E534: E9 5B              SBC   #$5B              ; subtract "Z"+1
  3801 00:E536: 38                 SEC                     ; set carry
  3802 00:E537: E9 A5              SBC   #$A5              ; subtract $A5 (restore byte)
  3803                                                      ; carry clear if byte>$5A
  3804                        LAB_1D8A
  3805 00:E539: 60                 RTS
  3806                        
  3807                        LAB_1D83
  3808 00:E53A: E9 7B              SBC   #$7B              ; subtract "z"+1
  3809 00:E53C: 38                 SEC                     ; set carry
  3810 00:E53D: E9 85              SBC   #$85              ; subtract $85 (restore byte)
  3811                                                      ; carry clear if byte>$7A
  3812 00:E53F: 60                 RTS
  3813                        
  3814                                                      ; reached end of variable mem without match
  3815                                                      ; .. so create new variable
  3816                        LAB_1D8B
  3817 00:E540: 68                 PLA                     ; pop return address low byte
  3818 00:E541: 48                 PHA                     ; push return address low byte
  3819             0000E349   LAB_1C18p2  equ LAB_1C18+2
  3820 00:E542: C9 49              CMP   #<LAB_1C18p2      ; compare with expected calling routine return low byte
  3821 00:E544: D0 05              BNE   LAB_1D98          ; if not get (var) go create new var
  3822                        
  3823                        ; This will only drop through if the call was from LAB_1C18 and is only called
  3824                        ; from there if it is searching for a variable from the RHS of a LET a=b statement
  3825                        ; it prevents the creation of variables not assigned a value.
  3826                        
  3827                        ; value returned by this is either numeric zero (exponent byte is $00) or null string
  3828                        ; (descriptor length byte is $00). in fact a pointer to any $00 byte would have done.
  3829                        
  3830                        ; doing this saves 6 bytes of variable memory and 168 machine cycles of time
  3831                        
  3832                        ; this is where you would put the undefined variable error call e.g.
  3833                        
  3834                        ;                             ; variable doesn't exist so flag error
  3835                        ;     LDX   #$24              ; error code $24 ("undefined variable" error)
  3836                        ;     JMP   LAB_XERR          ; do error #X then warm start
  3837                        
  3838                        ; the above code has been tested and works a treat! (it replaces the three code lines
  3839                        ; below)
  3840                        
  3841                                                      ; else return dummy null value
  3842 00:E546: A9 F1              LDA   #<LAB_1D96        ; low byte point to $00,$00
  3843                                                      ; (uses part of misc constants table)
  3844 00:E548: A0 F8              LDY   #>LAB_1D96        ; high byte point to $00,$00
  3845 00:E54A: 60                 RTS
  3846                        
  3847                                                      ; create new numeric variable
  3848                        LAB_1D98
  3849 00:E54B: A5 7D              LDA   Sarryl            ; get var mem end low byte
  3850 00:E54D: A4 7E              LDY   Sarryh            ; get var mem end high byte
  3851 00:E54F: 85 AA              STA   Ostrtl            ; save old block start low byte
  3852 00:E551: 84 AB              STY   Ostrth            ; save old block start high byte
  3853 00:E553: A5 7F              LDA   Earryl            ; get array mem end low byte
  3854 00:E555: A4 80              LDY   Earryh            ; get array mem end high byte
  3855 00:E557: 85 A6              STA   Obendl            ; save old block end low byte
  3856 00:E559: 84 A7              STY   Obendh            ; save old block end high byte
  3857 00:E55B: 18                 CLC                     ; clear carry for add
  3858 00:E55C: 69 06              ADC   #$06              ; +6 (space for one var)
  3859 00:E55E: 90 01              BCC   LAB_1DAE          ; branch if no overflow to high byte
  3860                        
  3861 00:E560: C8                 INY                     ; else increment high byte
  3862                        LAB_1DAE
  3863 00:E561: 85 A4              STA   Nbendl            ; set new block end low byte
  3864 00:E563: 84 A5              STY   Nbendh            ; set new block end high byte
  3865 00:E565: 20 C1 D7           JSR   LAB_11CF          ; open up space in memory
  3866 00:E568: A5 A4              LDA   Nbendl            ; get new start low byte
  3867 00:E56A: A4 A5              LDY   Nbendh            ; get new start high byte (-$100)
  3868 00:E56C: C8                 INY                     ; correct high byte
  3869 00:E56D: 85 7D              STA   Sarryl            ; save new var mem end low byte
  3870 00:E56F: 84 7E              STY   Sarryh            ; save new var mem end high byte
  3871 00:E571: A0 00              LDY   #$00              ; clear index
  3872 00:E573: A5 93              LDA   Varnm1            ; get var name 1st character
  3873 00:E575: 91 AA              STA   (Vrschl),Y        ; save var name 1st character
  3874 00:E577: C8                 INY                     ; increment index
  3875 00:E578: A5 94              LDA   Varnm2            ; get var name 2nd character
  3876 00:E57A: 91 AA              STA   (Vrschl),Y        ; save var name 2nd character
  3877 00:E57C: A9 00              LDA   #$00              ; clear A
  3878 00:E57E: C8                 INY                     ; increment index
  3879 00:E57F: 91 AA              STA   (Vrschl),Y        ; initialise var byte
  3880 00:E581: C8                 INY                     ; increment index
  3881 00:E582: 91 AA              STA   (Vrschl),Y        ; initialise var byte
  3882 00:E584: C8                 INY                     ; increment index
  3883 00:E585: 91 AA              STA   (Vrschl),Y        ; initialise var byte
  3884 00:E587: C8                 INY                     ; increment index
  3885 00:E588: 91 AA              STA   (Vrschl),Y        ; initialise var byte
  3886                        
  3887                                                      ; found a match for var ((Vrschl) = ptr)
  3888                        LAB_1DD7
  3889 00:E58A: A5 AA              LDA   Vrschl            ; get var address low byte
  3890 00:E58C: 18                 CLC                     ; clear carry for add
  3891 00:E58D: 69 02              ADC   #$02              ; +2 (offset past var name bytes)
  3892 00:E58F: A4 AB              LDY   Vrschh            ; get var address high byte
  3893 00:E591: 90 01              BCC   LAB_1DE1          ; branch if no overflow from add
  3894                        
  3895 00:E593: C8                 INY                     ; else increment high byte
  3896                        LAB_1DE1
  3897 00:E594: 85 95              STA   Cvaral            ; save current var address low byte
  3898 00:E596: 84 96              STY   Cvarah            ; save current var address high byte
  3899 00:E598: 60                 RTS
  3900                        
  3901                        ; set-up array pointer (Adatal/h) to first element in array
  3902                        ; set Adatal,Adatah to Astrtl,Astrth+2*Dimcnt+#$05
  3903                        
  3904                        LAB_1DE6
  3905 00:E599: A5 5D              LDA   Dimcnt            ; get # of dimensions (1, 2 or 3)
  3906 00:E59B: 0A                 ASL                     ; *2 (also clears the carry !)
  3907 00:E59C: 69 05              ADC   #$05              ; +5 (result is 7, 9 or 11 here)
  3908 00:E59E: 65 AA              ADC   Astrtl            ; add array start pointer low byte
  3909 00:E5A0: A4 AB              LDY   Astrth            ; get array pointer high byte
  3910 00:E5A2: 90 01              BCC   LAB_1DF2          ; branch if no overflow
  3911                        
  3912 00:E5A4: C8                 INY                     ; else increment high byte
  3913                        LAB_1DF2
  3914 00:E5A5: 85 A4              STA   Adatal            ; save array data pointer low byte
  3915 00:E5A7: 84 A5              STY   Adatah            ; save array data pointer high byte
  3916 00:E5A9: 60                 RTS
  3917                        
  3918                        ; evaluate integer expression
  3919                        
  3920                        LAB_EVIN
  3921 00:E5AA: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  3922 00:E5AD: 20 CD E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  3923                                                      ; else do type mismatch
  3924                        
  3925                        ; evaluate integer expression (no check)
  3926                        
  3927                        LAB_EVPI
  3928 00:E5B0: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  3929 00:E5B2: 30 0D              BMI   LAB_1E12          ; do function call error if -ve
  3930                        
  3931                        ; evaluate integer expression (no sign check)
  3932                        
  3933                        LAB_EVIR
  3934 00:E5B4: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  3935 00:E5B6: C9 90              CMP   #$90              ; compare with exponent = 2^16 (n>2^15)
  3936 00:E5B8: 90 09              BCC   LAB_1E14          ; branch if n<2^16 (is ok)
  3937                        
  3938 00:E5BA: A9 F8              LDA   #<LAB_1DF7        ; set pointer low byte to -32768
  3939 00:E5BC: A0 F8              LDY   #>LAB_1DF7        ; set pointer high byte to -32768
  3940 00:E5BE: 20 24 F0           JSR   LAB_27F8          ; compare FAC1 with (AY)
  3941                        LAB_1E12
  3942 00:E5C1: D0 74              BNE   LAB_FCER          ; if <> do function call error then warm start
  3943                        
  3944                        LAB_1E14
  3945 00:E5C3: 4C 5D F0           JMP   LAB_2831          ; convert FAC1 floating-to-fixed and return
  3946                        
  3947                        ; find or make array
  3948                        
  3949                        LAB_1E17
  3950 00:E5C6: A5 5E              LDA   Defdim            ; get DIM flag
  3951 00:E5C8: 48                 PHA                     ; push it
  3952 00:E5C9: A5 5F              LDA   Dtypef            ; get data type flag, $FF=string, $00=numeric
  3953 00:E5CB: 48                 PHA                     ; push it
  3954 00:E5CC: A0 00              LDY   #$00              ; clear dimensions count
  3955                        
  3956                        ; now get the array dimension(s) and stack it (them) before the data type and DIM flag
  3957                        
  3958                        LAB_1E1F
  3959 00:E5CE: 98                 TYA                     ; copy dimensions count
  3960 00:E5CF: 48                 PHA                     ; save it
  3961 00:E5D0: A5 94              LDA   Varnm2            ; get array name 2nd byte
  3962 00:E5D2: 48                 PHA                     ; save it
  3963 00:E5D3: A5 93              LDA   Varnm1            ; get array name 1st byte
  3964 00:E5D5: 48                 PHA                     ; save it
  3965 00:E5D6: 20 AA E5           JSR   LAB_EVIN          ; evaluate integer expression
  3966 00:E5D9: 68                 PLA                     ; pull array name 1st byte
  3967 00:E5DA: 85 93              STA   Varnm1            ; restore array name 1st byte
  3968 00:E5DC: 68                 PLA                     ; pull array name 2nd byte
  3969 00:E5DD: 85 94              STA   Varnm2            ; restore array name 2nd byte
  3970 00:E5DF: 68                 PLA                     ; pull dimensions count
  3971 00:E5E0: A8                 TAY                     ; restore it
  3972 00:E5E1: BA                 TSX                     ; copy stack pointer
  3973 00:E5E2: BD 02 01           LDA   LAB_STAK+2,X      ; get DIM flag
  3974 00:E5E5: 48                 PHA                     ; push it
  3975 00:E5E6: BD 01 01           LDA   LAB_STAK+1,X      ; get data type flag
  3976 00:E5E9: 48                 PHA                     ; push it
  3977 00:E5EA: A5 AE              LDA   FAC1_2            ; get this dimension size high byte
  3978 00:E5EC: 9D 02 01           STA   LAB_STAK+2,X      ; stack before flag bytes
  3979 00:E5EF: A5 AF              LDA   FAC1_3            ; get this dimension size low byte
  3980 00:E5F1: 9D 01 01           STA   LAB_STAK+1,X      ; stack before flag bytes
  3981 00:E5F4: C8                 INY                     ; increment dimensions count
  3982 00:E5F5: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  3983 00:E5F8: C9 2C              CMP   #','              ; compare with ","
  3984 00:E5FA: F0 D2              BEQ   LAB_1E1F          ; if found go do next dimension
  3985                        
  3986 00:E5FC: 84 5D              STY   Dimcnt            ; store dimensions count
  3987 00:E5FE: 20 EF E2           JSR   LAB_1BFB          ; scan for ")" , else do syntax error then warm start
  3988 00:E601: 68                 PLA                     ; pull data type flag
  3989 00:E602: 85 5F              STA   Dtypef            ; restore data type flag, $FF=string, $00=numeric
  3990 00:E604: 68                 PLA                     ; pull DIM flag
  3991 00:E605: 85 5E              STA   Defdim            ; restore DIM flag
  3992 00:E607: A6 7D              LDX   Sarryl            ; get array mem start low byte
  3993 00:E609: A5 7E              LDA   Sarryh            ; get array mem start high byte
  3994                        
  3995                        ; now check to see if we are at the end of array memory (we would be if there were
  3996                        ; no arrays).
  3997                        
  3998                        LAB_1E5C
  3999 00:E60B: 86 AA              STX   Astrtl            ; save as array start pointer low byte
  4000 00:E60D: 85 AB              STA   Astrth            ; save as array start pointer high byte
  4001 00:E60F: C5 80              CMP   Earryh            ; compare with array mem end high byte
  4002 00:E611: D0 04              BNE   LAB_1E68          ; branch if not reached array mem end
  4003                        
  4004 00:E613: E4 7F              CPX   Earryl            ; else compare with array mem end low byte
  4005 00:E615: F0 39              BEQ   LAB_1EA1          ; go build array if not found
  4006                        
  4007                                                      ; search for array
  4008                        LAB_1E68
  4009 00:E617: A0 00              LDY   #$00              ; clear index
  4010 00:E619: B1 AA              LDA   (Astrtl),Y        ; get array name first byte
  4011 00:E61B: C8                 INY                     ; increment index to second name byte
  4012 00:E61C: C5 93              CMP   Varnm1            ; compare with this array name first byte
  4013 00:E61E: D0 06              BNE   LAB_1E77          ; branch if no match
  4014                        
  4015 00:E620: A5 94              LDA   Varnm2            ; else get this array name second byte
  4016 00:E622: D1 AA              CMP   (Astrtl),Y        ; compare with array name second byte
  4017 00:E624: F0 16              BEQ   LAB_1E8D          ; array found so branch
  4018                        
  4019                                                      ; no match
  4020                        LAB_1E77
  4021 00:E626: C8                 INY                     ; increment index
  4022 00:E627: B1 AA              LDA   (Astrtl),Y        ; get array size low byte
  4023 00:E629: 18                 CLC                     ; clear carry for add
  4024 00:E62A: 65 AA              ADC   Astrtl            ; add array start pointer low byte
  4025 00:E62C: AA                 TAX                     ; copy low byte to X
  4026 00:E62D: C8                 INY                     ; increment index
  4027 00:E62E: B1 AA              LDA   (Astrtl),Y        ; get array size high byte
  4028 00:E630: 65 AB              ADC   Astrth            ; add array mem pointer high byte
  4029 00:E632: 90 D7              BCC   LAB_1E5C          ; if no overflow go check next array
  4030                        
  4031                        ; do array bounds error
  4032                        
  4033                        LAB_1E85
  4034 00:E634: A2 10              LDX   #$10              ; error code $10 ("Array bounds" error)
  4035 00:E636: 2C                 .byte $2C               ; makes next bit BIT LAB_08A2
  4036                        
  4037                        ; do function call error
  4038                        
  4039                        LAB_FCER
  4040 00:E637: A2 08              LDX   #$08              ; error code $08 ("Function call" error)
  4041                        LAB_1E8A
  4042 00:E639: 4C 3F D8           JMP   LAB_XERR          ; do error #X, then warm start
  4043                        
  4044                                                      ; found array, are we trying to dimension it?
  4045                        LAB_1E8D
  4046 00:E63C: A2 12              LDX   #$12              ; set error $12 ("Double dimension" error)
  4047 00:E63E: A5 5E              LDA   Defdim            ; get DIM flag
  4048 00:E640: D0 F7              BNE   LAB_1E8A          ; if we are trying to dimension it do error #X, then warm
  4049                                                      ; start
  4050                        
  4051                        ; found the array and we're not dimensioning it so we must find an element in it
  4052                        
  4053 00:E642: 20 99 E5           JSR   LAB_1DE6          ; set-up array pointer (Adatal/h) to first element in array
  4054                                                      ; (Astrtl,Astrth points to start of array)
  4055 00:E645: A5 5D              LDA   Dimcnt            ; get dimensions count
  4056 00:E647: A0 04              LDY   #$04              ; set index to array's # of dimensions
  4057 00:E649: D1 AA              CMP   (Astrtl),Y        ; compare with no of dimensions
  4058 00:E64B: D0 E7              BNE   LAB_1E85          ; if wrong do array bounds error, could do "Wrong
  4059                                                      ; dimensions" error here .. if we want a different
  4060                                                      ; error message
  4061                        
  4062 00:E64D: 4C D3 E6           JMP   LAB_1F28          ; found array so go get element
  4063                                                      ; (could jump to LAB_1F28 as all LAB_1F24 does is take
  4064                                                      ; Dimcnt and save it at (Astrtl),Y which is already the
  4065                                                      ; same or we would have taken the BNE)
  4066                        
  4067                                                      ; array not found, so build it
  4068                        LAB_1EA1
  4069 00:E650: 20 99 E5           JSR   LAB_1DE6          ; set-up array pointer (Adatal/h) to first element in array
  4070                                                      ; (Astrtl,Astrth points to start of array)
  4071 00:E653: 20 0E D8           JSR   LAB_121F          ; check available memory, "Out of memory" error if no room
  4072                                                      ; addr to check is in AY (low/high)
  4073 00:E656: A0 00              LDY   #$00              ; clear Y (don't need to clear A)
  4074 00:E658: 84 BB              STY   Aspth             ; clear array data size high byte
  4075 00:E65A: A5 93              LDA   Varnm1            ; get variable name 1st byte
  4076 00:E65C: 91 AA              STA   (Astrtl),Y        ; save array name 1st byte
  4077 00:E65E: C8                 INY                     ; increment index
  4078 00:E65F: A5 94              LDA   Varnm2            ; get variable name 2nd byte
  4079 00:E661: 91 AA              STA   (Astrtl),Y        ; save array name 2nd byte
  4080 00:E663: A5 5D              LDA   Dimcnt            ; get dimensions count
  4081 00:E665: A0 04              LDY   #$04              ; index to dimension count
  4082 00:E667: 84 BA              STY   Asptl             ; set array data size low byte (four bytes per element)
  4083 00:E669: 91 AA              STA   (Astrtl),Y        ; set array's dimensions count
  4084                        
  4085                                                      ; now calculate the size of the data space for the array
  4086 00:E66B: 18                 CLC                     ; clear carry for add (clear on subsequent loops)
  4087                        LAB_1EC0
  4088 00:E66C: A2 0B              LDX   #$0B              ; set default dimension value low byte
  4089 00:E66E: A9 00              LDA   #$00              ; set default dimension value high byte
  4090 00:E670: 24 5E              BIT   Defdim            ; test default DIM flag
  4091 00:E672: 50 07              BVC   LAB_1ED0          ; branch if b6 of Defdim is clear
  4092                        
  4093 00:E674: 68                 PLA                     ; else pull dimension value low byte
  4094 00:E675: 69 01              ADC   #$01              ; +1 (allow for zeroeth element)
  4095 00:E677: AA                 TAX                     ; copy low byte to X
  4096 00:E678: 68                 PLA                     ; pull dimension value high byte
  4097 00:E679: 69 00              ADC   #$00              ; add carry from low byte
  4098                        
  4099                        LAB_1ED0
  4100 00:E67B: C8                 INY                     ; index to dimension value high byte
  4101 00:E67C: 91 AA              STA   (Astrtl),Y        ; save dimension value high byte
  4102 00:E67E: C8                 INY                     ; index to dimension value high byte
  4103 00:E67F: 8A                 TXA                     ; get dimension value low byte
  4104 00:E680: 91 AA              STA   (Astrtl),Y        ; save dimension value low byte
  4105 00:E682: 20 22 E7           JSR   LAB_1F7C          ; does XY = (Astrtl),Y * (Asptl)
  4106 00:E685: 86 BA              STX   Asptl             ; save array data size low byte
  4107 00:E687: 85 BB              STA   Aspth             ; save array data size high byte
  4108 00:E689: A4 71              LDY   ut1_pl            ; restore index (saved by subroutine)
  4109 00:E68B: C6 5D              DEC   Dimcnt            ; decrement dimensions count
  4110 00:E68D: D0 DD              BNE   LAB_1EC0          ; loop while not = 0
  4111                        
  4112 00:E68F: 65 A5              ADC   Adatah            ; add size high byte to first element high byte
  4113                                                      ; (carry is always clear here)
  4114 00:E691: B0 5D              BCS   LAB_1F45          ; if overflow go do "Out of memory" error
  4115                        
  4116 00:E693: 85 A5              STA   Adatah            ; save end of array high byte
  4117 00:E695: A8                 TAY                     ; copy end high byte to Y
  4118 00:E696: 8A                 TXA                     ; get array size low byte
  4119 00:E697: 65 A4              ADC   Adatal            ; add array start low byte
  4120 00:E699: 90 03              BCC   LAB_1EF3          ; branch if no carry
  4121                        
  4122 00:E69B: C8                 INY                     ; else increment end of array high byte
  4123 00:E69C: F0 52              BEQ   LAB_1F45          ; if overflow go do "Out of memory" error
  4124                        
  4125                                                      ; set-up mostly complete, now zero the array
  4126                        LAB_1EF3
  4127 00:E69E: 20 0E D8           JSR   LAB_121F          ; check available memory, "Out of memory" error if no room
  4128                                                      ; addr to check is in AY (low/high)
  4129 00:E6A1: 85 7F              STA   Earryl            ; save array mem end low byte
  4130 00:E6A3: 84 80              STY   Earryh            ; save array mem end high byte
  4131 00:E6A5: A9 00              LDA   #$00              ; clear byte for array clear
  4132 00:E6A7: E6 BB              INC   Aspth             ; increment array size high byte (now block count)
  4133 00:E6A9: A4 BA              LDY   Asptl             ; get array size low byte (now index to block)
  4134 00:E6AB: F0 05              BEQ   LAB_1F07          ; branch if low byte = $00
  4135                        
  4136                        LAB_1F02
  4137 00:E6AD: 88                 DEY                     ; decrement index (do 0 to n-1)
  4138 00:E6AE: 91 A4              STA   (Adatal),Y        ; zero byte
  4139 00:E6B0: D0 FB              BNE   LAB_1F02          ; loop until this block done
  4140                        
  4141                        LAB_1F07
  4142 00:E6B2: C6 A5              DEC   Adatah            ; decrement array pointer high byte
  4143 00:E6B4: C6 BB              DEC   Aspth             ; decrement block count high byte
  4144 00:E6B6: D0 F5              BNE   LAB_1F02          ; loop until all blocks done
  4145                        
  4146 00:E6B8: E6 A5              INC   Adatah            ; correct for last loop
  4147 00:E6BA: 38                 SEC                     ; set carry for subtract
  4148 00:E6BB: A0 02              LDY   #$02              ; index to array size low byte
  4149 00:E6BD: A5 7F              LDA   Earryl            ; get array mem end low byte
  4150 00:E6BF: E5 AA              SBC   Astrtl            ; subtract array start low byte
  4151 00:E6C1: 91 AA              STA   (Astrtl),Y        ; save array size low byte
  4152 00:E6C3: C8                 INY                     ; index to array size high byte
  4153 00:E6C4: A5 80              LDA   Earryh            ; get array mem end high byte
  4154 00:E6C6: E5 AB              SBC   Astrth            ; subtract array start high byte
  4155 00:E6C8: 91 AA              STA   (Astrtl),Y        ; save array size high byte
  4156 00:E6CA: A5 5E              LDA   Defdim            ; get default DIM flag
  4157 00:E6CC: D0 53              BNE   LAB_1F7B          ; exit (RET) if this was a DIM command
  4158                        
  4159                                                      ; else, find element
  4160 00:E6CE: C8                 INY                     ; index to # of dimensions
  4161                        
  4162                        LAB_1F24
  4163 00:E6CF: B1 AA              LDA   (Astrtl),Y        ; get array's dimension count
  4164 00:E6D1: 85 5D              STA   Dimcnt            ; save it
  4165                        
  4166                        ; we have found, or built, the array. now we need to find the element
  4167                        
  4168                        LAB_1F28
  4169 00:E6D3: A9 00              LDA   #$00              ; clear byte
  4170 00:E6D5: 85 BA              STA   Asptl             ; clear array data pointer low byte
  4171                        LAB_1F2C
  4172 00:E6D7: 85 BB              STA   Aspth             ; save array data pointer high byte
  4173 00:E6D9: C8                 INY                     ; increment index (point to array bound high byte)
  4174 00:E6DA: 68                 PLA                     ; pull array index low byte
  4175 00:E6DB: AA                 TAX                     ; copy to X
  4176 00:E6DC: 85 AE              STA   FAC1_2            ; save index low byte to FAC1 mantissa2
  4177 00:E6DE: 68                 PLA                     ; pull array index high byte
  4178 00:E6DF: 85 AF              STA   FAC1_3            ; save index high byte to FAC1 mantissa3
  4179 00:E6E1: D1 AA              CMP   (Astrtl),Y        ; compare with array bound high byte
  4180 00:E6E3: 90 0E              BCC   LAB_1F48          ; branch if within bounds
  4181                        
  4182 00:E6E5: D0 06              BNE   LAB_1F42          ; if outside bounds do array bounds error
  4183                        
  4184                                                      ; else high byte was = so test low bytes
  4185 00:E6E7: C8                 INY                     ; index to array bound low byte
  4186 00:E6E8: 8A                 TXA                     ; get array index low byte
  4187 00:E6E9: D1 AA              CMP   (Astrtl),Y        ; compare with array bound low byte
  4188 00:E6EB: 90 07              BCC   LAB_1F49          ; branch if within bounds
  4189                        
  4190                        LAB_1F42
  4191 00:E6ED: 4C 34 E6           JMP   LAB_1E85          ; else do array bounds error
  4192                        
  4193                        LAB_1F45
  4194 00:E6F0: 4C 3D D8           JMP   LAB_OMER          ; do "Out of memory" error then warm start
  4195                        
  4196                        LAB_1F48
  4197 00:E6F3: C8                 INY                     ; index to array bound low byte
  4198                        LAB_1F49
  4199 00:E6F4: A5 BB              LDA   Aspth             ; get array data pointer high byte
  4200 00:E6F6: 05 BA              ORA   Asptl             ; OR with array data pointer low byte
  4201 00:E6F8: F0 0A              BEQ   LAB_1F5A          ; branch if array data pointer = null (skip multiply)
  4202                        
  4203 00:E6FA: 20 22 E7           JSR   LAB_1F7C          ; does XY = (Astrtl),Y * (Asptl)
  4204 00:E6FD: 8A                 TXA                     ; get result low byte
  4205 00:E6FE: 65 AE              ADC   FAC1_2            ; add index low byte from FAC1 mantissa2
  4206 00:E700: AA                 TAX                     ; save result low byte
  4207 00:E701: 98                 TYA                     ; get result high byte
  4208 00:E702: A4 71              LDY   ut1_pl            ; restore index
  4209                        LAB_1F5A
  4210 00:E704: 65 AF              ADC   FAC1_3            ; add index high byte from FAC1 mantissa3
  4211 00:E706: 86 BA              STX   Asptl             ; save array data pointer low byte
  4212 00:E708: C6 5D              DEC   Dimcnt            ; decrement dimensions count
  4213 00:E70A: D0 CB              BNE   LAB_1F2C          ; loop if dimensions still to do
  4214                        
  4215 00:E70C: 06 BA              ASL   Asptl             ; array data pointer low byte * 2
  4216 00:E70E: 2A                 ROL                     ; array data pointer high byte * 2
  4217 00:E70F: 06 BA              ASL   Asptl             ; array data pointer low byte * 4
  4218 00:E711: 2A                 ROL                     ; array data pointer high byte * 4
  4219 00:E712: A8                 TAY                     ; copy high byte
  4220 00:E713: A5 BA              LDA   Asptl             ; get low byte
  4221 00:E715: 65 A4              ADC   Adatal            ; add array data start pointer low byte
  4222 00:E717: 85 95              STA   Cvaral            ; save as current var address low byte
  4223 00:E719: 98                 TYA                     ; get high byte back
  4224 00:E71A: 65 A5              ADC   Adatah            ; add array data start pointer high byte
  4225 00:E71C: 85 96              STA   Cvarah            ; save as current var address high byte
  4226 00:E71E: A8                 TAY                     ; copy high byte to Y
  4227 00:E71F: A5 95              LDA   Cvaral            ; get current var address low byte
  4228                        LAB_1F7B
  4229 00:E721: 60                 RTS
  4230                        
  4231                        ; does XY = (Astrtl),Y * (Asptl)
  4232                        
  4233                        LAB_1F7C
  4234 00:E722: 84 71              STY   ut1_pl            ; save index
  4235 00:E724: B1 AA              LDA   (Astrtl),Y        ; get dimension size low byte
  4236 00:E726: 85 76              STA   dims_l            ; save dimension size low byte
  4237 00:E728: 88                 DEY                     ; decrement index
  4238 00:E729: B1 AA              LDA   (Astrtl),Y        ; get dimension size high byte
  4239 00:E72B: 85 77              STA   dims_h            ; save dimension size high byte
  4240                        
  4241 00:E72D: A9 10              LDA   #$10              ; count = $10 (16 bit multiply)
  4242 00:E72F: 85 A8              STA   numbit            ; save bit count
  4243 00:E731: A2 00              LDX   #$00              ; clear result low byte
  4244 00:E733: A0 00              LDY   #$00              ; clear result high byte
  4245                        LAB_1F8F
  4246 00:E735: 8A                 TXA                     ; get result low byte
  4247 00:E736: 0A                 ASL                     ; *2
  4248 00:E737: AA                 TAX                     ; save result low byte
  4249 00:E738: 98                 TYA                     ; get result high byte
  4250 00:E739: 2A                 ROL                     ; *2
  4251 00:E73A: A8                 TAY                     ; save result high byte
  4252 00:E73B: B0 B3              BCS   LAB_1F45          ; if overflow go do "Out of memory" error
  4253                        
  4254 00:E73D: 06 BA              ASL   Asptl             ; shift multiplier low byte
  4255 00:E73F: 26 BB              ROL   Aspth             ; shift multiplier high byte
  4256 00:E741: 90 0B              BCC   LAB_1FA8          ; skip add if no carry
  4257                        
  4258 00:E743: 18                 CLC                     ; else clear carry for add
  4259 00:E744: 8A                 TXA                     ; get result low byte
  4260 00:E745: 65 76              ADC   dims_l            ; add dimension size low byte
  4261 00:E747: AA                 TAX                     ; save result low byte
  4262 00:E748: 98                 TYA                     ; get result high byte
  4263 00:E749: 65 77              ADC   dims_h            ; add dimension size high byte
  4264 00:E74B: A8                 TAY                     ; save result high byte
  4265 00:E74C: B0 A2              BCS   LAB_1F45          ; if overflow go do "Out of memory" error
  4266                        
  4267                        LAB_1FA8
  4268 00:E74E: C6 A8              DEC   numbit            ; decrement bit count
  4269 00:E750: D0 E3              BNE   LAB_1F8F          ; loop until all done
  4270                        
  4271 00:E752: 60                 RTS
  4272                        
  4273                        ; perform FRE()
  4274                        
  4275                        LAB_FRE
  4276 00:E753: A5 5F              LDA   Dtypef            ; get data type flag, $FF=string, $00=numeric
  4277 00:E755: 10 03              BPL   LAB_1FB4          ; branch if numeric
  4278                        
  4279 00:E757: 20 52 EA           JSR   LAB_22B6          ; pop string off descriptor stack, or from top of string
  4280                                                      ; space returns with A = length, X=$71=pointer low byte,
  4281                                                      ; Y=$72=pointer high byte
  4282                        
  4283                                                      ; FRE(n) was numeric so do this
  4284                        LAB_1FB4
  4285 00:E75A: 20 EF E8           JSR   LAB_GARB          ; go do garbage collection
  4286 00:E75D: 38                 SEC                     ; set carry for subtract
  4287 00:E75E: A5 81              LDA   Sstorl            ; get bottom of string space low byte
  4288 00:E760: E5 7F              SBC   Earryl            ; subtract array mem end low byte
  4289 00:E762: A8                 TAY                     ; copy result to Y
  4290 00:E763: A5 82              LDA   Sstorh            ; get bottom of string space high byte
  4291 00:E765: E5 80              SBC   Earryh            ; subtract array mem end high byte
  4292                        
  4293                        ; save and convert integer AY to FAC1
  4294                        
  4295                        LAB_AYFC
  4296 00:E767: 46 5F              LSR   Dtypef            ; clear data type flag, $FF=string, $00=numeric
  4297 00:E769: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  4298 00:E76B: 84 AE              STY   FAC1_2            ; save FAC1 mantissa2
  4299 00:E76D: A2 90              LDX   #$90              ; set exponent=2^16 (integer)
  4300 00:E76F: 4C 0F F0           JMP   LAB_27E3          ; set exp=X, clear FAC1_3, normalise and return
  4301                        
  4302                        ; perform POS()
  4303                        
  4304                        LAB_POS
  4305 00:E772: A4 0E              LDY   TPos              ; get terminal position
  4306                        
  4307                        ; convert Y to byte in FAC1
  4308                        
  4309                        LAB_1FD0
  4310 00:E774: A9 00              LDA   #$00              ; clear high byte
  4311 00:E776: F0 EF              BEQ   LAB_AYFC          ; always save and convert integer AY to FAC1 and return
  4312                        
  4313                        ; check not Direct (used by DEF and INPUT)
  4314                        
  4315                        LAB_CKRN
  4316 00:E778: A6 88              LDX   Clineh            ; get current line high byte
  4317 00:E77A: E8                 INX                     ; increment it
  4318 00:E77B: D0 A4              BNE   LAB_1F7B          ; return if can continue not direct mode
  4319                        
  4320                                                      ; else do illegal direct error
  4321                        LAB_1FD9
  4322 00:E77D: A2 16              LDX   #$16              ; error code $16 ("Illegal direct" error)
  4323                        LAB_1FDB
  4324 00:E77F: 4C 3F D8           JMP   LAB_XERR          ; go do error #X, then warm start
  4325                        
  4326                        ; perform DEF
  4327                        
  4328                        LAB_DEF
  4329 00:E782: 20 B3 E7           JSR   LAB_200B          ; check FNx syntax
  4330 00:E785: 85 9C              STA   func_l            ; save function pointer low byte
  4331 00:E787: 84 9D              STY   func_h            ; save function pointer high byte
  4332 00:E789: 20 78 E7           JSR   LAB_CKRN          ; check not Direct (back here if ok)
  4333 00:E78C: 20 FA E2           JSR   LAB_1BFE          ; scan for "(" , else do syntax error then warm start
  4334 00:E78F: A9 80              LDA   #$80              ; set flag for FNx
  4335 00:E791: 85 61              STA   Sufnxf            ; save subscript/FNx flag
  4336 00:E793: 20 B8 E4           JSR   LAB_GVAR          ; get (var) address
  4337 00:E796: 20 D0 E1           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  4338 00:E799: 20 EF E2           JSR   LAB_1BFB          ; scan for ")" , else do syntax error then warm start
  4339 00:E79C: A9 C1              LDA   #TK_EQUAL         ; get = token
  4340 00:E79E: 20 F1 E2           JSR   LAB_SCCA          ; scan for CHR$(A), else do syntax error then warm start
  4341 00:E7A1: A5 96              LDA   Cvarah            ; get current var address high byte
  4342 00:E7A3: 48                 PHA                     ; push it
  4343 00:E7A4: A5 95              LDA   Cvaral            ; get current var address low byte
  4344 00:E7A6: 48                 PHA                     ; push it
  4345 00:E7A7: A5 C4              LDA   Bpntrh            ; get BASIC execute pointer high byte
  4346 00:E7A9: 48                 PHA                     ; push it
  4347 00:E7AA: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  4348 00:E7AC: 48                 PHA                     ; push it
  4349 00:E7AD: 20 8A DD           JSR   LAB_DATA          ; go perform DATA
  4350 00:E7B0: 4C 22 E8           JMP   LAB_207A          ; put execute pointer and variable pointer into function
  4351                                                      ; and return
  4352                        
  4353                        ; check FNx syntax
  4354                        
  4355                        LAB_200B
  4356 00:E7B3: A9 AE              LDA   #TK_FN            ; get FN" token
  4357 00:E7B5: 20 F1 E2           JSR   LAB_SCCA          ; scan for CHR$(A) , else do syntax error then warm start
  4358                                                      ; return character after A
  4359 00:E7B8: 09 80              ORA   #$80              ; set FN flag bit
  4360 00:E7BA: 85 61              STA   Sufnxf            ; save FN flag so array variable test fails
  4361 00:E7BC: 20 BF E4           JSR   LAB_1D12          ; search for FN variable
  4362 00:E7BF: 4C D0 E1           JMP   LAB_CTNM          ; check if source is numeric and return, else do type
  4363                                                      ; mismatch
  4364                        
  4365                                                      ; Evaluate FNx
  4366                        LAB_201E
  4367 00:E7C2: 20 B3 E7           JSR   LAB_200B          ; check FNx syntax
  4368 00:E7C5: 48                 PHA                     ; push function pointer low byte
  4369 00:E7C6: 98                 TYA                     ; copy function pointer high byte
  4370 00:E7C7: 48                 PHA                     ; push function pointer high byte
  4371 00:E7C8: 20 FA E2           JSR   LAB_1BFE          ; scan for "(", else do syntax error then warm start
  4372 00:E7CB: 20 E1 E1           JSR   LAB_EVEX          ; evaluate expression
  4373 00:E7CE: 20 EF E2           JSR   LAB_1BFB          ; scan for ")", else do syntax error then warm start
  4374 00:E7D1: 20 D0 E1           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  4375 00:E7D4: 68                 PLA                     ; pop function pointer high byte
  4376 00:E7D5: 85 9D              STA   func_h            ; restore it
  4377 00:E7D7: 68                 PLA                     ; pop function pointer low byte
  4378 00:E7D8: 85 9C              STA   func_l            ; restore it
  4379 00:E7DA: A2 20              LDX   #$20              ; error code $20 ("Undefined function" error)
  4380 00:E7DC: A0 03              LDY   #$03              ; index to variable pointer high byte
  4381 00:E7DE: B1 9C              LDA   (func_l),Y        ; get variable pointer high byte
  4382 00:E7E0: F0 9D              BEQ   LAB_1FDB          ; if zero go do undefined function error
  4383                        
  4384 00:E7E2: 85 96              STA   Cvarah            ; save variable address high byte
  4385 00:E7E4: 88                 DEY                     ; index to variable address low byte
  4386 00:E7E5: B1 9C              LDA   (func_l),Y        ; get variable address low byte
  4387 00:E7E7: 85 95              STA   Cvaral            ; save variable address low byte
  4388 00:E7E9: AA                 TAX                     ; copy address low byte
  4389                        
  4390                                                      ; now stack the function variable value before use
  4391 00:E7EA: C8                 INY                     ; index to mantissa_3
  4392                        LAB_2043
  4393 00:E7EB: B1 95              LDA   (Cvaral),Y        ; get byte from variable
  4394 00:E7ED: 48                 PHA                     ; stack it
  4395 00:E7EE: 88                 DEY                     ; decrement index
  4396 00:E7EF: 10 FA              BPL   LAB_2043          ; loop until variable stacked
  4397                        
  4398 00:E7F1: A4 96              LDY   Cvarah            ; get variable address high byte
  4399 00:E7F3: 20 B4 EF           JSR   LAB_2778          ; pack FAC1 (function expression value) into (XY)
  4400                                                      ; (function variable), return Y=0, always
  4401 00:E7F6: A5 C4              LDA   Bpntrh            ; get BASIC execute pointer high byte
  4402 00:E7F8: 48                 PHA                     ; push it
  4403 00:E7F9: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  4404 00:E7FB: 48                 PHA                     ; push it
  4405 00:E7FC: B1 9C              LDA   (func_l),Y        ; get function execute pointer low byte
  4406 00:E7FE: 85 C3              STA   Bpntrl            ; save as BASIC execute pointer low byte
  4407 00:E800: C8                 INY                     ; index to high byte
  4408 00:E801: B1 9C              LDA   (func_l),Y        ; get function execute pointer high byte
  4409 00:E803: 85 C4              STA   Bpntrh            ; save as BASIC execute pointer high byte
  4410 00:E805: A5 96              LDA   Cvarah            ; get variable address high byte
  4411 00:E807: 48                 PHA                     ; push it
  4412 00:E808: A5 95              LDA   Cvaral            ; get variable address low byte
  4413 00:E80A: 48                 PHA                     ; push it
  4414 00:E80B: 20 CD E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  4415                                                      ; else do type mismatch
  4416 00:E80E: 68                 PLA                     ; pull variable address low byte
  4417 00:E80F: 85 9C              STA   func_l            ; save variable address low byte
  4418 00:E811: 68                 PLA                     ; pull variable address high byte
  4419 00:E812: 85 9D              STA   func_h            ; save variable address high byte
  4420 00:E814: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  4421 00:E817: F0 03              BEQ   LAB_2074          ; branch if null (should be [EOL] marker)
  4422                        
  4423 00:E819: 4C 02 E3           JMP   LAB_SNER          ; else syntax error then warm start
  4424                        
  4425                        ; restore Bpntrl,Bpntrh and function variable from stack
  4426                        
  4427                        LAB_2074
  4428 00:E81C: 68                 PLA                     ; pull BASIC execute pointer low byte
  4429 00:E81D: 85 C3              STA   Bpntrl            ; restore BASIC execute pointer low byte
  4430 00:E81F: 68                 PLA                     ; pull BASIC execute pointer high byte
  4431 00:E820: 85 C4              STA   Bpntrh            ; restore BASIC execute pointer high byte
  4432                        
  4433                        ; put execute pointer and variable pointer into function
  4434                        
  4435                        LAB_207A
  4436 00:E822: A0 00              LDY   #$00              ; clear index
  4437 00:E824: 68                 PLA                     ; pull BASIC execute pointer low byte
  4438 00:E825: 91 9C              STA   (func_l),Y        ; save to function
  4439 00:E827: C8                 INY                     ; increment index
  4440 00:E828: 68                 PLA                     ; pull BASIC execute pointer high byte
  4441 00:E829: 91 9C              STA   (func_l),Y        ; save to function
  4442 00:E82B: C8                 INY                     ; increment index
  4443 00:E82C: 68                 PLA                     ; pull current var address low byte
  4444 00:E82D: 91 9C              STA   (func_l),Y        ; save to function
  4445 00:E82F: C8                 INY                     ; increment index
  4446 00:E830: 68                 PLA                     ; pull current var address high byte
  4447 00:E831: 91 9C              STA   (func_l),Y        ; save to function
  4448 00:E833: 60                 RTS
  4449                        
  4450                        ; perform STR$()
  4451                        
  4452                        LAB_STRS
  4453 00:E834: 20 D0 E1           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  4454 00:E837: 20 A2 F1           JSR   LAB_296E          ; convert FAC1 to string
  4455 00:E83A: A9 F0              LDA   #<Decssp1         ; set result string low pointer
  4456 00:E83C: A0 00              LDY   #>Decssp1         ; set result string high pointer
  4457 00:E83E: F0 12              BEQ   LAB_20AE          ; print null terminated string to Sutill/Sutilh
  4458                        
  4459                        ; Do string vector
  4460                        ; copy des_pl/h to des_2l/h and make string space A bytes long
  4461                        
  4462                        LAB_209C
  4463 00:E840: A6 AE              LDX   des_pl            ; get descriptor pointer low byte
  4464 00:E842: A4 AF              LDY   des_ph            ; get descriptor pointer high byte
  4465 00:E844: 86 9E              STX   des_2l            ; save descriptor pointer low byte
  4466 00:E846: 84 9F              STY   des_2h            ; save descriptor pointer high byte
  4467                        
  4468                        ; make string space A bytes long
  4469                        ; A=length, X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
  4470                        
  4471                        LAB_MSSP
  4472 00:E848: 20 BD E8           JSR   LAB_2115          ; make space in string memory for string A long
  4473                                                      ; return X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
  4474 00:E84B: 86 AD              STX   str_pl            ; save string pointer low byte
  4475 00:E84D: 84 AE              STY   str_ph            ; save string pointer high byte
  4476 00:E84F: 85 AC              STA   str_ln            ; save length
  4477 00:E851: 60                 RTS
  4478                        
  4479                        ; Scan, set up string
  4480                        ; print " terminated string to Sutill/Sutilh
  4481                        
  4482                        LAB_20AE
  4483 00:E852: A2 22              LDX   #$22              ; set terminator to "
  4484 00:E854: 86 5B              STX   Srchc             ; set search character (terminator 1)
  4485 00:E856: 86 5C              STX   Asrch             ; set terminator 2
  4486                        
  4487                        ; print [Srchc] or [Asrch] terminated string to Sutill/Sutilh
  4488                        ; source is AY
  4489                        
  4490                        LAB_20B4
  4491 00:E858: 85 B8              STA   ssptr_l           ; store string start low byte
  4492 00:E85A: 84 B9              STY   ssptr_h           ; store string start high byte
  4493 00:E85C: 85 AD              STA   str_pl            ; save string pointer low byte
  4494 00:E85E: 84 AE              STY   str_ph            ; save string pointer high byte
  4495 00:E860: A0 FF              LDY   #$FF              ; set length to -1
  4496                        LAB_20BE
  4497 00:E862: C8                 INY                     ; increment length
  4498 00:E863: B1 B8              LDA   (ssptr_l),Y       ; get byte from string
  4499 00:E865: F0 0C              BEQ   LAB_20CF          ; exit loop if null byte [EOS]
  4500                        
  4501 00:E867: C5 5B              CMP   Srchc             ; compare with search character (terminator 1)
  4502 00:E869: F0 04              BEQ   LAB_20CB          ; branch if terminator
  4503                        
  4504 00:E86B: C5 5C              CMP   Asrch             ; compare with terminator 2
  4505 00:E86D: D0 F3              BNE   LAB_20BE          ; loop if not terminator 2
  4506                        
  4507                        LAB_20CB
  4508 00:E86F: C9 22              CMP   #$22              ; compare with "
  4509 00:E871: F0 01              BEQ   LAB_20D0          ; branch if " (carry set if = !)
  4510                        
  4511                        LAB_20CF
  4512 00:E873: 18                 CLC                     ; clear carry for add (only if [EOL] terminated string)
  4513                        LAB_20D0
  4514 00:E874: 84 AC              STY   str_ln            ; save length in FAC1 exponent
  4515 00:E876: 98                 TYA                     ; copy length to A
  4516 00:E877: 65 B8              ADC   ssptr_l           ; add string start low byte
  4517 00:E879: 85 BA              STA   Sendl             ; save string end low byte
  4518 00:E87B: A6 B9              LDX   ssptr_h           ; get string start high byte
  4519 00:E87D: 90 01              BCC   LAB_20DC          ; branch if no low byte overflow
  4520                        
  4521 00:E87F: E8                 INX                     ; else increment high byte
  4522                        LAB_20DC
  4523 00:E880: 86 BB              STX   Sendh             ; save string end high byte
  4524 00:E882: A5 B9              LDA   ssptr_h           ; get string start high byte
  4525                        ; *** begin RAM above code / Ibuff above EhBASIC patch V2 ***
  4526                        ; *** replace
  4527                        ;      CMP   #>Ram_base        ; compare with start of program memory
  4528                        ;      BCS   LAB_RTST          ; branch if not in utility area
  4529                        ; *** with
  4530 00:E884: F0 04              BEQ   LAB_MVST          ; fix STR$() using page zero via LAB_296E
  4531 00:E886: C9 02              CMP   #>Ibuffs          ; compare with location of input buffer page
  4532 00:E888: D0 0B              BNE   LAB_RTST          ; branch if not in utility area
  4533                        LAB_MVST      
  4534                        ; *** end   RAM above code / Ibuff above EhBASIC patch V2 ***
  4535                        
  4536                                                      ; string in utility area, move to string memory
  4537 00:E88A: 98                 TYA                     ; copy length to A
  4538 00:E88B: 20 40 E8           JSR   LAB_209C          ; copy des_pl/h to des_2l/h and make string space A bytes
  4539                                                      ; long
  4540 00:E88E: A6 B8              LDX   ssptr_l           ; get string start low byte
  4541 00:E890: A4 B9              LDY   ssptr_h           ; get string start high byte
  4542 00:E892: 20 33 EA           JSR   LAB_2298          ; store string A bytes long from XY to (Sutill)
  4543                        
  4544                        ; check for space on descriptor stack then ..
  4545                        ; put string address and length on descriptor stack and update stack pointers
  4546                        
  4547                        LAB_RTST
  4548 00:E895: A6 65              LDX   next_s            ; get string stack pointer
  4549 00:E897: E0 71              CPX   #des_sk+$09       ; compare with max+1
  4550 00:E899: D0 05              BNE   LAB_20F8          ; branch if space on string stack
  4551                        
  4552                                                      ; else do string too complex error
  4553 00:E89B: A2 1C              LDX   #$1C              ; error code $1C ("String too complex" error)
  4554                        LAB_20F5
  4555 00:E89D: 4C 3F D8           JMP   LAB_XERR          ; do error #X, then warm start
  4556                        
  4557                        ; put string address and length on descriptor stack and update stack pointers
  4558                        
  4559                        LAB_20F8
  4560 00:E8A0: A5 AC              LDA   str_ln            ; get string length
  4561 00:E8A2: 95 00              STA   PLUS_0,X          ; put on string stack
  4562 00:E8A4: A5 AD              LDA   str_pl            ; get string pointer low byte
  4563 00:E8A6: 95 01              STA   PLUS_1,X          ; put on string stack
  4564 00:E8A8: A5 AE              LDA   str_ph            ; get string pointer high byte
  4565 00:E8AA: 95 02              STA   PLUS_2,X          ; put on string stack
  4566 00:E8AC: A0 00              LDY   #$00              ; clear Y
  4567 00:E8AE: 86 AE              STX   des_pl            ; save string descriptor pointer low byte
  4568 00:E8B0: 84 AF              STY   des_ph            ; save string descriptor pointer high byte (always $00)
  4569 00:E8B2: 88                 DEY                     ; Y = $FF
  4570 00:E8B3: 84 5F              STY   Dtypef            ; save data type flag, $FF=string
  4571 00:E8B5: 86 66              STX   last_sl           ; save old stack pointer (current top item)
  4572 00:E8B7: E8                 INX                     ; update stack pointer
  4573 00:E8B8: E8                 INX                     ; update stack pointer
  4574 00:E8B9: E8                 INX                     ; update stack pointer
  4575 00:E8BA: 86 65              STX   next_s            ; save new top item value
  4576 00:E8BC: 60                 RTS
  4577                        
  4578                        ; Build descriptor
  4579                        ; make space in string memory for string A long
  4580                        ; return X=Sutill=ptr low byte, Y=Sutill=ptr high byte
  4581                        
  4582                        LAB_2115
  4583 00:E8BD: 46 60              LSR   Gclctd            ; clear garbage collected flag (b7)
  4584                        
  4585                                                      ; make space for string A long
  4586                        LAB_2117
  4587 00:E8BF: 48                 PHA                     ; save string length
  4588 00:E8C0: 49 FF              EOR   #$FF              ; complement it
  4589 00:E8C2: 38                 SEC                     ; set carry for subtract (twos comp add)
  4590 00:E8C3: 65 81              ADC   Sstorl            ; add bottom of string space low byte (subtract length)
  4591 00:E8C5: A4 82              LDY   Sstorh            ; get bottom of string space high byte
  4592 00:E8C7: B0 01              BCS   LAB_2122          ; skip decrement if no underflow
  4593                        
  4594 00:E8C9: 88                 DEY                     ; decrement bottom of string space high byte
  4595                        LAB_2122
  4596 00:E8CA: C4 80              CPY   Earryh            ; compare with array mem end high byte
  4597 00:E8CC: 90 11              BCC   LAB_2137          ; do out of memory error if less
  4598                        
  4599 00:E8CE: D0 04              BNE   LAB_212C          ; if not = skip next test
  4600                        
  4601 00:E8D0: C5 7F              CMP   Earryl            ; compare with array mem end low byte
  4602 00:E8D2: 90 0B              BCC   LAB_2137          ; do out of memory error if less
  4603                        
  4604                        LAB_212C
  4605 00:E8D4: 85 81              STA   Sstorl            ; save bottom of string space low byte
  4606 00:E8D6: 84 82              STY   Sstorh            ; save bottom of string space high byte
  4607 00:E8D8: 85 83              STA   Sutill            ; save string utility ptr low byte
  4608 00:E8DA: 84 84              STY   Sutilh            ; save string utility ptr high byte
  4609 00:E8DC: AA                 TAX                     ; copy low byte to X
  4610 00:E8DD: 68                 PLA                     ; get string length back
  4611 00:E8DE: 60                 RTS
  4612                        
  4613                        LAB_2137
  4614 00:E8DF: A2 0C              LDX   #$0C              ; error code $0C ("Out of memory" error)
  4615 00:E8E1: A5 60              LDA   Gclctd            ; get garbage collected flag
  4616 00:E8E3: 30 B8              BMI   LAB_20F5          ; if set then do error code X
  4617                        
  4618 00:E8E5: 20 EF E8           JSR   LAB_GARB          ; else go do garbage collection
  4619 00:E8E8: A9 80              LDA   #$80              ; flag for garbage collected
  4620 00:E8EA: 85 60              STA   Gclctd            ; set garbage collected flag
  4621 00:E8EC: 68                 PLA                     ; pull length
  4622 00:E8ED: D0 D0              BNE   LAB_2117          ; go try again (loop always, length should never be = $00)
  4623                        
  4624                        ; garbage collection routine
  4625                        
  4626                        LAB_GARB
  4627 00:E8EF: A6 85              LDX   Ememl             ; get end of mem low byte
  4628 00:E8F1: A5 86              LDA   Ememh             ; get end of mem high byte
  4629                        
  4630                        ; re-run routine from last ending
  4631                        
  4632                        LAB_214B
  4633 00:E8F3: 86 81              STX   Sstorl            ; set string storage low byte
  4634 00:E8F5: 85 82              STA   Sstorh            ; set string storage high byte
  4635 00:E8F7: A0 00              LDY   #$00              ; clear index
  4636 00:E8F9: 84 9D              STY   garb_h            ; clear working pointer high byte (flag no strings to move)
  4637                        ; *** begin patch  2.22p5.5  garbage collection may overlap temporary strings
  4638                        ; *** add
  4639 00:E8FB: 84 9C              STY   garb_l            ; clear working pointer low byte (flag no strings to move)
  4640                        ; *** begin patch  2.22p5.5  garbage collection may overlap temporary strings
  4641 00:E8FD: A5 7F              LDA   Earryl            ; get array mem end low byte
  4642 00:E8FF: A6 80              LDX   Earryh            ; get array mem end high byte
  4643 00:E901: 85 AA              STA   Histrl            ; save as highest string low byte
  4644 00:E903: 86 AB              STX   Histrh            ; save as highest string high byte
  4645 00:E905: A9 68              LDA   #des_sk           ; set descriptor stack pointer
  4646 00:E907: 85 71              STA   ut1_pl            ; save descriptor stack pointer low byte
  4647 00:E909: 84 72              STY   ut1_ph            ; save descriptor stack pointer high byte ($00)
  4648                        LAB_2161
  4649 00:E90B: C5 65              CMP   next_s            ; compare with descriptor stack pointer
  4650 00:E90D: F0 05              BEQ   LAB_216A          ; branch if =
  4651                        
  4652 00:E90F: 20 75 E9           JSR   LAB_21D7          ; go garbage collect descriptor stack
  4653 00:E912: F0 F7              BEQ   LAB_2161          ; loop always
  4654                        
  4655                                                      ; done stacked strings, now do string vars
  4656                        LAB_216A
  4657 00:E914: 06 A0              ASL   g_step            ; set step size = $06
  4658 00:E916: A5 7B              LDA   Svarl             ; get start of vars low byte
  4659 00:E918: A6 7C              LDX   Svarh             ; get start of vars high byte
  4660 00:E91A: 85 71              STA   ut1_pl            ; save as pointer low byte
  4661 00:E91C: 86 72              STX   ut1_ph            ; save as pointer high byte
  4662                        LAB_2176
  4663 00:E91E: E4 7E              CPX   Sarryh            ; compare start of arrays high byte
  4664 00:E920: D0 04              BNE   LAB_217E          ; branch if no high byte match
  4665                        
  4666 00:E922: C5 7D              CMP   Sarryl            ; else compare start of arrays low byte
  4667 00:E924: F0 05              BEQ   LAB_2183          ; branch if = var mem end
  4668                        
  4669                        LAB_217E
  4670 00:E926: 20 6F E9           JSR   LAB_21D1          ; go garbage collect strings
  4671 00:E929: F0 F3              BEQ   LAB_2176          ; loop always
  4672                        
  4673                                                      ; done string vars, now do string arrays
  4674                        LAB_2183
  4675 00:E92B: 85 A4              STA   Nbendl            ; save start of arrays low byte as working pointer
  4676 00:E92D: 86 A5              STX   Nbendh            ; save start of arrays high byte as working pointer
  4677 00:E92F: A9 04              LDA   #$04              ; set step size
  4678 00:E931: 85 A0              STA   g_step            ; save step size
  4679                        LAB_218B
  4680 00:E933: A5 A4              LDA   Nbendl            ; get pointer low byte
  4681 00:E935: A6 A5              LDX   Nbendh            ; get pointer high byte
  4682                        LAB_218F
  4683 00:E937: E4 80              CPX   Earryh            ; compare with array mem end high byte
  4684 00:E939: D0 04              BNE   LAB_219A          ; branch if not at end
  4685                        
  4686 00:E93B: C5 7F              CMP   Earryl            ; else compare with array mem end low byte
  4687 00:E93D: F0 75              BEQ   LAB_2216          ; tidy up and exit if at end
  4688                        
  4689                        LAB_219A
  4690 00:E93F: 85 71              STA   ut1_pl            ; save pointer low byte
  4691 00:E941: 86 72              STX   ut1_ph            ; save pointer high byte
  4692 00:E943: A0 02              LDY   #$02              ; set index
  4693 00:E945: B1 71              LDA   (ut1_pl),Y        ; get array size low byte
  4694 00:E947: 65 A4              ADC   Nbendl            ; add start of this array low byte
  4695 00:E949: 85 A4              STA   Nbendl            ; save start of next array low byte
  4696 00:E94B: C8                 INY                     ; increment index
  4697 00:E94C: B1 71              LDA   (ut1_pl),Y        ; get array size high byte
  4698 00:E94E: 65 A5              ADC   Nbendh            ; add start of this array high byte
  4699 00:E950: 85 A5              STA   Nbendh            ; save start of next array high byte
  4700 00:E952: A0 01              LDY   #$01              ; set index
  4701 00:E954: B1 71              LDA   (ut1_pl),Y        ; get name second byte
  4702 00:E956: 10 DB              BPL   LAB_218B          ; skip if not string array
  4703                        
  4704                        ; was string array so ..
  4705                        
  4706 00:E958: A0 04              LDY   #$04              ; set index
  4707 00:E95A: B1 71              LDA   (ut1_pl),Y        ; get # of dimensions
  4708 00:E95C: 0A                 ASL                     ; *2
  4709 00:E95D: 69 05              ADC   #$05              ; +5 (array header size)
  4710 00:E95F: 20 A7 E9           JSR   LAB_2208          ; go set up for first element
  4711                        LAB_21C4
  4712 00:E962: E4 A5              CPX   Nbendh            ; compare with start of next array high byte
  4713 00:E964: D0 04              BNE   LAB_21CC          ; branch if <> (go do this array)
  4714                        
  4715 00:E966: C5 A4              CMP   Nbendl            ; else compare element pointer low byte with next array
  4716                                                      ; low byte
  4717 00:E968: F0 CD              BEQ   LAB_218F          ; if equal then go do next array
  4718                        
  4719                        LAB_21CC
  4720 00:E96A: 20 75 E9           JSR   LAB_21D7          ; go defrag array strings
  4721 00:E96D: F0 F3              BEQ   LAB_21C4          ; go do next array string (loop always)
  4722                        
  4723                        ; defrag string variables
  4724                        ; enter with XA = variable pointer
  4725                        ; return with XA = next variable pointer
  4726                        
  4727                        LAB_21D1
  4728 00:E96F: C8                 INY                     ; increment index (Y was $00)
  4729 00:E970: B1 71              LDA   (ut1_pl),Y        ; get var name byte 2
  4730 00:E972: 10 30              BPL   LAB_2206          ; if not string, step pointer to next var and return
  4731                        
  4732 00:E974: C8                 INY                     ; else increment index
  4733                        LAB_21D7
  4734 00:E975: B1 71              LDA   (ut1_pl),Y        ; get string length
  4735 00:E977: F0 2B              BEQ   LAB_2206          ; if null, step pointer to next string and return
  4736                        
  4737 00:E979: C8                 INY                     ; else increment index
  4738 00:E97A: B1 71              LDA   (ut1_pl),Y        ; get string pointer low byte
  4739 00:E97C: AA                 TAX                     ; copy to X
  4740 00:E97D: C8                 INY                     ; increment index
  4741 00:E97E: B1 71              LDA   (ut1_pl),Y        ; get string pointer high byte
  4742 00:E980: C5 82              CMP   Sstorh            ; compare bottom of string space high byte
  4743 00:E982: 90 06              BCC   LAB_21EC          ; branch if less
  4744                        
  4745 00:E984: D0 1E              BNE   LAB_2206          ; if greater, step pointer to next string and return
  4746                        
  4747                                                      ; high bytes were = so compare low bytes
  4748 00:E986: E4 81              CPX   Sstorl            ; compare bottom of string space low byte
  4749 00:E988: B0 1A              BCS   LAB_2206          ; if >=, step pointer to next string and return
  4750                        
  4751                                                      ; string pointer is < string storage pointer (pos in mem)
  4752                        LAB_21EC
  4753 00:E98A: C5 AB              CMP   Histrh            ; compare to highest string high byte
  4754 00:E98C: 90 17              BCC   LAB_2207          ; if <, step pointer to next string and return
  4755                        
  4756 00:E98E: D0 04              BNE   LAB_21F6          ; if > update pointers, step to next and return
  4757                        
  4758                                                      ; high bytes were = so compare low bytes
  4759 00:E990: E4 AA              CPX   Histrl            ; compare to highest string low byte
  4760 00:E992: 90 11              BCC   LAB_2207          ; if <, step pointer to next string and return
  4761                        
  4762                                                      ; string is in string memory space
  4763                        LAB_21F6
  4764 00:E994: 86 AA              STX   Histrl            ; save as new highest string low byte
  4765 00:E996: 85 AB              STA   Histrh            ; save as new highest string high byte
  4766 00:E998: A5 71              LDA   ut1_pl            ; get start of vars(descriptors) low byte
  4767 00:E99A: A6 72              LDX   ut1_ph            ; get start of vars(descriptors) high byte
  4768 00:E99C: 85 9C              STA   garb_l            ; save as working pointer low byte
  4769 00:E99E: 86 9D              STX   garb_h            ; save as working pointer high byte
  4770 00:E9A0: 88                 DEY                     ; decrement index DIFFERS
  4771 00:E9A1: 88                 DEY                     ; decrement index (should point to descriptor start)
  4772 00:E9A2: 84 A2              STY   g_indx            ; save index pointer
  4773                        
  4774                                                      ; step pointer to next string
  4775                        LAB_2206
  4776 00:E9A4: 18                 CLC                     ; clear carry for add
  4777                        LAB_2207
  4778 00:E9A5: A5 A0              LDA   g_step            ; get step size
  4779                        LAB_2208
  4780 00:E9A7: 65 71              ADC   ut1_pl            ; add pointer low byte
  4781 00:E9A9: 85 71              STA   ut1_pl            ; save pointer low byte
  4782 00:E9AB: 90 02              BCC   LAB_2211          ; branch if no overflow
  4783                        
  4784 00:E9AD: E6 72              INC   ut1_ph            ; else increment high byte
  4785                        LAB_2211
  4786 00:E9AF: A6 72              LDX   ut1_ph            ; get pointer high byte
  4787 00:E9B1: A0 00              LDY   #$00              ; clear Y
  4788 00:E9B3: 60                 RTS
  4789                        
  4790                        ; search complete, now either exit or set-up and move string
  4791                        
  4792                        LAB_2216
  4793 00:E9B4: C6 A0              DEC   g_step            ; decrement step size (now $03 for descriptor stack)
  4794                        ; *** begin patch  2.22p5.5  garbage collection may overlap temporary strings
  4795                        ; *** replace
  4796                        ;      LDX   garb_h            ; get string to move high byte
  4797                        ; *** with
  4798 00:E9B6: A5 9D              LDA   garb_h            ; any string to move?
  4799 00:E9B8: 05 9C              ORA   garb_l
  4800                        ; *** end   patch  2.22p5.5  garbage collection may overlap temporary strings
  4801 00:E9BA: F0 F3              BEQ   LAB_2211          ; exit if nothing to move
  4802                        
  4803 00:E9BC: A4 A2              LDY   g_indx            ; get index byte back (points to descriptor)
  4804 00:E9BE: 18                 CLC                     ; clear carry for add
  4805 00:E9BF: B1 9C              LDA   (garb_l),Y        ; get string length
  4806 00:E9C1: 65 AA              ADC   Histrl            ; add highest string low byte
  4807 00:E9C3: 85 A6              STA   Obendl            ; save old block end low pointer
  4808 00:E9C5: A5 AB              LDA   Histrh            ; get highest string high byte
  4809 00:E9C7: 69 00              ADC   #$00              ; add any carry
  4810 00:E9C9: 85 A7              STA   Obendh            ; save old block end high byte
  4811 00:E9CB: A5 81              LDA   Sstorl            ; get bottom of string space low byte
  4812 00:E9CD: A6 82              LDX   Sstorh            ; get bottom of string space high byte
  4813 00:E9CF: 85 A4              STA   Nbendl            ; save new block end low byte
  4814 00:E9D1: 86 A5              STX   Nbendh            ; save new block end high byte
  4815 00:E9D3: 20 C8 D7           JSR   LAB_11D6          ; open up space in memory, don't set array end
  4816 00:E9D6: A4 A2              LDY   g_indx            ; get index byte
  4817 00:E9D8: C8                 INY                     ; point to descriptor low byte
  4818 00:E9D9: A5 A4              LDA   Nbendl            ; get string pointer low byte
  4819 00:E9DB: 91 9C              STA   (garb_l),Y        ; save new string pointer low byte
  4820 00:E9DD: AA                 TAX                     ; copy string pointer low byte
  4821 00:E9DE: E6 A5              INC   Nbendh            ; correct high byte (move sets high byte -1)
  4822 00:E9E0: A5 A5              LDA   Nbendh            ; get new string pointer high byte
  4823 00:E9E2: C8                 INY                     ; point to descriptor high byte
  4824 00:E9E3: 91 9C              STA   (garb_l),Y        ; save new string pointer high byte
  4825 00:E9E5: 4C F3 E8           JMP   LAB_214B          ; re-run routine from last ending
  4826                                                      ; (but don't collect this string)
  4827                        
  4828                        ; concatenate
  4829                        ; add strings, string 1 is in descriptor des_pl, string 2 is in line
  4830                        
  4831                        LAB_224D
  4832 00:E9E8: A5 AF              LDA   des_ph            ; get descriptor pointer high byte
  4833 00:E9EA: 48                 PHA                     ; put on stack
  4834 00:E9EB: A5 AE              LDA   des_pl            ; get descriptor pointer low byte
  4835 00:E9ED: 48                 PHA                     ; put on stack
  4836                        ; *** begin patch  2.22p5.4  concatenate MINUS or NOT() crashes EhBASIC  ***
  4837                        ; *** add extra label to verify originating function
  4838                        LAB_224Da
  4839                        ; *** end patch    2.22p5.4  concatenate MINUS or NOT() crashes EhBASIC  ***
  4840 00:E9EE: 20 CD E2           JSR   LAB_GVAL          ; get value from line
  4841 00:E9F1: 20 D2 E1           JSR   LAB_CTST          ; check if source is string, else do type mismatch
  4842 00:E9F4: 68                 PLA                     ; get descriptor pointer low byte back
  4843 00:E9F5: 85 B8              STA   ssptr_l           ; set pointer low byte
  4844 00:E9F7: 68                 PLA                     ; get descriptor pointer high byte back
  4845 00:E9F8: 85 B9              STA   ssptr_h           ; set pointer high byte
  4846 00:E9FA: A0 00              LDY   #$00              ; clear index
  4847 00:E9FC: B1 B8              LDA   (ssptr_l),Y       ; get length_1 from descriptor
  4848 00:E9FE: 18                 CLC                     ; clear carry for add
  4849 00:E9FF: 71 AE              ADC   (des_pl),Y        ; add length_2
  4850 00:EA01: 90 05              BCC   LAB_226D          ; branch if no overflow
  4851                        
  4852 00:EA03: A2 1A              LDX   #$1A              ; else set error code $1A ("String too long" error)
  4853 00:EA05: 4C 3F D8           JMP   LAB_XERR          ; do error #X, then warm start
  4854                        
  4855                        LAB_226D
  4856 00:EA08: 20 40 E8           JSR   LAB_209C          ; copy des_pl/h to des_2l/h and make string space A bytes
  4857                                                      ; long
  4858 00:EA0B: 20 25 EA           JSR   LAB_228A          ; copy string from descriptor (sdescr) to (Sutill)
  4859 00:EA0E: A5 9E              LDA   des_2l            ; get descriptor pointer low byte
  4860 00:EA10: A4 9F              LDY   des_2h            ; get descriptor pointer high byte
  4861 00:EA12: 20 56 EA           JSR   LAB_22BA          ; pop (YA) descriptor off stack or from top of string space
  4862                                                      ; returns with A = length, ut1_pl = pointer low byte,
  4863                                                      ; ut1_ph = pointer high byte
  4864 00:EA15: 20 37 EA           JSR   LAB_229C          ; store string A bytes long from (ut1_pl) to (Sutill)
  4865 00:EA18: A5 B8              LDA   ssptr_l           ;.set descriptor pointer low byte
  4866 00:EA1A: A4 B9              LDY   ssptr_h           ;.set descriptor pointer high byte
  4867 00:EA1C: 20 56 EA           JSR   LAB_22BA          ; pop (YA) descriptor off stack or from top of string space
  4868                                                      ; returns with A = length, X=ut1_pl=pointer low byte,
  4869                                                      ; Y=ut1_ph=pointer high byte
  4870 00:EA1F: 20 95 E8           JSR   LAB_RTST          ; check for space on descriptor stack then put string
  4871                                                      ; address and length on descriptor stack and update stack
  4872                                                      ; pointers
  4873 00:EA22: 4C F8 E1           JMP   LAB_1ADB          ;.continue evaluation
  4874                        
  4875                        ; copy string from descriptor (sdescr) to (Sutill)
  4876                        
  4877                        LAB_228A
  4878 00:EA25: A0 00              LDY   #$00              ; clear index
  4879 00:EA27: B1 B8              LDA   (sdescr),Y        ; get string length
  4880 00:EA29: 48                 PHA                     ; save on stack
  4881 00:EA2A: C8                 INY                     ; increment index
  4882 00:EA2B: B1 B8              LDA   (sdescr),Y        ; get source string pointer low byte
  4883 00:EA2D: AA                 TAX                     ; copy to X
  4884 00:EA2E: C8                 INY                     ; increment index
  4885 00:EA2F: B1 B8              LDA   (sdescr),Y        ; get source string pointer high byte
  4886 00:EA31: A8                 TAY                     ; copy to Y
  4887 00:EA32: 68                 PLA                     ; get length back
  4888                        
  4889                        ; store string A bytes long from YX to (Sutill)
  4890                        
  4891                        LAB_2298
  4892 00:EA33: 86 71              STX   ut1_pl            ; save source string pointer low byte
  4893 00:EA35: 84 72              STY   ut1_ph            ; save source string pointer high byte
  4894                        
  4895                        ; store string A bytes long from (ut1_pl) to (Sutill)
  4896                        
  4897                        LAB_229C
  4898 00:EA37: AA                 TAX                     ; copy length to index (don't count with Y)
  4899 00:EA38: F0 14              BEQ   LAB_22B2          ; branch if = $0 (null string) no need to add zero length
  4900                        
  4901 00:EA3A: A0 00              LDY   #$00              ; zero pointer (copy forward)
  4902                        LAB_22A0
  4903 00:EA3C: B1 71              LDA   (ut1_pl),Y        ; get source byte
  4904 00:EA3E: 91 83              STA   (Sutill),Y        ; save destination byte
  4905                        
  4906 00:EA40: C8                 INY                     ; increment index
  4907 00:EA41: CA                 DEX                     ; decrement counter
  4908 00:EA42: D0 F8              BNE   LAB_22A0          ; loop while <> 0
  4909                        
  4910 00:EA44: 98                 TYA                     ; restore length from Y
  4911                        LAB_22A9
  4912 00:EA45: 18                 CLC                     ; clear carry for add
  4913 00:EA46: 65 83              ADC   Sutill            ; add string utility ptr low byte
  4914 00:EA48: 85 83              STA   Sutill            ; save string utility ptr low byte
  4915 00:EA4A: 90 02              BCC   LAB_22B2          ; branch if no carry
  4916                        
  4917 00:EA4C: E6 84              INC   Sutilh            ; else increment string utility ptr high byte
  4918                        LAB_22B2
  4919 00:EA4E: 60                 RTS
  4920                        
  4921                        ; evaluate string
  4922                        
  4923                        LAB_EVST
  4924 00:EA4F: 20 D2 E1           JSR   LAB_CTST          ; check if source is string, else do type mismatch
  4925                        
  4926                        ; pop string off descriptor stack, or from top of string space
  4927                        ; returns with A = length, X=pointer low byte, Y=pointer high byte
  4928                        
  4929                        LAB_22B6
  4930 00:EA52: A5 AE              LDA   des_pl            ; get descriptor pointer low byte
  4931 00:EA54: A4 AF              LDY   des_ph            ; get descriptor pointer high byte
  4932                        
  4933                        ; pop (YA) descriptor off stack or from top of string space
  4934                        ; returns with A = length, X=ut1_pl=pointer low byte, Y=ut1_ph=pointer high byte
  4935                        
  4936                        LAB_22BA
  4937 00:EA56: 85 71              STA   ut1_pl            ; save descriptor pointer low byte
  4938 00:EA58: 84 72              STY   ut1_ph            ; save descriptor pointer high byte
  4939 00:EA5A: 20 87 EA           JSR   LAB_22EB          ; clean descriptor stack, YA = pointer
  4940 00:EA5D: 08                 PHP                     ; save status flags
  4941 00:EA5E: A0 00              LDY   #$00              ; clear index
  4942 00:EA60: B1 71              LDA   (ut1_pl),Y        ; get length from string descriptor
  4943 00:EA62: 48                 PHA                     ; put on stack
  4944 00:EA63: C8                 INY                     ; increment index
  4945 00:EA64: B1 71              LDA   (ut1_pl),Y        ; get string pointer low byte from descriptor
  4946 00:EA66: AA                 TAX                     ; copy to X
  4947 00:EA67: C8                 INY                     ; increment index
  4948 00:EA68: B1 71              LDA   (ut1_pl),Y        ; get string pointer high byte from descriptor
  4949 00:EA6A: A8                 TAY                     ; copy to Y
  4950 00:EA6B: 68                 PLA                     ; get string length back
  4951 00:EA6C: 28                 PLP                     ; restore status
  4952 00:EA6D: D0 13              BNE   LAB_22E6          ; branch if pointer <> last_sl,last_sh
  4953                        
  4954 00:EA6F: C4 82              CPY   Sstorh            ; compare bottom of string space high byte
  4955 00:EA71: D0 0F              BNE   LAB_22E6          ; branch if <>
  4956                        
  4957 00:EA73: E4 81              CPX   Sstorl            ; else compare bottom of string space low byte
  4958 00:EA75: D0 0B              BNE   LAB_22E6          ; branch if <>
  4959                        
  4960 00:EA77: 48                 PHA                     ; save string length
  4961 00:EA78: 18                 CLC                     ; clear carry for add
  4962 00:EA79: 65 81              ADC   Sstorl            ; add bottom of string space low byte
  4963 00:EA7B: 85 81              STA   Sstorl            ; save bottom of string space low byte
  4964 00:EA7D: 90 02              BCC   LAB_22E5          ; skip increment if no overflow
  4965                        
  4966 00:EA7F: E6 82              INC   Sstorh            ; increment bottom of string space high byte
  4967                        LAB_22E5
  4968 00:EA81: 68                 PLA                     ; restore string length
  4969                        LAB_22E6
  4970 00:EA82: 86 71              STX   ut1_pl            ; save string pointer low byte
  4971 00:EA84: 84 72              STY   ut1_ph            ; save string pointer high byte
  4972 00:EA86: 60                 RTS
  4973                        
  4974                        ; clean descriptor stack, YA = pointer
  4975                        ; checks if AY is on the descriptor stack, if so does a stack discard
  4976                        
  4977                        LAB_22EB
  4978 00:EA87: C4 67              CPY   last_sh           ; compare pointer high byte
  4979 00:EA89: D0 0C              BNE   LAB_22FB          ; exit if <>
  4980                        
  4981 00:EA8B: C5 66              CMP   last_sl           ; compare pointer low byte
  4982 00:EA8D: D0 08              BNE   LAB_22FB          ; exit if <>
  4983                        
  4984 00:EA8F: 85 65              STA   next_s            ; save descriptor stack pointer
  4985 00:EA91: E9 03              SBC   #$03              ; -3
  4986 00:EA93: 85 66              STA   last_sl           ; save low byte -3
  4987 00:EA95: A0 00              LDY   #$00              ; clear high byte
  4988                        LAB_22FB
  4989 00:EA97: 60                 RTS
  4990                        
  4991                        ; perform CHR$()
  4992                        
  4993                        LAB_CHRS
  4994 00:EA98: 20 A3 EB           JSR   LAB_EVBY          ; evaluate byte expression, result in X
  4995 00:EA9B: 8A                 TXA                     ; copy to A
  4996 00:EA9C: 48                 PHA                     ; save character
  4997 00:EA9D: A9 01              LDA   #$01              ; string is single byte
  4998 00:EA9F: 20 48 E8           JSR   LAB_MSSP          ; make string space A bytes long A=$AC=length,
  4999                                                      ; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
  5000 00:EAA2: 68                 PLA                     ; get character back
  5001 00:EAA3: A0 00              LDY   #$00              ; clear index
  5002 00:EAA5: 91 AD              STA   (str_pl),Y        ; save byte in string (byte IS string!)
  5003 00:EAA7: 4C 95 E8           JMP   LAB_RTST          ; check for space on descriptor stack then put string
  5004                                                      ; address and length on descriptor stack and update stack
  5005                                                      ; pointers
  5006                        
  5007                        ; perform LEFT$()
  5008                        
  5009                        LAB_LEFT
  5010 00:EAAA: 48                 PHA                     ; push byte parameter
  5011 00:EAAB: 20 0B EB           JSR   LAB_236F          ; pull string data and byte parameter from stack
  5012                                                      ; return pointer in des_2l/h, byte in A (and X), Y=0
  5013 00:EAAE: D1 9E              CMP   (des_2l),Y        ; compare byte parameter with string length
  5014 00:EAB0: 98                 TYA                     ; clear A
  5015 00:EAB1: F0 09              BEQ   LAB_2316          ; go do string copy (branch always)
  5016                        
  5017                        ; perform RIGHT$()
  5018                        
  5019                        LAB_RIGHT
  5020 00:EAB3: 48                 PHA                     ; push byte parameter
  5021 00:EAB4: 20 0B EB           JSR   LAB_236F          ; pull string data and byte parameter from stack
  5022                                                      ; return pointer in des_2l/h, byte in A (and X), Y=0
  5023 00:EAB7: 18                 CLC                     ; clear carry for add-1
  5024 00:EAB8: F1 9E              SBC   (des_2l),Y        ; subtract string length
  5025 00:EABA: 49 FF              EOR   #$FF              ; invert it (A=LEN(expression$)-l)
  5026                        
  5027                        LAB_2316
  5028 00:EABC: 90 04              BCC   LAB_231C          ; branch if string length > byte parameter
  5029                        
  5030 00:EABE: B1 9E              LDA   (des_2l),Y        ; else make parameter = length
  5031 00:EAC0: AA                 TAX                     ; copy to byte parameter copy
  5032 00:EAC1: 98                 TYA                     ; clear string start offset
  5033                        LAB_231C
  5034 00:EAC2: 48                 PHA                     ; save string start offset
  5035                        LAB_231D
  5036 00:EAC3: 8A                 TXA                     ; copy byte parameter (or string length if <)
  5037                        LAB_231E
  5038 00:EAC4: 48                 PHA                     ; save string length
  5039 00:EAC5: 20 48 E8           JSR   LAB_MSSP          ; make string space A bytes long A=$AC=length,
  5040                                                      ; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
  5041 00:EAC8: A5 9E              LDA   des_2l            ; get descriptor pointer low byte
  5042 00:EACA: A4 9F              LDY   des_2h            ; get descriptor pointer high byte
  5043 00:EACC: 20 56 EA           JSR   LAB_22BA          ; pop (YA) descriptor off stack or from top of string space
  5044                                                      ; returns with A = length, X=ut1_pl=pointer low byte,
  5045                                                      ; Y=ut1_ph=pointer high byte
  5046 00:EACF: 68                 PLA                     ; get string length back
  5047 00:EAD0: A8                 TAY                     ; copy length to Y
  5048 00:EAD1: 68                 PLA                     ; get string start offset back
  5049 00:EAD2: 18                 CLC                     ; clear carry for add
  5050 00:EAD3: 65 71              ADC   ut1_pl            ; add start offset to string start pointer low byte
  5051 00:EAD5: 85 71              STA   ut1_pl            ; save string start pointer low byte
  5052 00:EAD7: 90 02              BCC   LAB_2335          ; branch if no overflow
  5053                        
  5054 00:EAD9: E6 72              INC   ut1_ph            ; else increment string start pointer high byte
  5055                        LAB_2335
  5056 00:EADB: 98                 TYA                     ; copy length to A
  5057 00:EADC: 20 37 EA           JSR   LAB_229C          ; store string A bytes long from (ut1_pl) to (Sutill)
  5058 00:EADF: 4C 95 E8           JMP   LAB_RTST          ; check for space on descriptor stack then put string
  5059                                                      ; address and length on descriptor stack and update stack
  5060                                                      ; pointers
  5061                        
  5062                        ; perform MID$()
  5063                        
  5064                        LAB_MIDS
  5065 00:EAE2: 48                 PHA                     ; push byte parameter
  5066 00:EAE3: A9 FF              LDA   #$FF              ; set default length = 255
  5067 00:EAE5: 85 AF              STA   mids_l            ; save default length
  5068 00:EAE7: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  5069 00:EAEA: C9 29              CMP   #')'              ; compare with ")"
  5070 00:EAEC: F0 06              BEQ   LAB_2358          ; branch if = ")" (skip second byte get)
  5071                        
  5072 00:EAEE: 20 FE E2           JSR   LAB_1C01          ; scan for "," , else do syntax error then warm start
  5073 00:EAF1: 20 A0 EB           JSR   LAB_GTBY          ; get byte parameter (use copy in mids_l)
  5074                        LAB_2358
  5075 00:EAF4: 20 0B EB           JSR   LAB_236F          ; pull string data and byte parameter from stack
  5076                                                      ; return pointer in des_2l/h, byte in A (and X), Y=0
  5077 00:EAF7: CA                 DEX                     ; decrement start index
  5078 00:EAF8: 8A                 TXA                     ; copy to A
  5079 00:EAF9: 48                 PHA                     ; save string start offset
  5080 00:EAFA: 18                 CLC                     ; clear carry for sub-1
  5081 00:EAFB: A2 00              LDX   #$00              ; clear output string length
  5082 00:EAFD: F1 9E              SBC   (des_2l),Y        ; subtract string length
  5083 00:EAFF: B0 C2              BCS   LAB_231D          ; if start>string length go do null string
  5084                        
  5085 00:EB01: 49 FF              EOR   #$FF              ; complement -length
  5086 00:EB03: C5 AF              CMP   mids_l            ; compare byte parameter
  5087 00:EB05: 90 BD              BCC   LAB_231E          ; if length>remaining string go do RIGHT$
  5088                        
  5089 00:EB07: A5 AF              LDA   mids_l            ; get length byte
  5090 00:EB09: B0 B9              BCS   LAB_231E          ; go do string copy (branch always)
  5091                        
  5092                        ; pull string data and byte parameter from stack
  5093                        ; return pointer in des_2l/h, byte in A (and X), Y=0
  5094                        
  5095                        LAB_236F
  5096 00:EB0B: 20 EF E2           JSR   LAB_1BFB          ; scan for ")" , else do syntax error then warm start
  5097 00:EB0E: 68                 PLA                     ; pull return address low byte (return address)
  5098 00:EB0F: 85 A2              STA   Fnxjpl            ; save functions jump vector low byte
  5099 00:EB11: 68                 PLA                     ; pull return address high byte (return address)
  5100 00:EB12: 85 A3              STA   Fnxjph            ; save functions jump vector high byte
  5101 00:EB14: 68                 PLA                     ; pull byte parameter
  5102 00:EB15: AA                 TAX                     ; copy byte parameter to X
  5103 00:EB16: 68                 PLA                     ; pull string pointer low byte
  5104 00:EB17: 85 9E              STA   des_2l            ; save it
  5105 00:EB19: 68                 PLA                     ; pull string pointer high byte
  5106 00:EB1A: 85 9F              STA   des_2h            ; save it
  5107 00:EB1C: A0 00              LDY   #$00              ; clear index
  5108 00:EB1E: 8A                 TXA                     ; copy byte parameter
  5109 00:EB1F: F0 79              BEQ   LAB_23A8          ; if null do function call error then warm start
  5110                        
  5111 00:EB21: E6 A2              INC   Fnxjpl            ; increment function jump vector low byte
  5112                                                      ; (JSR pushes return addr-1. this is all very nice
  5113                                                      ; but will go tits up if either call is on a page
  5114                                                      ; boundary!)
  5115 00:EB23: 6C A2 00           JMP   (Fnxjpl)          ; in effect, RTS
  5116                        
  5117                        ; perform LCASE$()
  5118                        
  5119                        LAB_LCASE
  5120 00:EB26: 20 4F EA           JSR   LAB_EVST          ; evaluate string
  5121 00:EB29: 85 AC              STA   str_ln            ; set string length
  5122 00:EB2B: A8                 TAY                     ; copy length to Y
  5123 00:EB2C: F0 38              BEQ   NoString          ; branch if null string
  5124                        
  5125 00:EB2E: 20 48 E8           JSR   LAB_MSSP          ; make string space A bytes long A=length,
  5126                                                      ; X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
  5127 00:EB31: 86 AD              STX   str_pl            ; save string pointer low byte
  5128 00:EB33: 84 AE              STY   str_ph            ; save string pointer high byte
  5129 00:EB35: A8                 TAY                     ; get string length back
  5130                        
  5131                        LC_loop
  5132 00:EB36: 88                 DEY                     ; decrement index
  5133 00:EB37: B1 71              LDA   (ut1_pl),Y        ; get byte from string
  5134 00:EB39: 20 30 E5           JSR   LAB_1D82          ; is character "A" to "Z"
  5135 00:EB3C: 90 02              BCC   NoUcase           ; branch if not upper case alpha
  5136                        
  5137 00:EB3E: 09 20              ORA   #$20              ; convert upper to lower case
  5138                        NoUcase
  5139 00:EB40: 91 83              STA   (Sutill),Y        ; save byte back to string
  5140 00:EB42: 98                 TYA                     ; test index
  5141 00:EB43: D0 F1              BNE   LC_loop           ; loop if not all done
  5142                        
  5143 00:EB45: F0 1F              BEQ   NoString          ; tidy up and exit, branch always
  5144                        
  5145                        ; perform UCASE$()
  5146                        
  5147                        LAB_UCASE
  5148 00:EB47: 20 4F EA           JSR   LAB_EVST          ; evaluate string
  5149 00:EB4A: 85 AC              STA   str_ln            ; set string length
  5150 00:EB4C: A8                 TAY                     ; copy length to Y
  5151 00:EB4D: F0 17              BEQ   NoString          ; branch if null string
  5152                        
  5153 00:EB4F: 20 48 E8           JSR   LAB_MSSP          ; make string space A bytes long A=length,
  5154                                                      ; X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
  5155 00:EB52: 86 AD              STX   str_pl            ; save string pointer low byte
  5156 00:EB54: 84 AE              STY   str_ph            ; save string pointer high byte
  5157 00:EB56: A8                 TAY                     ; get string length back
  5158                        
  5159                        UC_loop
  5160 00:EB57: 88                 DEY                     ; decrement index
  5161 00:EB58: B1 71              LDA   (ut1_pl),Y        ; get byte from string
  5162 00:EB5A: 20 2C E5           JSR   LAB_CASC          ; is character "a" to "z" (or "A" to "Z")
  5163 00:EB5D: 90 02              BCC   NoLcase           ; branch if not alpha
  5164                        
  5165 00:EB5F: 29 DF              AND   #$DF              ; convert lower to upper case
  5166                        NoLcase
  5167 00:EB61: 91 83              STA   (Sutill),Y        ; save byte back to string
  5168 00:EB63: 98                 TYA                     ; test index
  5169 00:EB64: D0 F1              BNE   UC_loop           ; loop if not all done
  5170                        
  5171                        NoString
  5172 00:EB66: 4C 95 E8           JMP   LAB_RTST          ; check for space on descriptor stack then put string
  5173                                                      ; address and length on descriptor stack and update stack
  5174                                                      ; pointers
  5175                        
  5176                        ; perform SADD()
  5177                        
  5178                        LAB_SADD
  5179 00:EB69: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  5180 00:EB6C: 20 B8 E4           JSR   LAB_GVAR          ; get var address
  5181                        
  5182 00:EB6F: 20 EF E2           JSR   LAB_1BFB          ; scan for ")", else do syntax error then warm start
  5183 00:EB72: 20 D2 E1           JSR   LAB_CTST          ; check if source is string, else do type mismatch
  5184                        
  5185 00:EB75: A0 02              LDY   #$02              ; index to string pointer high byte
  5186 00:EB77: B1 95              LDA   (Cvaral),Y        ; get string pointer high byte
  5187 00:EB79: AA                 TAX                     ; copy string pointer high byte to X
  5188 00:EB7A: 88                 DEY                     ; index to string pointer low byte
  5189 00:EB7B: B1 95              LDA   (Cvaral),Y        ; get string pointer low byte
  5190 00:EB7D: A8                 TAY                     ; copy string pointer low byte to Y
  5191 00:EB7E: 8A                 TXA                     ; copy string pointer high byte to A
  5192 00:EB7F: 4C 67 E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  5193                        
  5194                        ; perform LEN()
  5195                        
  5196                        LAB_LENS
  5197 00:EB82: 20 88 EB           JSR   LAB_ESGL          ; evaluate string, get length in A (and Y)
  5198 00:EB85: 4C 74 E7           JMP   LAB_1FD0          ; convert Y to byte in FAC1 and return
  5199                        
  5200                        ; evaluate string, get length in Y
  5201                        
  5202                        LAB_ESGL
  5203 00:EB88: 20 4F EA           JSR   LAB_EVST          ; evaluate string
  5204 00:EB8B: A8                 TAY                     ; copy length to Y
  5205 00:EB8C: 60                 RTS
  5206                        
  5207                        ; perform ASC()
  5208                        
  5209                        LAB_ASC
  5210 00:EB8D: 20 88 EB           JSR   LAB_ESGL          ; evaluate string, get length in A (and Y)
  5211 00:EB90: F0 08              BEQ   LAB_23A8          ; if null do function call error then warm start
  5212                        
  5213 00:EB92: A0 00              LDY   #$00              ; set index to first character
  5214 00:EB94: B1 71              LDA   (ut1_pl),Y        ; get byte
  5215 00:EB96: A8                 TAY                     ; copy to Y
  5216 00:EB97: 4C 74 E7           JMP   LAB_1FD0          ; convert Y to byte in FAC1 and return
  5217                        
  5218                        ; do function call error then warm start
  5219                        
  5220                        LAB_23A8
  5221 00:EB9A: 4C 37 E6           JMP   LAB_FCER          ; do function call error then warm start
  5222                        
  5223                        ; scan and get byte parameter
  5224                        
  5225                        LAB_SGBY
  5226 00:EB9D: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  5227                        
  5228                        ; get byte parameter
  5229                        
  5230                        LAB_GTBY
  5231 00:EBA0: 20 CD E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  5232                                                      ; else do type mismatch
  5233                        
  5234                        ; evaluate byte expression, result in X
  5235                        
  5236                        LAB_EVBY
  5237 00:EBA3: 20 B0 E5           JSR   LAB_EVPI          ; evaluate integer expression (no check)
  5238                        
  5239 00:EBA6: A4 AE              LDY   FAC1_2            ; get FAC1 mantissa2
  5240 00:EBA8: D0 F0              BNE   LAB_23A8          ; if top byte <> 0 do function call error then warm start
  5241                        
  5242 00:EBAA: A6 AF              LDX   FAC1_3            ; get FAC1 mantissa3
  5243 00:EBAC: 4C C2 00           JMP   LAB_GBYT          ; scan memory and return
  5244                        
  5245                        ; perform VAL()
  5246                        
  5247                        LAB_VAL
  5248 00:EBAF: 20 88 EB           JSR   LAB_ESGL          ; evaluate string, get length in A (and Y)
  5249 00:EBB2: D0 03              BNE   LAB_23C5          ; branch if not null string
  5250                        
  5251                                                      ; string was null so set result = $00
  5252 00:EBB4: 4C 5D ED           JMP   LAB_24F1          ; clear FAC1 exponent and sign and return
  5253                        
  5254                        LAB_23C5
  5255                        ; *** begin patch  2.22p5.7  VAL() may cause string variables to be trashed
  5256                        ; *** replace     
  5257                        ;      LDX   Bpntrl            ; get BASIC execute pointer low byte
  5258                        ;      LDY   Bpntrh            ; get BASIC execute pointer high byte
  5259                        ;      STX   Btmpl             ; save BASIC execute pointer low byte
  5260                        ;      STY   Btmph             ; save BASIC execute pointer high byte
  5261                        ;      LDX   ut1_pl            ; get string pointer low byte
  5262                        ;      STX   Bpntrl            ; save as BASIC execute pointer low byte
  5263                        ;      CLC                     ; clear carry
  5264                        ;      ADC   ut1_pl            ; add string length
  5265                        ;      STA   ut2_pl            ; save string end low byte
  5266                        ;      LDA   ut1_ph            ; get string pointer high byte
  5267                        ;      STA   Bpntrh            ; save as BASIC execute pointer high byte
  5268                        ;      ADC   #$00              ; add carry to high byte
  5269                        ;      STA   ut2_ph            ; save string end high byte
  5270                        ;      LDY   #$00              ; set index to $00
  5271                        ;      LDA   (ut2_pl),Y        ; get string end +1 byte
  5272                        ;      PHA                     ; push it
  5273                        ;      TYA                     ; clear A
  5274                        ;      STA   (ut2_pl),Y        ; terminate string with $00
  5275                        ;      JSR   LAB_GBYT          ; scan memory
  5276                        ;      JSR   LAB_2887          ; get FAC1 from string
  5277                        ;      PLA                     ; restore string end +1 byte
  5278                        ;      LDY   #$00              ; set index to zero
  5279                        ;      STA   (ut2_pl),Y        ; put string end byte back
  5280                        ; *** with
  5281 00:EBB7: 48                 PHA                     ; save length
  5282 00:EBB8: C8                 INY                     ; string length +1
  5283 00:EBB9: 98                 TYA
  5284 00:EBBA: 20 48 E8           JSR   LAB_MSSP          ; allocate temp string +1 bytes long
  5285 00:EBBD: 68                 PLA                     ; get length back
  5286 00:EBBE: 20 37 EA           JSR   LAB_229C          ; copy string (ut1_pl) -> (Sutill) for A bytes
  5287 00:EBC1: A9 00              LDA   #0                ; add delimiter to end of string
  5288 00:EBC3: A8                 TAY
  5289 00:EBC4: 91 83              STA   (Sutill),Y
  5290 00:EBC6: A6 C3              LDX   Bpntrl            ; save BASIC execute pointer low byte
  5291 00:EBC8: A4 C4              LDY   Bpntrh
  5292 00:EBCA: 86 BA              STX   Btmpl
  5293 00:EBCC: 84 BB              STY   Btmph
  5294 00:EBCE: A6 AD              LDX   str_pl            ; point to temporary string
  5295 00:EBD0: A4 AE              LDY   str_ph
  5296 00:EBD2: 86 C3              STX   Bpntrl
  5297 00:EBD4: 84 C4              STY   Bpntrh
  5298 00:EBD6: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  5299 00:EBD9: 20 B3 F0           JSR   LAB_2887          ; get FAC1 from string
  5300                        ; *** end patch    2.22p5.7  VAL() may cause string variables to be trashed
  5301                        
  5302                        ; restore BASIC execute pointer from temp (Btmpl/Btmph)
  5303                        
  5304                        LAB_23F3
  5305 00:EBDC: A6 BA              LDX   Btmpl             ; get BASIC execute pointer low byte back
  5306 00:EBDE: A4 BB              LDY   Btmph             ; get BASIC execute pointer high byte back
  5307 00:EBE0: 86 C3              STX   Bpntrl            ; save BASIC execute pointer low byte
  5308 00:EBE2: 84 C4              STY   Bpntrh            ; save BASIC execute pointer high byte
  5309 00:EBE4: 60                 RTS
  5310                        
  5311                        ; get two parameters for POKE or WAIT
  5312                        
  5313                        LAB_GADB
  5314 00:EBE5: 20 CD E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  5315                                                      ; else do type mismatch
  5316 00:EBE8: 20 FE EB           JSR   LAB_F2FX          ; save integer part of FAC1 in temporary integer
  5317                        
  5318                        ; scan for "," and get byte, else do Syntax error then warm start
  5319                        
  5320                        LAB_SCGB
  5321 00:EBEB: 20 FE E2           JSR   LAB_1C01          ; scan for "," , else do syntax error then warm start
  5322 00:EBEE: A5 12              LDA   Itemph            ; save temporary integer high byte
  5323 00:EBF0: 48                 PHA                     ; on stack
  5324 00:EBF1: A5 11              LDA   Itempl            ; save temporary integer low byte
  5325 00:EBF3: 48                 PHA                     ; on stack
  5326 00:EBF4: 20 A0 EB           JSR   LAB_GTBY          ; get byte parameter
  5327 00:EBF7: 68                 PLA                     ; pull low byte
  5328 00:EBF8: 85 11              STA   Itempl            ; restore temporary integer low byte
  5329 00:EBFA: 68                 PLA                     ; pull high byte
  5330 00:EBFB: 85 12              STA   Itemph            ; restore temporary integer high byte
  5331 00:EBFD: 60                 RTS
  5332                        
  5333                        ; convert float to fixed routine. accepts any value that fits in 24 bits, +ve or
  5334                        ; -ve and converts it into a right truncated integer in Itempl and Itemph
  5335                        
  5336                        ; save unsigned 16 bit integer part of FAC1 in temporary integer
  5337                        
  5338                        LAB_F2FX
  5339 00:EBFE: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  5340 00:EC00: C9 98              CMP   #$98              ; compare with exponent = 2^24
  5341 00:EC02: B0 96              BCS   LAB_23A8          ; if >= do function call error then warm start
  5342                        
  5343                        LAB_F2FU
  5344 00:EC04: 20 5D F0           JSR   LAB_2831          ; convert FAC1 floating-to-fixed
  5345 00:EC07: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  5346 00:EC09: A4 AF              LDY   FAC1_3            ; get FAC1 mantissa3
  5347 00:EC0B: 84 11              STY   Itempl            ; save temporary integer low byte
  5348 00:EC0D: 85 12              STA   Itemph            ; save temporary integer high byte
  5349 00:EC0F: 60                 RTS
  5350                        
  5351                        ; perform PEEK()
  5352                        
  5353                        LAB_PEEK
  5354 00:EC10: 20 FE EB           JSR   LAB_F2FX          ; save integer part of FAC1 in temporary integer
  5355 00:EC13: A2 00              LDX   #$00              ; clear index
  5356 00:EC15: A1 11              LDA   (Itempl,X)        ; get byte via temporary integer (addr)
  5357 00:EC17: A8                 TAY                     ; copy byte to Y
  5358 00:EC18: 4C 74 E7           JMP   LAB_1FD0          ; convert Y to byte in FAC1 and return
  5359                        
  5360                        ; perform POKE
  5361                        
  5362                        LAB_POKE
  5363 00:EC1B: 20 E5 EB           JSR   LAB_GADB          ; get two parameters for POKE or WAIT
  5364 00:EC1E: 8A                 TXA                     ; copy byte argument to A
  5365 00:EC1F: A2 00              LDX   #$00              ; clear index
  5366 00:EC21: 81 11              STA   (Itempl,X)        ; save byte via temporary integer (addr)
  5367 00:EC23: 60                 RTS
  5368                        
  5369                        ; perform DEEK()
  5370                        
  5371                        LAB_DEEK
  5372 00:EC24: 20 FE EB           JSR   LAB_F2FX          ; save integer part of FAC1 in temporary integer
  5373 00:EC27: A2 00              LDX   #$00              ; clear index
  5374 00:EC29: A1 11              LDA   (Itempl,X)        ; PEEK low byte
  5375 00:EC2B: A8                 TAY                     ; copy to Y
  5376 00:EC2C: E6 11              INC   Itempl            ; increment pointer low byte
  5377 00:EC2E: D0 02              BNE   Deekh             ; skip high increment if no rollover
  5378                        
  5379 00:EC30: E6 12              INC   Itemph            ; increment pointer high byte
  5380                        Deekh
  5381 00:EC32: A1 11              LDA   (Itempl,X)        ; PEEK high byte
  5382 00:EC34: 4C 67 E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  5383                        
  5384                        ; perform DOKE
  5385                        
  5386                        LAB_DOKE
  5387 00:EC37: 20 CD E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  5388                                                      ; else do type mismatch
  5389 00:EC3A: 20 FE EB           JSR   LAB_F2FX          ; convert floating-to-fixed
  5390                        
  5391 00:EC3D: 84 97              STY   Frnxtl            ; save pointer low byte (float to fixed returns word in AY)
  5392 00:EC3F: 85 98              STA   Frnxth            ; save pointer high byte
  5393                        
  5394 00:EC41: 20 FE E2           JSR   LAB_1C01          ; scan for "," , else do syntax error then warm start
  5395 00:EC44: 20 CD E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  5396                                                      ; else do type mismatch
  5397 00:EC47: 20 FE EB           JSR   LAB_F2FX          ; convert floating-to-fixed
  5398                        
  5399 00:EC4A: 98                 TYA                     ; copy value low byte (float to fixed returns word in AY)
  5400 00:EC4B: A2 00              LDX   #$00              ; clear index
  5401 00:EC4D: 81 97              STA   (Frnxtl,X)        ; POKE low byte
  5402 00:EC4F: E6 97              INC   Frnxtl            ; increment pointer low byte
  5403 00:EC51: D0 02              BNE   Dokeh             ; skip high increment if no rollover
  5404                        
  5405 00:EC53: E6 98              INC   Frnxth            ; increment pointer high byte
  5406                        Dokeh
  5407 00:EC55: A5 12              LDA   Itemph            ; get value high byte
  5408 00:EC57: 81 97              STA   (Frnxtl,X)        ; POKE high byte
  5409 00:EC59: 4C C2 00           JMP   LAB_GBYT          ; scan memory and return
  5410                        
  5411                        ; perform SWAP
  5412                        
  5413                        LAB_SWAP
  5414 00:EC5C: 20 B8 E4           JSR   LAB_GVAR          ; get var1 address
  5415 00:EC5F: 85 97              STA   Lvarpl            ; save var1 address low byte
  5416 00:EC61: 84 98              STY   Lvarph            ; save var1 address high byte
  5417 00:EC63: A5 5F              LDA   Dtypef            ; get data type flag, $FF=string, $00=numeric
  5418 00:EC65: 48                 PHA                     ; save data type flag
  5419                        
  5420 00:EC66: 20 FE E2           JSR   LAB_1C01          ; scan for "," , else do syntax error then warm start
  5421 00:EC69: 20 B8 E4           JSR   LAB_GVAR          ; get var2 address (pointer in Cvaral/h)
  5422 00:EC6C: 68                 PLA                     ; pull var1 data type flag
  5423 00:EC6D: 45 5F              EOR   Dtypef            ; compare with var2 data type
  5424 00:EC6F: 10 10              BPL   SwapErr           ; exit if not both the same type
  5425                        
  5426 00:EC71: A0 03              LDY   #$03              ; four bytes to swap (either value or descriptor+1)
  5427                        SwapLp
  5428 00:EC73: B1 97              LDA   (Lvarpl),Y        ; get byte from var1
  5429 00:EC75: AA                 TAX                     ; save var1 byte
  5430 00:EC76: B1 95              LDA   (Cvaral),Y        ; get byte from var2
  5431 00:EC78: 91 97              STA   (Lvarpl),Y        ; save byte to var1
  5432 00:EC7A: 8A                 TXA                     ; restore var1 byte
  5433 00:EC7B: 91 95              STA   (Cvaral),Y        ; save byte to var2
  5434 00:EC7D: 88                 DEY                     ; decrement index
  5435 00:EC7E: 10 F3              BPL   SwapLp            ; loop until done
  5436                        
  5437 00:EC80: 60                 RTS
  5438                        
  5439                        SwapErr
  5440 00:EC81: 4C DC E1           JMP   LAB_1ABC          ; do "Type mismatch" error then warm start
  5441                        
  5442                        ; perform CALL
  5443                        
  5444                        LAB_CALL
  5445 00:EC84: 20 CD E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  5446                                                      ; else do type mismatch
  5447 00:EC87: 20 FE EB           JSR   LAB_F2FX          ; convert floating-to-fixed
  5448 00:EC8A: A9 EC              LDA   #>CallExit        ; set return address high byte
  5449 00:EC8C: 48                 PHA                     ; put on stack
  5450 00:EC8D: A9 92              LDA   #<CallExit-1      ; set return address low byte
  5451 00:EC8F: 48                 PHA                     ; put on stack
  5452 00:EC90: 6C 11 00           JMP   (Itempl)          ; do indirect jump to user routine
  5453                        
  5454                        ; if the called routine exits correctly then it will return to here. this will then get
  5455                        ; the next byte for the interpreter and return
  5456                        
  5457                        CallExit
  5458 00:EC93: 4C C2 00           JMP   LAB_GBYT          ; scan memory and return
  5459                        
  5460                        ; perform WAIT
  5461                        
  5462                        LAB_WAIT
  5463 00:EC96: 20 E5 EB           JSR   LAB_GADB          ; get two parameters for POKE or WAIT
  5464 00:EC99: 86 97              STX   Frnxtl            ; save byte
  5465 00:EC9B: A2 00              LDX   #$00              ; clear mask
  5466 00:EC9D: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  5467 00:ECA0: F0 03              BEQ   LAB_2441          ; skip if no third argument
  5468                        
  5469 00:ECA2: 20 EB EB           JSR   LAB_SCGB          ; scan for "," and get byte, else SN error then warm start
  5470                        LAB_2441
  5471 00:ECA5: 86 98              STX   Frnxth            ; save EOR argument
  5472                        LAB_2445
  5473 00:ECA7: B1 11              LDA   (Itempl),Y        ; get byte via temporary integer (addr)
  5474 00:ECA9: 45 98              EOR   Frnxth            ; EOR with second argument (mask)
  5475 00:ECAB: 25 97              AND   Frnxtl            ; AND with first argument (byte)
  5476 00:ECAD: F0 F8              BEQ   LAB_2445          ; loop if result is zero
  5477                        
  5478                        LAB_244D
  5479 00:ECAF: 60                 RTS
  5480                        
  5481                        ; perform subtraction, FAC1 from (AY)
  5482                        
  5483                        LAB_2455
  5484 00:ECB0: 20 98 EE           JSR   LAB_264D          ; unpack memory (AY) into FAC2
  5485                        
  5486                        ; perform subtraction, FAC1 from FAC2
  5487                        
  5488                        LAB_SUBTRACT
  5489 00:ECB3: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  5490 00:ECB5: 49 FF              EOR   #$FF              ; complement it
  5491 00:ECB7: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  5492 00:ECB9: 45 B7              EOR   FAC2_s            ; EOR with FAC2 sign (b7)
  5493 00:ECBB: 85 B8              STA   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  5494 00:ECBD: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  5495 00:ECBF: 4C CE EC           JMP   LAB_ADD           ; go add FAC2 to FAC1
  5496                        
  5497                        ; perform addition
  5498                        
  5499                        LAB_2467
  5500 00:ECC2: 20 E7 ED           JSR   LAB_257B          ; shift FACX A times right (>8 shifts)
  5501 00:ECC5: 90 4D              BCC   LAB_24A8          ;.go subtract mantissas
  5502                        
  5503                        ; add 0.5 to FAC1
  5504                        
  5505                        LAB_244E
  5506 00:ECC7: A9 F9              LDA   #<LAB_2A96        ; set 0.5 pointer low byte
  5507 00:ECC9: A0 F8              LDY   #>LAB_2A96        ; set 0.5 pointer high byte
  5508                        
  5509                        ; add (AY) to FAC1
  5510                        
  5511                        LAB_246C
  5512 00:ECCB: 20 98 EE           JSR   LAB_264D          ; unpack memory (AY) into FAC2
  5513                        
  5514                        ; add FAC2 to FAC1
  5515                        
  5516                        LAB_ADD
  5517 00:ECCE: D0 10              BNE   LAB_2474          ; branch if FAC1 was not zero
  5518                        
  5519                        ; copy FAC2 to FAC1
  5520                        
  5521                        LAB_279B
  5522 00:ECD0: A5 B7              LDA   FAC2_s            ; get FAC2 sign (b7)
  5523                        
  5524                        ; save FAC1 sign and copy ABS(FAC2) to FAC1
  5525                        
  5526                        LAB_279D
  5527 00:ECD2: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  5528 00:ECD4: A2 04              LDX   #$04              ; 4 bytes to copy
  5529                        LAB_27A1
  5530 00:ECD6: B5 B2              LDA   FAC1_o,X          ; get byte from FAC2,X
  5531 00:ECD8: 95 AB              STA   FAC1_e-1,X        ; save byte at FAC1,X
  5532 00:ECDA: CA                 DEX                     ; decrement count
  5533 00:ECDB: D0 F9              BNE   LAB_27A1          ; loop if not all done
  5534                        
  5535 00:ECDD: 86 B9              STX   FAC1_r            ; clear FAC1 rounding byte
  5536 00:ECDF: 60                 RTS
  5537                        
  5538                                                      ; FAC1 is non zero
  5539                        LAB_2474
  5540 00:ECE0: A6 B9              LDX   FAC1_r            ; get FAC1 rounding byte
  5541 00:ECE2: 86 A3              STX   FAC2_r            ; save as FAC2 rounding byte
  5542 00:ECE4: A2 B3              LDX   #FAC2_e           ; set index to FAC2 exponent addr
  5543 00:ECE6: A5 B3              LDA   FAC2_e            ; get FAC2 exponent
  5544                        LAB_247C
  5545 00:ECE8: A8                 TAY                     ; copy exponent
  5546 00:ECE9: F0 C4              BEQ   LAB_244D          ; exit if zero
  5547                        
  5548 00:ECEB: 38                 SEC                     ; set carry for subtract
  5549 00:ECEC: E5 AC              SBC   FAC1_e            ; subtract FAC1 exponent
  5550 00:ECEE: F0 24              BEQ   LAB_24A8          ; branch if = (go add mantissa)
  5551                        
  5552 00:ECF0: 90 12              BCC   LAB_2498          ; branch if <
  5553                        
  5554                                                      ; FAC2>FAC1
  5555 00:ECF2: 84 AC              STY   FAC1_e            ; save FAC1 exponent
  5556 00:ECF4: A4 B7              LDY   FAC2_s            ; get FAC2 sign (b7)
  5557 00:ECF6: 84 B0              STY   FAC1_s            ; save FAC1 sign (b7)
  5558 00:ECF8: 49 FF              EOR   #$FF              ; complement A
  5559 00:ECFA: 69 00              ADC   #$00              ; +1 (twos complement, carry is set)
  5560 00:ECFC: A0 00              LDY   #$00              ; clear Y
  5561 00:ECFE: 84 A3              STY   FAC2_r            ; clear FAC2 rounding byte
  5562 00:ED00: A2 AC              LDX   #FAC1_e           ; set index to FAC1 exponent addr
  5563 00:ED02: D0 04              BNE   LAB_249C          ; branch always
  5564                        
  5565                        LAB_2498
  5566 00:ED04: A0 00              LDY   #$00              ; clear Y
  5567 00:ED06: 84 B9              STY   FAC1_r            ; clear FAC1 rounding byte
  5568                        LAB_249C
  5569 00:ED08: C9 F9              CMP   #$F9              ; compare exponent diff with $F9
  5570 00:ED0A: 30 B6              BMI   LAB_2467          ; branch if range $79-$F8
  5571                        
  5572 00:ED0C: A8                 TAY                     ; copy exponent difference to Y
  5573 00:ED0D: A5 B9              LDA   FAC1_r            ; get FAC1 rounding byte
  5574 00:ED0F: 56 01              LSR   PLUS_1,X          ; shift FAC? mantissa1
  5575 00:ED11: 20 FE ED           JSR   LAB_2592          ; shift FACX Y times right
  5576                        
  5577                                                      ; exponents are equal now do mantissa subtract
  5578                        LAB_24A8
  5579 00:ED14: 24 B8              BIT   FAC_sc            ; test sign compare (FAC1 EOR FAC2)
  5580 00:ED16: 10 4C              BPL   LAB_24F8          ; if = add FAC2 mantissa to FAC1 mantissa and return
  5581                        
  5582 00:ED18: A0 AC              LDY   #FAC1_e           ; set index to FAC1 exponent addr
  5583 00:ED1A: E0 B3              CPX   #FAC2_e           ; compare X to FAC2 exponent addr
  5584 00:ED1C: F0 02              BEQ   LAB_24B4          ; branch if =
  5585                        
  5586 00:ED1E: A0 B3              LDY   #FAC2_e           ; else set index to FAC2 exponent addr
  5587                        
  5588                                                      ; subtract smaller from bigger (take sign of bigger)
  5589                        LAB_24B4
  5590 00:ED20: 38                 SEC                     ; set carry for subtract
  5591 00:ED21: 49 FF              EOR   #$FF              ; ones complement A
  5592 00:ED23: 65 A3              ADC   FAC2_r            ; add FAC2 rounding byte
  5593 00:ED25: 85 B9              STA   FAC1_r            ; save FAC1 rounding byte
  5594 00:ED27: B9 03 00           LDA   PLUS_3,Y          ; get FACY mantissa3
  5595 00:ED2A: F5 03              SBC   PLUS_3,X          ; subtract FACX mantissa3
  5596 00:ED2C: 85 AF              STA   FAC1_3            ; save FAC1 mantissa3
  5597 00:ED2E: B9 02 00           LDA   PLUS_2,Y          ; get FACY mantissa2
  5598 00:ED31: F5 02              SBC   PLUS_2,X          ; subtract FACX mantissa2
  5599 00:ED33: 85 AE              STA   FAC1_2            ; save FAC1 mantissa2
  5600 00:ED35: B9 01 00           LDA   PLUS_1,Y          ; get FACY mantissa1
  5601 00:ED38: F5 01              SBC   PLUS_1,X          ; subtract FACX mantissa1
  5602 00:ED3A: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  5603                        
  5604                        ; do ABS and normalise FAC1
  5605                        
  5606                        LAB_24D0
  5607 00:ED3C: B0 03              BCS   LAB_24D5          ; branch if number is +ve
  5608                        
  5609 00:ED3E: 20 A3 ED           JSR   LAB_2537          ; negate FAC1
  5610                        
  5611                        ; normalise FAC1
  5612                        
  5613                        LAB_24D5
  5614 00:ED41: A0 00              LDY   #$00              ; clear Y
  5615 00:ED43: 98                 TYA                     ; clear A
  5616 00:ED44: 18                 CLC                     ; clear carry for add
  5617                        LAB_24D9
  5618 00:ED45: A6 AD              LDX   FAC1_1            ; get FAC1 mantissa1
  5619 00:ED47: D0 3E              BNE   LAB_251B          ; if not zero normalise FAC1
  5620                        
  5621 00:ED49: A6 AE              LDX   FAC1_2            ; get FAC1 mantissa2
  5622 00:ED4B: 86 AD              STX   FAC1_1            ; save FAC1 mantissa1
  5623 00:ED4D: A6 AF              LDX   FAC1_3            ; get FAC1 mantissa3
  5624 00:ED4F: 86 AE              STX   FAC1_2            ; save FAC1 mantissa2
  5625 00:ED51: A6 B9              LDX   FAC1_r            ; get FAC1 rounding byte
  5626 00:ED53: 86 AF              STX   FAC1_3            ; save FAC1 mantissa3
  5627 00:ED55: 84 B9              STY   FAC1_r            ; clear FAC1 rounding byte
  5628 00:ED57: 69 08              ADC   #$08              ; add x to exponent offset
  5629 00:ED59: C9 18              CMP   #$18              ; compare with $18 (max offset, all bits would be =0)
  5630 00:ED5B: D0 E8              BNE   LAB_24D9          ; loop if not max
  5631                        
  5632                        ; clear FAC1 exponent and sign
  5633                        
  5634                        LAB_24F1
  5635 00:ED5D: A9 00              LDA   #$00              ; clear A
  5636                        LAB_24F3
  5637 00:ED5F: 85 AC              STA   FAC1_e            ; set FAC1 exponent
  5638                        
  5639                        ; save FAC1 sign
  5640                        
  5641                        LAB_24F5
  5642 00:ED61: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  5643 00:ED63: 60                 RTS
  5644                        
  5645                        ; add FAC2 mantissa to FAC1 mantissa
  5646                        
  5647                        LAB_24F8
  5648 00:ED64: 65 A3              ADC   FAC2_r            ; add FAC2 rounding byte
  5649 00:ED66: 85 B9              STA   FAC1_r            ; save FAC1 rounding byte
  5650 00:ED68: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  5651 00:ED6A: 65 B6              ADC   FAC2_3            ; add FAC2 mantissa3
  5652 00:ED6C: 85 AF              STA   FAC1_3            ; save FAC1 mantissa3
  5653 00:ED6E: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  5654 00:ED70: 65 B5              ADC   FAC2_2            ; add FAC2 mantissa2
  5655 00:ED72: 85 AE              STA   FAC1_2            ; save FAC1 mantissa2
  5656 00:ED74: A5 AD              LDA   FAC1_1            ; get FAC1 mantissa1
  5657 00:ED76: 65 B4              ADC   FAC2_1            ; add FAC2 mantissa1
  5658 00:ED78: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  5659 00:ED7A: B0 1A              BCS   LAB_252A          ; if carry then normalise FAC1 for C=1
  5660                        
  5661 00:ED7C: 60                 RTS                     ; else just exit
  5662                        
  5663                        LAB_2511
  5664 00:ED7D: 69 01              ADC   #$01              ; add 1 to exponent offset
  5665 00:ED7F: 06 B9              ASL   FAC1_r            ; shift FAC1 rounding byte
  5666 00:ED81: 26 AF              ROL   FAC1_3            ; shift FAC1 mantissa3
  5667 00:ED83: 26 AE              ROL   FAC1_2            ; shift FAC1 mantissa2
  5668 00:ED85: 26 AD              ROL   FAC1_1            ; shift FAC1 mantissa1
  5669                        
  5670                        ; normalise FAC1
  5671                        
  5672                        LAB_251B
  5673 00:ED87: 10 F4              BPL   LAB_2511          ; loop if not normalised
  5674                        
  5675 00:ED89: 38                 SEC                     ; set carry for subtract
  5676 00:ED8A: E5 AC              SBC   FAC1_e            ; subtract FAC1 exponent
  5677 00:ED8C: B0 CF              BCS   LAB_24F1          ; branch if underflow (set result = $0)
  5678                        
  5679 00:ED8E: 49 FF              EOR   #$FF              ; complement exponent
  5680 00:ED90: 69 01              ADC   #$01              ; +1 (twos complement)
  5681 00:ED92: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  5682                        
  5683                        ; test and normalise FAC1 for C=0/1
  5684                        
  5685                        LAB_2528
  5686 00:ED94: 90 0C              BCC   LAB_2536          ; exit if no overflow
  5687                        
  5688                        ; normalise FAC1 for C=1
  5689                        
  5690                        LAB_252A
  5691 00:ED96: E6 AC              INC   FAC1_e            ; increment FAC1 exponent
  5692 00:ED98: F0 36              BEQ   LAB_2564          ; if zero do overflow error and warm start
  5693                        
  5694 00:ED9A: 66 AD              ROR   FAC1_1            ; shift FAC1 mantissa1
  5695 00:ED9C: 66 AE              ROR   FAC1_2            ; shift FAC1 mantissa2
  5696 00:ED9E: 66 AF              ROR   FAC1_3            ; shift FAC1 mantissa3
  5697 00:EDA0: 66 B9              ROR   FAC1_r            ; shift FAC1 rounding byte
  5698                        LAB_2536
  5699 00:EDA2: 60                 RTS
  5700                        
  5701                        ; negate FAC1
  5702                        
  5703                        LAB_2537
  5704 00:EDA3: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  5705 00:EDA5: 49 FF              EOR   #$FF              ; complement it
  5706 00:EDA7: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  5707                        
  5708                        ; twos complement FAC1 mantissa
  5709                        
  5710                        LAB_253D
  5711 00:EDA9: A5 AD              LDA   FAC1_1            ; get FAC1 mantissa1
  5712 00:EDAB: 49 FF              EOR   #$FF              ; complement it
  5713 00:EDAD: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  5714 00:EDAF: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  5715 00:EDB1: 49 FF              EOR   #$FF              ; complement it
  5716 00:EDB3: 85 AE              STA   FAC1_2            ; save FAC1 mantissa2
  5717 00:EDB5: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  5718 00:EDB7: 49 FF              EOR   #$FF              ; complement it
  5719 00:EDB9: 85 AF              STA   FAC1_3            ; save FAC1 mantissa3
  5720 00:EDBB: A5 B9              LDA   FAC1_r            ; get FAC1 rounding byte
  5721 00:EDBD: 49 FF              EOR   #$FF              ; complement it
  5722 00:EDBF: 85 B9              STA   FAC1_r            ; save FAC1 rounding byte
  5723 00:EDC1: E6 B9              INC   FAC1_r            ; increment FAC1 rounding byte
  5724 00:EDC3: D0 0A              BNE   LAB_2563          ; exit if no overflow
  5725                        
  5726                        ; increment FAC1 mantissa
  5727                        
  5728                        LAB_2559
  5729 00:EDC5: E6 AF              INC   FAC1_3            ; increment FAC1 mantissa3
  5730 00:EDC7: D0 06              BNE   LAB_2563          ; finished if no rollover
  5731                        
  5732 00:EDC9: E6 AE              INC   FAC1_2            ; increment FAC1 mantissa2
  5733 00:EDCB: D0 02              BNE   LAB_2563          ; finished if no rollover
  5734                        
  5735 00:EDCD: E6 AD              INC   FAC1_1            ; increment FAC1 mantissa1
  5736                        LAB_2563
  5737 00:EDCF: 60                 RTS
  5738                        
  5739                        ; do overflow error (overflow exit)
  5740                        
  5741                        LAB_2564
  5742 00:EDD0: A2 0A              LDX   #$0A              ; error code $0A ("Overflow" error)
  5743 00:EDD2: 4C 3F D8           JMP   LAB_XERR          ; do error #X, then warm start
  5744                        
  5745                        ; shift FCAtemp << A+8 times
  5746                        
  5747                        LAB_2569
  5748 00:EDD5: A2 74              LDX   #FACt_1-1         ; set offset to FACtemp
  5749                        LAB_256B
  5750 00:EDD7: B4 03              LDY   PLUS_3,X          ; get FACX mantissa3
  5751 00:EDD9: 84 B9              STY   FAC1_r            ; save as FAC1 rounding byte
  5752 00:EDDB: B4 02              LDY   PLUS_2,X          ; get FACX mantissa2
  5753 00:EDDD: 94 03              STY   PLUS_3,X          ; save FACX mantissa3
  5754 00:EDDF: B4 01              LDY   PLUS_1,X          ; get FACX mantissa1
  5755 00:EDE1: 94 02              STY   PLUS_2,X          ; save FACX mantissa2
  5756 00:EDE3: A4 B2              LDY   FAC1_o            ; get FAC1 overflow byte
  5757 00:EDE5: 94 01              STY   PLUS_1,X          ; save FACX mantissa1
  5758                        
  5759                        ; shift FACX -A times right (> 8 shifts)
  5760                        
  5761                        LAB_257B
  5762 00:EDE7: 69 08              ADC   #$08              ; add 8 to shift count
  5763 00:EDE9: 30 EC              BMI   LAB_256B          ; go do 8 shift if still -ve
  5764                        
  5765 00:EDEB: F0 EA              BEQ   LAB_256B          ; go do 8 shift if zero
  5766                        
  5767 00:EDED: E9 08              SBC   #$08              ; else subtract 8 again
  5768 00:EDEF: A8                 TAY                     ; save count to Y
  5769 00:EDF0: A5 B9              LDA   FAC1_r            ; get FAC1 rounding byte
  5770 00:EDF2: B0 12              BCS   LAB_259A          ;.
  5771                        
  5772                        LAB_2588
  5773 00:EDF4: 16 01              ASL   PLUS_1,X          ; shift FACX mantissa1
  5774 00:EDF6: 90 02              BCC   LAB_258E          ; branch if +ve
  5775                        
  5776 00:EDF8: F6 01              INC   PLUS_1,X          ; this sets b7 eventually
  5777                        LAB_258E
  5778 00:EDFA: 76 01              ROR   PLUS_1,X          ; shift FACX mantissa1 (correct for ASL)
  5779 00:EDFC: 76 01              ROR   PLUS_1,X          ; shift FACX mantissa1 (put carry in b7)
  5780                        
  5781                        ; shift FACX Y times right
  5782                        
  5783                        LAB_2592
  5784 00:EDFE: 76 02              ROR   PLUS_2,X          ; shift FACX mantissa2
  5785 00:EE00: 76 03              ROR   PLUS_3,X          ; shift FACX mantissa3
  5786 00:EE02: 6A                 ROR                     ; shift FACX rounding byte
  5787 00:EE03: C8                 INY                     ; increment exponent diff
  5788 00:EE04: D0 EE              BNE   LAB_2588          ; branch if range adjust not complete
  5789                        
  5790                        LAB_259A
  5791 00:EE06: 18                 CLC                     ; just clear it
  5792 00:EE07: 60                 RTS
  5793                        
  5794                        ; perform LOG()
  5795                        
  5796                        LAB_LOG
  5797 00:EE08: 20 F6 EF           JSR   LAB_27CA          ; test sign and zero
  5798 00:EE0B: F0 02              BEQ   LAB_25C4          ; if zero do function call error then warm start
  5799                        
  5800 00:EE0D: 10 03              BPL   LAB_25C7          ; skip error if +ve
  5801                        
  5802                        LAB_25C4
  5803 00:EE0F: 4C 37 E6           JMP   LAB_FCER          ; do function call error then warm start (-ve)
  5804                        
  5805                        LAB_25C7
  5806 00:EE12: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  5807 00:EE14: E9 7F              SBC   #$7F              ; normalise it
  5808 00:EE16: 48                 PHA                     ; save it
  5809 00:EE17: A9 80              LDA   #$80              ; set exponent to zero
  5810 00:EE19: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  5811 00:EE1B: A9 79              LDA   #<LAB_25AD        ; set 1/root2 pointer low byte
  5812 00:EE1D: A0 F8              LDY   #>LAB_25AD        ; set 1/root2 pointer high byte
  5813 00:EE1F: 20 CB EC           JSR   LAB_246C          ; add (AY) to FAC1 (1/root2)
  5814 00:EE22: A9 7D              LDA   #<LAB_25B1        ; set root2 pointer low byte
  5815 00:EE24: A0 F8              LDY   #>LAB_25B1        ; set root2 pointer high byte
  5816 00:EE26: 20 0E EF           JSR   LAB_26CA          ; convert AY and do (AY)/FAC1 (root2/(x+(1/root2)))
  5817 00:EE29: A9 F0              LDA   #<LAB_259C        ; set 1 pointer low byte
  5818 00:EE2B: A0 F8              LDY   #>LAB_259C        ; set 1 pointer high byte
  5819 00:EE2D: 20 B0 EC           JSR   LAB_2455          ; subtract (AY) from FAC1 ((root2/(x+(1/root2)))-1)
  5820 00:EE30: A9 6C              LDA   #<LAB_25A0        ; set pointer low byte to counter
  5821 00:EE32: A0 F8              LDY   #>LAB_25A0        ; set pointer high byte to counter
  5822 00:EE34: 20 5E F3           JSR   LAB_2B6E          ; ^2 then series evaluation
  5823 00:EE37: A9 81              LDA   #<LAB_25B5        ; set -0.5 pointer low byte
  5824 00:EE39: A0 F8              LDY   #>LAB_25B5        ; set -0.5 pointer high byte
  5825 00:EE3B: 20 CB EC           JSR   LAB_246C          ; add (AY) to FAC1
  5826 00:EE3E: 68                 PLA                     ; restore FAC1 exponent
  5827 00:EE3F: 20 52 F1           JSR   LAB_2912          ; evaluate new ASCII digit
  5828 00:EE42: A9 85              LDA   #<LAB_25B9        ; set LOG(2) pointer low byte
  5829 00:EE44: A0 F8              LDY   #>LAB_25B9        ; set LOG(2) pointer high byte
  5830                        
  5831                        ; do convert AY, FCA1*(AY)
  5832                        
  5833                        LAB_25FB
  5834 00:EE46: 20 98 EE           JSR   LAB_264D          ; unpack memory (AY) into FAC2
  5835                        LAB_MULTIPLY
  5836 00:EE49: F0 4C              BEQ   LAB_264C          ; exit if zero
  5837                        
  5838 00:EE4B: 20 BE EE           JSR   LAB_2673          ; test and adjust accumulators
  5839 00:EE4E: A9 00              LDA   #$00              ; clear A
  5840 00:EE50: 85 75              STA   FACt_1            ; clear temp mantissa1
  5841 00:EE52: 85 76              STA   FACt_2            ; clear temp mantissa2
  5842 00:EE54: 85 77              STA   FACt_3            ; clear temp mantissa3
  5843 00:EE56: A5 B9              LDA   FAC1_r            ; get FAC1 rounding byte
  5844 00:EE58: 20 6D EE           JSR   LAB_2622          ; go do shift/add FAC2
  5845 00:EE5B: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  5846 00:EE5D: 20 6D EE           JSR   LAB_2622          ; go do shift/add FAC2
  5847 00:EE60: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  5848 00:EE62: 20 6D EE           JSR   LAB_2622          ; go do shift/add FAC2
  5849 00:EE65: A5 AD              LDA   FAC1_1            ; get FAC1 mantissa1
  5850 00:EE67: 20 73 EE           JSR   LAB_2627          ; go do shift/add FAC2
  5851 00:EE6A: 4C 7B EF           JMP   LAB_273C          ; copy temp to FAC1, normalise and return
  5852                        
  5853                        LAB_2622
  5854 00:EE6D: D0 04              BNE   LAB_2627          ; branch if byte <> zero
  5855                        ; *** begin patch  2.22p5.6  floating point multiply rounding bug
  5856                        ; *** replace
  5857                        ;      JMP   LAB_2569          ; shift FCAtemp << A+8 times
  5858                        ;
  5859                        ;                              ; else do shift and add
  5860                        ;LAB_2627
  5861                        ;      LSR                     ; shift byte
  5862                        ;      ORA   #$80              ; set top bit (mark for 8 times)
  5863                        ; *** with
  5864 00:EE6F: 38                 SEC
  5865 00:EE70: 4C D5 ED           JMP   LAB_2569          ; shift FACtemp << A+8 times
  5866                        
  5867                                                      ; else do shift and add
  5868                        LAB_2627
  5869 00:EE73: 38                 SEC                     ; set top bit (mark for 8 times)
  5870 00:EE74: 6A                 ROR
  5871                        ; *** end patch    2.22p5.6  floating point multiply rounding bug
  5872                        LAB_262A
  5873 00:EE75: A8                 TAY                     ; copy result
  5874 00:EE76: 90 13              BCC   LAB_2640          ; skip next if bit was zero
  5875                        
  5876 00:EE78: 18                 CLC                     ; clear carry for add
  5877 00:EE79: A5 77              LDA   FACt_3            ; get temp mantissa3
  5878 00:EE7B: 65 B6              ADC   FAC2_3            ; add FAC2 mantissa3
  5879 00:EE7D: 85 77              STA   FACt_3            ; save temp mantissa3
  5880 00:EE7F: A5 76              LDA   FACt_2            ; get temp mantissa2
  5881 00:EE81: 65 B5              ADC   FAC2_2            ; add FAC2 mantissa2
  5882 00:EE83: 85 76              STA   FACt_2            ; save temp mantissa2
  5883 00:EE85: A5 75              LDA   FACt_1            ; get temp mantissa1
  5884 00:EE87: 65 B4              ADC   FAC2_1            ; add FAC2 mantissa1
  5885 00:EE89: 85 75              STA   FACt_1            ; save temp mantissa1
  5886                        LAB_2640
  5887 00:EE8B: 66 75              ROR   FACt_1            ; shift temp mantissa1
  5888 00:EE8D: 66 76              ROR   FACt_2            ; shift temp mantissa2
  5889 00:EE8F: 66 77              ROR   FACt_3            ; shift temp mantissa3
  5890 00:EE91: 66 B9              ROR   FAC1_r            ; shift temp rounding byte
  5891 00:EE93: 98                 TYA                     ; get byte back
  5892 00:EE94: 4A                 LSR                     ; shift byte
  5893 00:EE95: D0 DE              BNE   LAB_262A          ; loop if all bits not done
  5894                        
  5895                        LAB_264C
  5896 00:EE97: 60                 RTS
  5897                        
  5898                        ; unpack memory (AY) into FAC2
  5899                        
  5900                        LAB_264D
  5901 00:EE98: 85 71              STA   ut1_pl            ; save pointer low byte
  5902 00:EE9A: 84 72              STY   ut1_ph            ; save pointer high byte
  5903 00:EE9C: A0 03              LDY   #$03              ; 4 bytes to get (0-3)
  5904 00:EE9E: B1 71              LDA   (ut1_pl),Y        ; get mantissa3
  5905 00:EEA0: 85 B6              STA   FAC2_3            ; save FAC2 mantissa3
  5906 00:EEA2: 88                 DEY                     ; decrement index
  5907 00:EEA3: B1 71              LDA   (ut1_pl),Y        ; get mantissa2
  5908 00:EEA5: 85 B5              STA   FAC2_2            ; save FAC2 mantissa2
  5909 00:EEA7: 88                 DEY                     ; decrement index
  5910 00:EEA8: B1 71              LDA   (ut1_pl),Y        ; get mantissa1+sign
  5911 00:EEAA: 85 B7              STA   FAC2_s            ; save FAC2 sign (b7)
  5912 00:EEAC: 45 B0              EOR   FAC1_s            ; EOR with FAC1 sign (b7)
  5913 00:EEAE: 85 B8              STA   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  5914 00:EEB0: A5 B7              LDA   FAC2_s            ; recover FAC2 sign (b7)
  5915 00:EEB2: 09 80              ORA   #$80              ; set 1xxx xxx (set normal bit)
  5916 00:EEB4: 85 B4              STA   FAC2_1            ; save FAC2 mantissa1
  5917 00:EEB6: 88                 DEY                     ; decrement index
  5918 00:EEB7: B1 71              LDA   (ut1_pl),Y        ; get exponent byte
  5919 00:EEB9: 85 B3              STA   FAC2_e            ; save FAC2 exponent
  5920 00:EEBB: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  5921 00:EEBD: 60                 RTS
  5922                        
  5923                        ; test and adjust accumulators
  5924                        
  5925                        LAB_2673
  5926 00:EEBE: A5 B3              LDA   FAC2_e            ; get FAC2 exponent
  5927                        LAB_2675
  5928 00:EEC0: F0 1D              BEQ   LAB_2696          ; branch if FAC2 = $00 (handle underflow)
  5929                        
  5930 00:EEC2: 18                 CLC                     ; clear carry for add
  5931 00:EEC3: 65 AC              ADC   FAC1_e            ; add FAC1 exponent
  5932 00:EEC5: 90 04              BCC   LAB_2680          ; branch if sum of exponents <$0100
  5933                        
  5934 00:EEC7: 30 31              BMI   LAB_269B          ; do overflow error
  5935                        
  5936 00:EEC9: 18                 CLC                     ; clear carry for the add
  5937 00:EECA: 2C                 .byte $2C               ; makes next line BIT $1410
  5938                        LAB_2680
  5939 00:EECB: 10 12              BPL   LAB_2696          ; if +ve go handle underflow
  5940                        
  5941 00:EECD: 69 80              ADC   #$80              ; adjust exponent
  5942 00:EECF: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  5943 00:EED1: D0 03              BNE   LAB_268B          ; branch if not zero
  5944                        
  5945 00:EED3: 4C 61 ED           JMP   LAB_24F5          ; save FAC1 sign and return
  5946                        
  5947                        LAB_268B
  5948 00:EED6: A5 B8              LDA   FAC_sc            ; get sign compare (FAC1 EOR FAC2)
  5949 00:EED8: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  5950                        LAB_268F
  5951 00:EEDA: 60                 RTS
  5952                        
  5953                        ; handle overflow and underflow
  5954                        
  5955                        LAB_2690
  5956 00:EEDB: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  5957 00:EEDD: 10 1B              BPL   LAB_269B          ; do overflow error
  5958                        
  5959                                                      ; handle underflow
  5960                        LAB_2696
  5961 00:EEDF: 68                 PLA                     ; pop return address low byte
  5962 00:EEE0: 68                 PLA                     ; pop return address high byte
  5963 00:EEE1: 4C 5D ED           JMP   LAB_24F1          ; clear FAC1 exponent and sign and return
  5964                        
  5965                        ; multiply by 10
  5966                        
  5967                        LAB_269E
  5968 00:EEE4: 20 D7 EF           JSR   LAB_27AB          ; round and copy FAC1 to FAC2
  5969 00:EEE7: AA                 TAX                     ; copy exponent (set the flags)
  5970 00:EEE8: F0 F0              BEQ   LAB_268F          ; exit if zero
  5971                        
  5972 00:EEEA: 18                 CLC                     ; clear carry for add
  5973 00:EEEB: 69 02              ADC   #$02              ; add two to exponent (*4)
  5974 00:EEED: B0 0B              BCS   LAB_269B          ; do overflow error if > $FF
  5975                        
  5976 00:EEEF: A2 00              LDX   #$00              ; clear byte
  5977 00:EEF1: 86 B8              STX   FAC_sc            ; clear sign compare (FAC1 EOR FAC2)
  5978 00:EEF3: 20 E8 EC           JSR   LAB_247C          ; add FAC2 to FAC1 (*5)
  5979 00:EEF6: E6 AC              INC   FAC1_e            ; increment FAC1 exponent (*10)
  5980 00:EEF8: D0 E0              BNE   LAB_268F          ; if non zero just do RTS
  5981                        
  5982                        LAB_269B
  5983 00:EEFA: 4C D0 ED           JMP   LAB_2564          ; do overflow error and warm start
  5984                        
  5985                        ; divide by 10
  5986                        
  5987                        LAB_26B9
  5988 00:EEFD: 20 D7 EF           JSR   LAB_27AB          ; round and copy FAC1 to FAC2
  5989 00:EF00: A9 01              LDA   #<LAB_26B5        ; set pointer to 10d low addr
  5990 00:EF02: A0 F9              LDY   #>LAB_26B5        ; set pointer to 10d high addr
  5991 00:EF04: A2 00              LDX   #$00              ; clear sign
  5992                        
  5993                        ; divide by (AY) (X=sign)
  5994                        
  5995                        LAB_26C2
  5996 00:EF06: 86 B8              STX   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  5997 00:EF08: 20 8A EF           JSR   LAB_UFAC          ; unpack memory (AY) into FAC1
  5998 00:EF0B: 4C 11 EF           JMP   LAB_DIVIDE        ; do FAC2/FAC1
  5999                        
  6000                                                      ; Perform divide-by
  6001                        ; convert AY and do (AY)/FAC1
  6002                        
  6003                        LAB_26CA
  6004 00:EF0E: 20 98 EE           JSR   LAB_264D          ; unpack memory (AY) into FAC2
  6005                        
  6006                                                      ; Perform divide-into
  6007                        LAB_DIVIDE
  6008 00:EF11: F0 63              BEQ   LAB_2737          ; if zero go do /0 error
  6009                        
  6010 00:EF13: 20 E6 EF           JSR   LAB_27BA          ; round FAC1
  6011 00:EF16: A9 00              LDA   #$00              ; clear A
  6012 00:EF18: 38                 SEC                     ; set carry for subtract
  6013 00:EF19: E5 AC              SBC   FAC1_e            ; subtract FAC1 exponent (2s complement)
  6014 00:EF1B: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  6015 00:EF1D: 20 BE EE           JSR   LAB_2673          ; test and adjust accumulators
  6016 00:EF20: E6 AC              INC   FAC1_e            ; increment FAC1 exponent
  6017 00:EF22: F0 D6              BEQ   LAB_269B          ; if zero do overflow error
  6018                        
  6019 00:EF24: A2 FF              LDX   #$FF              ; set index for pre increment
  6020 00:EF26: A9 01              LDA   #$01              ; set bit to flag byte save
  6021                        LAB_26E4
  6022 00:EF28: A4 B4              LDY   FAC2_1            ; get FAC2 mantissa1
  6023 00:EF2A: C4 AD              CPY   FAC1_1            ; compare FAC1 mantissa1
  6024 00:EF2C: D0 0A              BNE   LAB_26F4          ; branch if <>
  6025                        
  6026 00:EF2E: A4 B5              LDY   FAC2_2            ; get FAC2 mantissa2
  6027 00:EF30: C4 AE              CPY   FAC1_2            ; compare FAC1 mantissa2
  6028 00:EF32: D0 04              BNE   LAB_26F4          ; branch if <>
  6029                        
  6030 00:EF34: A4 B6              LDY   FAC2_3            ; get FAC2 mantissa3
  6031 00:EF36: C4 AF              CPY   FAC1_3            ; compare FAC1 mantissa3
  6032                        LAB_26F4
  6033 00:EF38: 08                 PHP                     ; save FAC2-FAC1 compare status
  6034 00:EF39: 2A                 ROL                     ; shift the result byte
  6035 00:EF3A: 90 0E              BCC   LAB_2702          ; if no carry skip the byte save
  6036                        
  6037 00:EF3C: A0 01              LDY   #$01              ; set bit to flag byte save
  6038 00:EF3E: E8                 INX                     ; else increment the index to FACt
  6039 00:EF3F: E0 02              CPX   #$02              ; compare with the index to FACt_3
  6040 00:EF41: 30 04              BMI   LAB_2701          ; if not last byte just go save it
  6041                        
  6042 00:EF43: D0 28              BNE   LAB_272B          ; if all done go save FAC1 rounding byte, normalise and
  6043                                                      ; return
  6044                        
  6045 00:EF45: A0 40              LDY   #$40              ; set bit to flag byte save for the rounding byte
  6046                        LAB_2701
  6047 00:EF47: 95 75              STA   FACt_1,X          ; write result byte to FACt_1 + index
  6048 00:EF49: 98                 TYA                     ; copy the next save byte flag
  6049                        LAB_2702
  6050 00:EF4A: 28                 PLP                     ; restore FAC2-FAC1 compare status
  6051 00:EF4B: 90 14              BCC   LAB_2704          ; if FAC2 < FAC1 then skip the subtract
  6052                        
  6053 00:EF4D: A8                 TAY                     ; save FAC2-FAC1 compare status
  6054 00:EF4E: A5 B6              LDA   FAC2_3            ; get FAC2 mantissa3
  6055 00:EF50: E5 AF              SBC   FAC1_3            ; subtract FAC1 mantissa3
  6056 00:EF52: 85 B6              STA   FAC2_3            ; save FAC2 mantissa3
  6057 00:EF54: A5 B5              LDA   FAC2_2            ; get FAC2 mantissa2
  6058 00:EF56: E5 AE              SBC   FAC1_2            ; subtract FAC1 mantissa2
  6059 00:EF58: 85 B5              STA   FAC2_2            ; save FAC2 mantissa2
  6060 00:EF5A: A5 B4              LDA   FAC2_1            ; get FAC2 mantissa1
  6061 00:EF5C: E5 AD              SBC   FAC1_1            ; subtract FAC1 mantissa1
  6062 00:EF5E: 85 B4              STA   FAC2_1            ; save FAC2 mantissa1
  6063 00:EF60: 98                 TYA                     ; restore FAC2-FAC1 compare status
  6064                        
  6065                                                      ; FAC2 = FAC2*2
  6066                        LAB_2704
  6067 00:EF61: 06 B6              ASL   FAC2_3            ; shift FAC2 mantissa3
  6068 00:EF63: 26 B5              ROL   FAC2_2            ; shift FAC2 mantissa2
  6069 00:EF65: 26 B4              ROL   FAC2_1            ; shift FAC2 mantissa1
  6070 00:EF67: B0 CF              BCS   LAB_26F4          ; loop with no compare
  6071                        
  6072 00:EF69: 30 BD              BMI   LAB_26E4          ; loop with compare
  6073                        
  6074 00:EF6B: 10 CB              BPL   LAB_26F4          ; loop always with no compare
  6075                        
  6076                        ; do A<<6, save as FAC1 rounding byte, normalise and return
  6077                        
  6078                        LAB_272B
  6079 00:EF6D: 4A                 LSR                     ; shift b1 - b0 ..
  6080 00:EF6E: 6A                 ROR                     ; ..
  6081 00:EF6F: 6A                 ROR                     ; .. to b7 - b6
  6082 00:EF70: 85 B9              STA   FAC1_r            ; save FAC1 rounding byte
  6083 00:EF72: 28                 PLP                     ; dump FAC2-FAC1 compare status
  6084 00:EF73: 4C 7B EF           JMP   LAB_273C          ; copy temp to FAC1, normalise and return
  6085                        
  6086                        ; do "Divide by zero" error
  6087                        
  6088                        LAB_2737
  6089 00:EF76: A2 14              LDX   #$14              ; error code $14 ("Divide by zero" error)
  6090 00:EF78: 4C 3F D8           JMP   LAB_XERR          ; do error #X, then warm start
  6091                        
  6092                        ; copy temp to FAC1 and normalise
  6093                        
  6094                        LAB_273C
  6095 00:EF7B: A5 75              LDA   FACt_1            ; get temp mantissa1
  6096 00:EF7D: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  6097 00:EF7F: A5 76              LDA   FACt_2            ; get temp mantissa2
  6098 00:EF81: 85 AE              STA   FAC1_2            ; save FAC1 mantissa2
  6099 00:EF83: A5 77              LDA   FACt_3            ; get temp mantissa3
  6100 00:EF85: 85 AF              STA   FAC1_3            ; save FAC1 mantissa3
  6101 00:EF87: 4C 41 ED           JMP   LAB_24D5          ; normalise FAC1 and return
  6102                        
  6103                        ; unpack memory (AY) into FAC1
  6104                        
  6105                        LAB_UFAC
  6106 00:EF8A: 85 71              STA   ut1_pl            ; save pointer low byte
  6107 00:EF8C: 84 72              STY   ut1_ph            ; save pointer high byte
  6108 00:EF8E: A0 03              LDY   #$03              ; 4 bytes to do
  6109 00:EF90: B1 71              LDA   (ut1_pl),Y        ; get last byte
  6110 00:EF92: 85 AF              STA   FAC1_3            ; save FAC1 mantissa3
  6111 00:EF94: 88                 DEY                     ; decrement index
  6112 00:EF95: B1 71              LDA   (ut1_pl),Y        ; get last-1 byte
  6113 00:EF97: 85 AE              STA   FAC1_2            ; save FAC1 mantissa2
  6114 00:EF99: 88                 DEY                     ; decrement index
  6115 00:EF9A: B1 71              LDA   (ut1_pl),Y        ; get second byte
  6116 00:EF9C: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  6117 00:EF9E: 09 80              ORA   #$80              ; set 1xxx xxxx (add normal bit)
  6118 00:EFA0: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  6119 00:EFA2: 88                 DEY                     ; decrement index
  6120 00:EFA3: B1 71              LDA   (ut1_pl),Y        ; get first byte (exponent)
  6121 00:EFA5: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  6122 00:EFA7: 84 B9              STY   FAC1_r            ; clear FAC1 rounding byte
  6123 00:EFA9: 60                 RTS
  6124                        
  6125                        ; pack FAC1 into Adatal
  6126                        
  6127                        LAB_276E
  6128 00:EFAA: A2 A4              LDX   #<Adatal          ; set pointer low byte
  6129                        LAB_2770
  6130 00:EFAC: A0 00              LDY   #>Adatal          ; set pointer high byte
  6131 00:EFAE: F0 04              BEQ   LAB_2778          ; pack FAC1 into (XY) and return
  6132                        
  6133                        ; pack FAC1 into (Lvarpl)
  6134                        
  6135                        LAB_PFAC
  6136 00:EFB0: A6 97              LDX   Lvarpl            ; get destination pointer low byte
  6137 00:EFB2: A4 98              LDY   Lvarph            ; get destination pointer high byte
  6138                        
  6139                        ; pack FAC1 into (XY)
  6140                        
  6141                        LAB_2778
  6142 00:EFB4: 20 E6 EF           JSR   LAB_27BA          ; round FAC1
  6143 00:EFB7: 86 71              STX   ut1_pl            ; save pointer low byte
  6144 00:EFB9: 84 72              STY   ut1_ph            ; save pointer high byte
  6145 00:EFBB: A0 03              LDY   #$03              ; set index
  6146 00:EFBD: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  6147 00:EFBF: 91 71              STA   (ut1_pl),Y        ; store in destination
  6148 00:EFC1: 88                 DEY                     ; decrement index
  6149 00:EFC2: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  6150 00:EFC4: 91 71              STA   (ut1_pl),Y        ; store in destination
  6151 00:EFC6: 88                 DEY                     ; decrement index
  6152 00:EFC7: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  6153 00:EFC9: 09 7F              ORA   #$7F              ; set bits x111 1111
  6154 00:EFCB: 25 AD              AND   FAC1_1            ; AND in FAC1 mantissa1
  6155 00:EFCD: 91 71              STA   (ut1_pl),Y        ; store in destination
  6156 00:EFCF: 88                 DEY                     ; decrement index
  6157 00:EFD0: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6158 00:EFD2: 91 71              STA   (ut1_pl),Y        ; store in destination
  6159 00:EFD4: 84 B9              STY   FAC1_r            ; clear FAC1 rounding byte
  6160 00:EFD6: 60                 RTS
  6161                        
  6162                        ; round and copy FAC1 to FAC2
  6163                        
  6164                        LAB_27AB
  6165 00:EFD7: 20 E6 EF           JSR   LAB_27BA          ; round FAC1
  6166                        
  6167                        ; copy FAC1 to FAC2
  6168                        
  6169                        LAB_27AE
  6170 00:EFDA: A2 05              LDX   #$05              ; 5 bytes to copy
  6171                        LAB_27B0
  6172 00:EFDC: B5 AB              LDA   FAC1_e-1,X        ; get byte from FAC1,X
  6173 00:EFDE: 95 B2              STA   FAC1_o,X          ; save byte at FAC2,X
  6174 00:EFE0: CA                 DEX                     ; decrement count
  6175 00:EFE1: D0 F9              BNE   LAB_27B0          ; loop if not all done
  6176                        
  6177 00:EFE3: 86 B9              STX   FAC1_r            ; clear FAC1 rounding byte
  6178                        LAB_27B9
  6179 00:EFE5: 60                 RTS
  6180                        
  6181                        ; round FAC1
  6182                        
  6183                        LAB_27BA
  6184 00:EFE6: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6185 00:EFE8: F0 FB              BEQ   LAB_27B9          ; exit if zero
  6186                        
  6187 00:EFEA: 06 B9              ASL   FAC1_r            ; shift FAC1 rounding byte
  6188 00:EFEC: 90 F7              BCC   LAB_27B9          ; exit if no overflow
  6189                        
  6190                        ; round FAC1 (no check)
  6191                        
  6192                        LAB_27C2
  6193 00:EFEE: 20 C5 ED           JSR   LAB_2559          ; increment FAC1 mantissa
  6194 00:EFF1: D0 F2              BNE   LAB_27B9          ; branch if no overflow
  6195                        
  6196 00:EFF3: 4C 96 ED           JMP   LAB_252A          ; normalise FAC1 for C=1 and return
  6197                        
  6198                        ; get FAC1 sign
  6199                        ; return A=FF,C=1/-ve A=01,C=0/+ve
  6200                        
  6201                        LAB_27CA
  6202 00:EFF6: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6203 00:EFF8: F0 09              BEQ   LAB_27D7          ; exit if zero (already correct SGN(0)=0)
  6204                        
  6205                        ; return A=FF,C=1/-ve A=01,C=0/+ve
  6206                        ; no = 0 check
  6207                        
  6208                        LAB_27CE
  6209 00:EFFA: A5 B0              LDA   FAC1_s            ; else get FAC1 sign (b7)
  6210                        
  6211                        ; return A=FF,C=1/-ve A=01,C=0/+ve
  6212                        ; no = 0 check, sign in A
  6213                        
  6214                        LAB_27D0
  6215 00:EFFC: 2A                 ROL                     ; move sign bit to carry
  6216 00:EFFD: A9 FF              LDA   #$FF              ; set byte for -ve result
  6217 00:EFFF: B0 02              BCS   LAB_27D7          ; return if sign was set (-ve)
  6218                        
  6219 00:F001: A9 01              LDA   #$01              ; else set byte for +ve result
  6220                        LAB_27D7
  6221 00:F003: 60                 RTS
  6222                        
  6223                        ; perform SGN()
  6224                        
  6225                        LAB_SGN
  6226 00:F004: 20 F6 EF           JSR   LAB_27CA          ; get FAC1 sign
  6227                                                      ; return A=$FF/-ve A=$01/+ve
  6228                        ; save A as integer byte
  6229                        
  6230                        LAB_27DB
  6231 00:F007: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  6232 00:F009: A9 00              LDA   #$00              ; clear A
  6233 00:F00B: 85 AE              STA   FAC1_2            ; clear FAC1 mantissa2
  6234 00:F00D: A2 88              LDX   #$88              ; set exponent
  6235                        
  6236                        ; set exp=X, clearFAC1 mantissa3 and normalise
  6237                        
  6238                        LAB_27E3
  6239 00:F00F: A5 AD              LDA   FAC1_1            ; get FAC1 mantissa1
  6240 00:F011: 49 FF              EOR   #$FF              ; complement it
  6241 00:F013: 2A                 ROL                     ; sign bit into carry
  6242                        
  6243                        ; set exp=X, clearFAC1 mantissa3 and normalise
  6244                        
  6245                        LAB_STFA
  6246 00:F014: A9 00              LDA   #$00              ; clear A
  6247 00:F016: 85 AF              STA   FAC1_3            ; clear FAC1 mantissa3
  6248 00:F018: 86 AC              STX   FAC1_e            ; set FAC1 exponent
  6249 00:F01A: 85 B9              STA   FAC1_r            ; clear FAC1 rounding byte
  6250 00:F01C: 85 B0              STA   FAC1_s            ; clear FAC1 sign (b7)
  6251 00:F01E: 4C 3C ED           JMP   LAB_24D0          ; do ABS and normalise FAC1
  6252                        
  6253                        ; perform ABS()
  6254                        
  6255                        LAB_ABS
  6256 00:F021: 46 B0              LSR   FAC1_s            ; clear FAC1 sign (put zero in b7)
  6257 00:F023: 60                 RTS
  6258                        
  6259                        ; compare FAC1 with (AY)
  6260                        ; returns A=$00 if FAC1 = (AY)
  6261                        ; returns A=$01 if FAC1 > (AY)
  6262                        ; returns A=$FF if FAC1 < (AY)
  6263                        
  6264                        LAB_27F8
  6265 00:F024: 85 73              STA   ut2_pl            ; save pointer low byte
  6266                        LAB_27FA
  6267 00:F026: 84 74              STY   ut2_ph            ; save pointer high byte
  6268 00:F028: A0 00              LDY   #$00              ; clear index
  6269 00:F02A: B1 73              LDA   (ut2_pl),Y        ; get exponent
  6270 00:F02C: C8                 INY                     ; increment index
  6271 00:F02D: AA                 TAX                     ; copy (AY) exponent to X
  6272 00:F02E: F0 C6              BEQ   LAB_27CA          ; branch if (AY) exponent=0 and get FAC1 sign
  6273                                                      ; A=FF,C=1/-ve A=01,C=0/+ve
  6274                        
  6275 00:F030: B1 73              LDA   (ut2_pl),Y        ; get (AY) mantissa1 (with sign)
  6276 00:F032: 45 B0              EOR   FAC1_s            ; EOR FAC1 sign (b7)
  6277 00:F034: 30 C4              BMI   LAB_27CE          ; if signs <> do return A=FF,C=1/-ve
  6278                                                      ; A=01,C=0/+ve and return
  6279                        
  6280 00:F036: E4 AC              CPX   FAC1_e            ; compare (AY) exponent with FAC1 exponent
  6281 00:F038: D0 1A              BNE   LAB_2828          ; branch if different
  6282                        
  6283 00:F03A: B1 73              LDA   (ut2_pl),Y        ; get (AY) mantissa1 (with sign)
  6284 00:F03C: 09 80              ORA   #$80              ; normalise top bit
  6285 00:F03E: C5 AD              CMP   FAC1_1            ; compare with FAC1 mantissa1
  6286 00:F040: D0 12              BNE   LAB_2828          ; branch if different
  6287                        
  6288 00:F042: C8                 INY                     ; increment index
  6289 00:F043: B1 73              LDA   (ut2_pl),Y        ; get mantissa2
  6290 00:F045: C5 AE              CMP   FAC1_2            ; compare with FAC1 mantissa2
  6291 00:F047: D0 0B              BNE   LAB_2828          ; branch if different
  6292                        
  6293 00:F049: C8                 INY                     ; increment index
  6294 00:F04A: A9 7F              LDA   #$7F              ; set for 1/2 value rounding byte
  6295 00:F04C: C5 B9              CMP   FAC1_r            ; compare with FAC1 rounding byte (set carry)
  6296 00:F04E: B1 73              LDA   (ut2_pl),Y        ; get mantissa3
  6297 00:F050: E5 AF              SBC   FAC1_3            ; subtract FAC1 mantissa3
  6298 00:F052: F0 28              BEQ   LAB_2850          ; exit if mantissa3 equal
  6299                        
  6300                        ; gets here if number <> FAC1
  6301                        
  6302                        LAB_2828
  6303 00:F054: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  6304 00:F056: 90 02              BCC   LAB_282E          ; branch if FAC1 > (AY)
  6305                        
  6306 00:F058: 49 FF              EOR   #$FF              ; else toggle FAC1 sign
  6307                        LAB_282E
  6308 00:F05A: 4C FC EF           JMP   LAB_27D0          ; return A=FF,C=1/-ve A=01,C=0/+ve
  6309                        
  6310                        ; convert FAC1 floating-to-fixed
  6311                        
  6312                        LAB_2831
  6313 00:F05D: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6314 00:F05F: F0 4A              BEQ   LAB_287F          ; if zero go clear FAC1 and return
  6315                        
  6316 00:F061: 38                 SEC                     ; set carry for subtract
  6317 00:F062: E9 98              SBC   #$98              ; subtract maximum integer range exponent
  6318 00:F064: 24 B0              BIT   FAC1_s            ; test FAC1 sign (b7)
  6319 00:F066: 10 09              BPL   LAB_2845          ; branch if FAC1 +ve
  6320                        
  6321                                                      ; FAC1 was -ve
  6322 00:F068: AA                 TAX                     ; copy subtracted exponent
  6323 00:F069: A9 FF              LDA   #$FF              ; overflow for -ve number
  6324 00:F06B: 85 B2              STA   FAC1_o            ; set FAC1 overflow byte
  6325 00:F06D: 20 A9 ED           JSR   LAB_253D          ; twos complement FAC1 mantissa
  6326 00:F070: 8A                 TXA                     ; restore subtracted exponent
  6327                        LAB_2845
  6328 00:F071: A2 AC              LDX   #FAC1_e           ; set index to FAC1
  6329 00:F073: C9 F9              CMP   #$F9              ; compare exponent result
  6330 00:F075: 10 06              BPL   LAB_2851          ; if < 8 shifts shift FAC1 A times right and return
  6331                        
  6332 00:F077: 20 E7 ED           JSR   LAB_257B          ; shift FAC1 A times right (> 8 shifts)
  6333 00:F07A: 84 B2              STY   FAC1_o            ; clear FAC1 overflow byte
  6334                        LAB_2850
  6335 00:F07C: 60                 RTS
  6336                        
  6337                        ; shift FAC1 A times right
  6338                        
  6339                        LAB_2851
  6340 00:F07D: A8                 TAY                     ; copy shift count
  6341 00:F07E: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  6342 00:F080: 29 80              AND   #$80              ; mask sign bit only (x000 0000)
  6343 00:F082: 46 AD              LSR   FAC1_1            ; shift FAC1 mantissa1
  6344 00:F084: 05 AD              ORA   FAC1_1            ; OR sign in b7 FAC1 mantissa1
  6345 00:F086: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  6346 00:F088: 20 FE ED           JSR   LAB_2592          ; shift FAC1 Y times right
  6347 00:F08B: 84 B2              STY   FAC1_o            ; clear FAC1 overflow byte
  6348 00:F08D: 60                 RTS
  6349                        
  6350                        ; perform INT()
  6351                        
  6352                        LAB_INT
  6353 00:F08E: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6354 00:F090: C9 98              CMP   #$98              ; compare with max int
  6355 00:F092: B0 1E              BCS   LAB_2886          ; exit if >= (already int, too big for fractional part!)
  6356                        
  6357 00:F094: 20 5D F0           JSR   LAB_2831          ; convert FAC1 floating-to-fixed
  6358 00:F097: 84 B9              STY   FAC1_r            ; save FAC1 rounding byte
  6359 00:F099: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  6360 00:F09B: 84 B0              STY   FAC1_s            ; save FAC1 sign (b7)
  6361 00:F09D: 49 80              EOR   #$80              ; toggle FAC1 sign
  6362 00:F09F: 2A                 ROL                     ; shift into carry
  6363 00:F0A0: A9 98              LDA   #$98              ; set new exponent
  6364 00:F0A2: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  6365 00:F0A4: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  6366 00:F0A6: 85 5B              STA   Temp3             ; save for EXP() function
  6367 00:F0A8: 4C 3C ED           JMP   LAB_24D0          ; do ABS and normalise FAC1
  6368                        
  6369                        ; clear FAC1 and return
  6370                        
  6371                        LAB_287F
  6372 00:F0AB: 85 AD              STA   FAC1_1            ; clear FAC1 mantissa1
  6373 00:F0AD: 85 AE              STA   FAC1_2            ; clear FAC1 mantissa2
  6374 00:F0AF: 85 AF              STA   FAC1_3            ; clear FAC1 mantissa3
  6375 00:F0B1: A8                 TAY                     ; clear Y
  6376                        LAB_2886
  6377 00:F0B2: 60                 RTS
  6378                        
  6379                        ; get FAC1 from string
  6380                        ; this routine now handles hex and binary values from strings
  6381                        ; starting with "$" and "%" respectively
  6382                        
  6383                        LAB_2887
  6384 00:F0B3: A0 00              LDY   #$00              ; clear Y
  6385 00:F0B5: 84 5F              STY   Dtypef            ; clear data type flag, $FF=string, $00=numeric
  6386 00:F0B7: A2 09              LDX   #$09              ; set index
  6387                        LAB_288B
  6388 00:F0B9: 94 A8              STY   numexp,X          ; clear byte
  6389 00:F0BB: CA                 DEX                     ; decrement index
  6390 00:F0BC: 10 FB              BPL   LAB_288B          ; loop until numexp to negnum (and FAC1) = $00
  6391                        
  6392 00:F0BE: 90 7F              BCC   LAB_28FE          ; branch if 1st character numeric
  6393                        
  6394                        ; get FAC1 from string .. first character wasn't numeric
  6395                        
  6396 00:F0C0: C9 2D              CMP   #'-'              ; else compare with "-"
  6397 00:F0C2: D0 04              BNE   LAB_289A          ; branch if not "-"
  6398                        
  6399 00:F0C4: 86 B1              STX   negnum            ; set flag for -ve number (X = $FF)
  6400 00:F0C6: F0 04              BEQ   LAB_289C          ; branch always (go scan and check for hex/bin)
  6401                        
  6402                        ; get FAC1 from string .. first character wasn't numeric or -
  6403                        
  6404                        LAB_289A
  6405 00:F0C8: C9 2B              CMP   #'+'              ; else compare with "+"
  6406 00:F0CA: D0 05              BNE   LAB_289D          ; branch if not "+" (go check for hex/bin)
  6407                        
  6408                        ; was "+" or "-" to start, so get next character
  6409                        
  6410                        LAB_289C
  6411 00:F0CC: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  6412 00:F0CF: 90 6E              BCC   LAB_28FE          ; branch if numeric character
  6413                        
  6414                        ; code here for hex and binary numbers
  6415                        
  6416                        LAB_289D
  6417 00:F0D1: C9 24              CMP   #'$'              ; else compare with "$"
  6418 00:F0D3: D0 03              BNE   LAB_NHEX          ; branch if not "$"
  6419                        
  6420 00:F0D5: 4C 7D F5           JMP   LAB_CHEX          ; branch if "$"
  6421                        
  6422                        LAB_NHEX
  6423 00:F0D8: C9 25              CMP   #'%'              ; else compare with "%"
  6424 00:F0DA: D0 08              BNE   LAB_28A3          ; branch if not "%" (continue original code)
  6425                        
  6426 00:F0DC: 4C AB F5           JMP   LAB_CBIN          ; branch if "%"
  6427                        
  6428                        LAB_289E
  6429 00:F0DF: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory (ignore + or get next number)
  6430                        LAB_28A1
  6431 00:F0E2: 90 5B              BCC   LAB_28FE          ; branch if numeric character
  6432                        
  6433                        ; get FAC1 from string .. character wasn't numeric, -, +, hex or binary
  6434                        
  6435                        LAB_28A3
  6436 00:F0E4: C9 2E              CMP   #'.'              ; else compare with "."
  6437 00:F0E6: F0 2E              BEQ   LAB_28D5          ; branch if "."
  6438                        
  6439                        ; get FAC1 from string .. character wasn't numeric, -, + or .
  6440                        
  6441 00:F0E8: C9 45              CMP   #'E'              ; else compare with "E"
  6442 00:F0EA: D0 30              BNE   LAB_28DB          ; branch if not "E"
  6443                        
  6444                                                      ; was "E" so evaluate exponential part
  6445 00:F0EC: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  6446 00:F0EF: 90 17              BCC   LAB_28C7          ; branch if numeric character
  6447                        
  6448 00:F0F1: C9 B7              CMP   #TK_MINUS         ; else compare with token for -
  6449 00:F0F3: F0 0E              BEQ   LAB_28C2          ; branch if token for -
  6450                        
  6451 00:F0F5: C9 2D              CMP   #'-'              ; else compare with "-"
  6452 00:F0F7: F0 0A              BEQ   LAB_28C2          ; branch if "-"
  6453                        
  6454 00:F0F9: C9 B6              CMP   #TK_PLUS          ; else compare with token for +
  6455 00:F0FB: F0 08              BEQ   LAB_28C4          ; branch if token for +
  6456                        
  6457 00:F0FD: C9 2B              CMP   #'+'              ; else compare with "+"
  6458 00:F0FF: F0 04              BEQ   LAB_28C4          ; branch if "+"
  6459                        
  6460 00:F101: D0 07              BNE   LAB_28C9          ; branch always
  6461                        
  6462                        LAB_28C2
  6463 00:F103: 66 AB              ROR   expneg            ; set exponent -ve flag (C, which=1, into b7)
  6464                        LAB_28C4
  6465 00:F105: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  6466                        LAB_28C7
  6467 00:F108: 90 5B              BCC   LAB_2925          ; branch if numeric character
  6468                        
  6469                        LAB_28C9
  6470 00:F10A: 24 AB              BIT   expneg            ; test exponent -ve flag
  6471 00:F10C: 10 0E              BPL   LAB_28DB          ; if +ve go evaluate exponent
  6472                        
  6473                                                      ; else do exponent = -exponent 
  6474 00:F10E: A9 00              LDA   #$00              ; clear result
  6475 00:F110: 38                 SEC                     ; set carry for subtract
  6476 00:F111: E5 A9              SBC   expcnt            ; subtract exponent byte
  6477 00:F113: 4C 1E F1           JMP   LAB_28DD          ; go evaluate exponent
  6478                        
  6479                        LAB_28D5
  6480 00:F116: 66 AA              ROR   numdpf            ; set decimal point flag
  6481 00:F118: 24 AA              BIT   numdpf            ; test decimal point flag
  6482 00:F11A: 50 C3              BVC   LAB_289E          ; branch if only one decimal point so far
  6483                        
  6484                                                      ; evaluate exponent
  6485                        LAB_28DB
  6486 00:F11C: A5 A9              LDA   expcnt            ; get exponent count byte
  6487                        LAB_28DD
  6488 00:F11E: 38                 SEC                     ; set carry for subtract
  6489 00:F11F: E5 A8              SBC   numexp            ; subtract numerator exponent
  6490 00:F121: 85 A9              STA   expcnt            ; save exponent count byte
  6491 00:F123: F0 12              BEQ   LAB_28F6          ; branch if no adjustment
  6492                        
  6493 00:F125: 10 09              BPL   LAB_28EF          ; else if +ve go do FAC1*10^expcnt
  6494                        
  6495                                                      ; else go do FAC1/10^(0-expcnt)
  6496                        LAB_28E6
  6497 00:F127: 20 FD EE           JSR   LAB_26B9          ; divide by 10
  6498 00:F12A: E6 A9              INC   expcnt            ; increment exponent count byte
  6499 00:F12C: D0 F9              BNE   LAB_28E6          ; loop until all done
  6500                        
  6501 00:F12E: F0 07              BEQ   LAB_28F6          ; branch always
  6502                        
  6503                        LAB_28EF
  6504 00:F130: 20 E4 EE           JSR   LAB_269E          ; multiply by 10
  6505 00:F133: C6 A9              DEC   expcnt            ; decrement exponent count byte
  6506 00:F135: D0 F9              BNE   LAB_28EF          ; loop until all done
  6507                        
  6508                        LAB_28F6
  6509 00:F137: A5 B1              LDA   negnum            ; get -ve flag
  6510 00:F139: 30 01              BMI   LAB_28FB          ; if -ve do - FAC1 and return
  6511                        
  6512 00:F13B: 60                 RTS
  6513                        
  6514                        ; do - FAC1 and return
  6515                        
  6516                        LAB_28FB
  6517 00:F13C: 4C 01 F3           JMP   LAB_GTHAN         ; do - FAC1 and return
  6518                        
  6519                        ; do unsigned FAC1*10+number
  6520                        
  6521                        LAB_28FE
  6522 00:F13F: 48                 PHA                     ; save character
  6523 00:F140: 24 AA              BIT   numdpf            ; test decimal point flag
  6524 00:F142: 10 02              BPL   LAB_2905          ; skip exponent increment if not set
  6525                        
  6526 00:F144: E6 A8              INC   numexp            ; else increment number exponent
  6527                        LAB_2905
  6528 00:F146: 20 E4 EE           JSR   LAB_269E          ; multiply FAC1 by 10
  6529 00:F149: 68                 PLA                     ; restore character
  6530 00:F14A: 29 0F              AND   #$0F              ; convert to binary
  6531 00:F14C: 20 52 F1           JSR   LAB_2912          ; evaluate new ASCII digit
  6532 00:F14F: 4C DF F0           JMP   LAB_289E          ; go do next character
  6533                        
  6534                        ; evaluate new ASCII digit
  6535                        
  6536                        LAB_2912
  6537 00:F152: 48                 PHA                     ; save digit
  6538 00:F153: 20 D7 EF           JSR   LAB_27AB          ; round and copy FAC1 to FAC2
  6539 00:F156: 68                 PLA                     ; restore digit
  6540 00:F157: 20 07 F0           JSR   LAB_27DB          ; save A as integer byte
  6541 00:F15A: A5 B7              LDA   FAC2_s            ; get FAC2 sign (b7)
  6542 00:F15C: 45 B0              EOR   FAC1_s            ; toggle with FAC1 sign (b7)
  6543 00:F15E: 85 B8              STA   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  6544 00:F160: A6 AC              LDX   FAC1_e            ; get FAC1 exponent
  6545 00:F162: 4C CE EC           JMP   LAB_ADD           ; add FAC2 to FAC1 and return
  6546                        
  6547                        ; evaluate next character of exponential part of number
  6548                        
  6549                        LAB_2925
  6550 00:F165: A5 A9              LDA   expcnt            ; get exponent count byte
  6551 00:F167: C9 0A              CMP   #$0A              ; compare with 10 decimal
  6552 00:F169: 90 09              BCC   LAB_2934          ; branch if less
  6553                        
  6554 00:F16B: A9 64              LDA   #$64              ; make all -ve exponents = -100 decimal (causes underflow)
  6555 00:F16D: 24 AB              BIT   expneg            ; test exponent -ve flag
  6556 00:F16F: 30 0E              BMI   LAB_2942          ; branch if -ve
  6557                        
  6558 00:F171: 4C D0 ED           JMP   LAB_2564          ; else do overflow error
  6559                        
  6560                        LAB_2934
  6561 00:F174: 0A                 ASL                     ; * 2
  6562 00:F175: 0A                 ASL                     ; * 4
  6563 00:F176: 65 A9              ADC   expcnt            ; * 5
  6564 00:F178: 0A                 ASL                     ; * 10
  6565 00:F179: A0 00              LDY   #$00              ; set index
  6566 00:F17B: 71 C3              ADC   (Bpntrl),Y        ; add character (will be $30 too much!)
  6567 00:F17D: E9 2F              SBC   #'0'-1            ; convert character to binary
  6568                        LAB_2942
  6569 00:F17F: 85 A9              STA   expcnt            ; save exponent count byte
  6570 00:F181: 4C 05 F1           JMP   LAB_28C4          ; go get next character
  6571                        
  6572                        ; print " in line [LINE #]"
  6573                        
  6574                        LAB_2953
  6575 00:F184: A9 FD              LDA   #<LAB_LMSG        ; point to " in line " message low byte
  6576 00:F186: A0 FE              LDY   #>LAB_LMSG        ; point to " in line " message high byte
  6577 00:F188: 20 D4 DF           JSR   LAB_18C3          ; print null terminated string from memory
  6578                        
  6579                                                      ; print Basic line #
  6580 00:F18B: A5 88              LDA   Clineh            ; get current line high byte
  6581 00:F18D: A6 87              LDX   Clinel            ; get current line low byte
  6582                        
  6583                        ; print XA as unsigned integer
  6584                        
  6585                        LAB_295E
  6586 00:F18F: 85 AD              STA   FAC1_1            ; save low byte as FAC1 mantissa1
  6587 00:F191: 86 AE              STX   FAC1_2            ; save high byte as FAC1 mantissa2
  6588 00:F193: A2 90              LDX   #$90              ; set exponent to 16d bits
  6589 00:F195: 38                 SEC                     ; set integer is +ve flag
  6590 00:F196: 20 14 F0           JSR   LAB_STFA          ; set exp=X, clearFAC1 mantissa3 and normalise
  6591 00:F199: A0 00              LDY   #$00              ; clear index
  6592 00:F19B: 98                 TYA                     ; clear A
  6593 00:F19C: 20 AF F1           JSR   LAB_297B          ; convert FAC1 to string, skip sign character save
  6594 00:F19F: 4C D4 DF           JMP   LAB_18C3          ; print null terminated string from memory and return
  6595                        
  6596                        ; convert FAC1 to ASCII string result in (AY)
  6597                        ; not any more, moved scratchpad to page 0
  6598                        
  6599                        LAB_296E
  6600 00:F1A2: A0 01              LDY   #$01              ; set index = 1
  6601 00:F1A4: A9 20              LDA   #$20              ; character = " " (assume +ve)
  6602 00:F1A6: 24 B0              BIT   FAC1_s            ; test FAC1 sign (b7)
  6603 00:F1A8: 10 02              BPL   LAB_2978          ; branch if +ve
  6604                        
  6605 00:F1AA: A9 2D              LDA   #$2D              ; else character = "-"
  6606                        LAB_2978
  6607 00:F1AC: 99 EF 00           STA   Decss,Y           ; save leading character (" " or "-")
  6608                        LAB_297B
  6609 00:F1AF: 85 B0              STA   FAC1_s            ; clear FAC1 sign (b7)
  6610 00:F1B1: 84 BA              STY   Sendl             ; save index
  6611 00:F1B3: C8                 INY                     ; increment index
  6612 00:F1B4: A6 AC              LDX   FAC1_e            ; get FAC1 exponent
  6613 00:F1B6: D0 05              BNE   LAB_2989          ; branch if FAC1<>0
  6614                        
  6615                                                      ; exponent was $00 so FAC1 is 0
  6616 00:F1B8: A9 30              LDA   #'0'              ; set character = "0"
  6617 00:F1BA: 4C BB F2           JMP   LAB_2A89          ; save last character, [EOT] and exit
  6618                        
  6619                                                      ; FAC1 is some non zero value
  6620                        LAB_2989
  6621 00:F1BD: A9 00              LDA   #$00              ; clear (number exponent count)
  6622 00:F1BF: E0 81              CPX   #$81              ; compare FAC1 exponent with $81 (>1.00000)
  6623                        
  6624 00:F1C1: B0 09              BCS   LAB_299A          ; branch if FAC1=>1
  6625                        
  6626                                                      ; FAC1<1
  6627 00:F1C3: A9 91              LDA   #<LAB_294F        ; set pointer low byte to 1,000,000
  6628 00:F1C5: A0 F8              LDY   #>LAB_294F        ; set pointer high byte to 1,000,000
  6629 00:F1C7: 20 46 EE           JSR   LAB_25FB          ; do convert AY, FCA1*(AY)
  6630 00:F1CA: A9 FA              LDA   #$FA              ; set number exponent count (-6)
  6631                        LAB_299A
  6632 00:F1CC: 85 A8              STA   numexp            ; save number exponent count
  6633                        LAB_299C
  6634 00:F1CE: A9 8D              LDA   #<LAB_294B        ; set pointer low byte to 999999.4375 (max before sci note)
  6635 00:F1D0: A0 F8              LDY   #>LAB_294B        ; set pointer high byte to 999999.4375
  6636 00:F1D2: 20 24 F0           JSR   LAB_27F8          ; compare FAC1 with (AY)
  6637 00:F1D5: F0 1E              BEQ   LAB_29C3          ; exit if FAC1 = (AY)
  6638                        
  6639 00:F1D7: 10 12              BPL   LAB_29B9          ; go do /10 if FAC1 > (AY)
  6640                        
  6641                                                      ; FAC1 < (AY)
  6642                        LAB_29A7
  6643 00:F1D9: A9 89              LDA   #<LAB_2947        ; set pointer low byte to 99999.9375
  6644 00:F1DB: A0 F8              LDY   #>LAB_2947        ; set pointer high byte to 99999.9375
  6645 00:F1DD: 20 24 F0           JSR   LAB_27F8          ; compare FAC1 with (AY)
  6646 00:F1E0: F0 02              BEQ   LAB_29B2          ; branch if FAC1 = (AY) (allow decimal places)
  6647                        
  6648 00:F1E2: 10 0E              BPL   LAB_29C0          ; branch if FAC1 > (AY) (no decimal places)
  6649                        
  6650                                                      ; FAC1 <= (AY)
  6651                        LAB_29B2
  6652 00:F1E4: 20 E4 EE           JSR   LAB_269E          ; multiply by 10
  6653 00:F1E7: C6 A8              DEC   numexp            ; decrement number exponent count
  6654 00:F1E9: D0 EE              BNE   LAB_29A7          ; go test again (branch always)
  6655                        
  6656                        LAB_29B9
  6657 00:F1EB: 20 FD EE           JSR   LAB_26B9          ; divide by 10
  6658 00:F1EE: E6 A8              INC   numexp            ; increment number exponent count
  6659 00:F1F0: D0 DC              BNE   LAB_299C          ; go test again (branch always)
  6660                        
  6661                        ; now we have just the digits to do
  6662                        
  6663                        LAB_29C0
  6664 00:F1F2: 20 C7 EC           JSR   LAB_244E          ; add 0.5 to FAC1 (round FAC1)
  6665                        LAB_29C3
  6666 00:F1F5: 20 5D F0           JSR   LAB_2831          ; convert FAC1 floating-to-fixed
  6667 00:F1F8: A2 01              LDX   #$01              ; set default digits before dp = 1
  6668 00:F1FA: A5 A8              LDA   numexp            ; get number exponent count
  6669 00:F1FC: 18                 CLC                     ; clear carry for add
  6670 00:F1FD: 69 07              ADC   #$07              ; up to 6 digits before point
  6671 00:F1FF: 30 09              BMI   LAB_29D8          ; if -ve then 1 digit before dp
  6672                        
  6673 00:F201: C9 08              CMP   #$08              ; A>=8 if n>=1E6
  6674 00:F203: B0 06              BCS   LAB_29D9          ; branch if >= $08
  6675                        
  6676                                                      ; carry is clear
  6677 00:F205: 69 FF              ADC   #$FF              ; take 1 from digit count
  6678 00:F207: AA                 TAX                     ; copy to A
  6679 00:F208: A9 02              LDA   #$02              ;.set exponent adjust
  6680                        LAB_29D8
  6681 00:F20A: 38                 SEC                     ; set carry for subtract
  6682                        LAB_29D9
  6683 00:F20B: E9 02              SBC   #$02              ; -2
  6684 00:F20D: 85 A9              STA   expcnt            ;.save exponent adjust
  6685 00:F20F: 86 A8              STX   numexp            ; save digits before dp count
  6686 00:F211: 8A                 TXA                     ; copy to A
  6687 00:F212: F0 02              BEQ   LAB_29E4          ; branch if no digits before dp
  6688                        
  6689 00:F214: 10 13              BPL   LAB_29F7          ; branch if digits before dp
  6690                        
  6691                        LAB_29E4
  6692 00:F216: A4 BA              LDY   Sendl             ; get output string index
  6693 00:F218: A9 2E              LDA   #$2E              ; character "."
  6694 00:F21A: C8                 INY                     ; increment index
  6695 00:F21B: 99 EF 00           STA   Decss,Y           ; save to output string
  6696 00:F21E: 8A                 TXA                     ;.
  6697 00:F21F: F0 06              BEQ   LAB_29F5          ;.
  6698                        
  6699 00:F221: A9 30              LDA   #'0'              ; character "0"
  6700 00:F223: C8                 INY                     ; increment index
  6701 00:F224: 99 EF 00           STA   Decss,Y           ; save to output string
  6702                        LAB_29F5
  6703 00:F227: 84 BA              STY   Sendl             ; save output string index
  6704                        LAB_29F7
  6705 00:F229: A0 00              LDY   #$00              ; clear index (point to 100,000)
  6706 00:F22B: A2 80              LDX   #$80              ; 
  6707                        LAB_29FB
  6708 00:F22D: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  6709 00:F22F: 18                 CLC                     ; clear carry for add
  6710 00:F230: 79 07 F9           ADC   LAB_2A9C,Y        ; add -ve LSB
  6711 00:F233: 85 AF              STA   FAC1_3            ; save FAC1 mantissa3
  6712 00:F235: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  6713 00:F237: 79 06 F9           ADC   LAB_2A9B,Y        ; add -ve NMSB
  6714 00:F23A: 85 AE              STA   FAC1_2            ; save FAC1 mantissa2
  6715 00:F23C: A5 AD              LDA   FAC1_1            ; get FAC1 mantissa1
  6716 00:F23E: 79 05 F9           ADC   LAB_2A9A,Y        ; add -ve MSB
  6717 00:F241: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  6718 00:F243: E8                 INX                     ; 
  6719 00:F244: B0 04              BCS   LAB_2A18          ; 
  6720                        
  6721 00:F246: 10 E5              BPL   LAB_29FB          ; not -ve so try again
  6722                        
  6723 00:F248: 30 02              BMI   LAB_2A1A          ; 
  6724                        
  6725                        LAB_2A18
  6726 00:F24A: 30 E1              BMI   LAB_29FB          ; 
  6727                        
  6728                        LAB_2A1A
  6729 00:F24C: 8A                 TXA                     ; 
  6730 00:F24D: 90 04              BCC   LAB_2A21          ; 
  6731                        
  6732 00:F24F: 49 FF              EOR   #$FF              ; 
  6733 00:F251: 69 0A              ADC   #$0A              ; 
  6734                        LAB_2A21
  6735 00:F253: 69 2F              ADC   #'0'-1            ; add "0"-1 to result
  6736 00:F255: C8                 INY                     ; increment index ..
  6737 00:F256: C8                 INY                     ; .. to next less ..
  6738 00:F257: C8                 INY                     ; .. power of ten
  6739 00:F258: 84 95              STY   Cvaral            ; save as current var address low byte
  6740 00:F25A: A4 BA              LDY   Sendl             ; get output string index
  6741 00:F25C: C8                 INY                     ; increment output string index
  6742 00:F25D: AA                 TAX                     ; copy character to X
  6743 00:F25E: 29 7F              AND   #$7F              ; mask out top bit
  6744 00:F260: 99 EF 00           STA   Decss,Y           ; save to output string
  6745 00:F263: C6 A8              DEC   numexp            ; decrement # of characters before the dp
  6746 00:F265: D0 06              BNE   LAB_2A3B          ; branch if still characters to do
  6747                        
  6748                                                      ; else output the point
  6749 00:F267: A9 2E              LDA   #$2E              ; character "."
  6750 00:F269: C8                 INY                     ; increment output string index
  6751 00:F26A: 99 EF 00           STA   Decss,Y           ; save to output string
  6752                        LAB_2A3B
  6753 00:F26D: 84 BA              STY   Sendl             ; save output string index
  6754 00:F26F: A4 95              LDY   Cvaral            ; get current var address low byte
  6755 00:F271: 8A                 TXA                     ; get character back
  6756 00:F272: 49 FF              EOR   #$FF              ; 
  6757 00:F274: 29 80              AND   #$80              ; 
  6758 00:F276: AA                 TAX                     ; 
  6759 00:F277: C0 12              CPY   #$12              ; compare index with max
  6760 00:F279: D0 B2              BNE   LAB_29FB          ; loop if not max
  6761                        
  6762                                                      ; now remove trailing zeroes
  6763 00:F27B: A4 BA              LDY   Sendl             ; get output string index
  6764                        LAB_2A4B
  6765 00:F27D: B9 EF 00           LDA   Decss,Y           ; get character from output string
  6766 00:F280: 88                 DEY                     ; decrement output string index
  6767 00:F281: C9 30              CMP   #'0'              ; compare with "0"
  6768 00:F283: F0 F8              BEQ   LAB_2A4B          ; loop until non "0" character found
  6769                        
  6770 00:F285: C9 2E              CMP   #'.'              ; compare with "."
  6771 00:F287: F0 01              BEQ   LAB_2A58          ; branch if was dp
  6772                        
  6773                                                      ; restore last character
  6774 00:F289: C8                 INY                     ; increment output string index
  6775                        LAB_2A58
  6776 00:F28A: A9 2B              LDA   #$2B              ; character "+"
  6777 00:F28C: A6 A9              LDX   expcnt            ; get exponent count
  6778 00:F28E: F0 2E              BEQ   LAB_2A8C          ; if zero go set null terminator and exit
  6779                        
  6780                                                      ; exponent isn't zero so write exponent
  6781 00:F290: 10 08              BPL   LAB_2A68          ; branch if exponent count +ve
  6782                        
  6783 00:F292: A9 00              LDA   #$00              ; clear A
  6784 00:F294: 38                 SEC                     ; set carry for subtract
  6785 00:F295: E5 A9              SBC   expcnt            ; subtract exponent count adjust (convert -ve to +ve)
  6786 00:F297: AA                 TAX                     ; copy exponent count to X
  6787 00:F298: A9 2D              LDA   #'-'              ; character "-"
  6788                        LAB_2A68
  6789 00:F29A: 99 F1 00           STA   Decss+2,Y         ; save to output string
  6790 00:F29D: A9 45              LDA   #$45              ; character "E"
  6791 00:F29F: 99 F0 00           STA   Decss+1,Y         ; save exponent sign to output string
  6792 00:F2A2: 8A                 TXA                     ; get exponent count back
  6793 00:F2A3: A2 2F              LDX   #'0'-1            ; one less than "0" character
  6794 00:F2A5: 38                 SEC                     ; set carry for subtract
  6795                        LAB_2A74
  6796 00:F2A6: E8                 INX                     ; increment 10's character
  6797 00:F2A7: E9 0A              SBC   #$0A              ;.subtract 10 from exponent count
  6798 00:F2A9: B0 FB              BCS   LAB_2A74          ; loop while still >= 0
  6799                        
  6800 00:F2AB: 69 3A              ADC   #':'              ; add character ":" ($30+$0A, result is 10 less that value)
  6801 00:F2AD: 99 F3 00           STA   Decss+4,Y         ; save to output string
  6802 00:F2B0: 8A                 TXA                     ; copy 10's character
  6803 00:F2B1: 99 F2 00           STA   Decss+3,Y         ; save to output string
  6804 00:F2B4: A9 00              LDA   #$00              ; set null terminator
  6805 00:F2B6: 99 F4 00           STA   Decss+5,Y         ; save to output string
  6806 00:F2B9: F0 08              BEQ   LAB_2A91          ; go set string pointer (AY) and exit (branch always)
  6807                        
  6808                                                      ; save last character, [EOT] and exit
  6809                        LAB_2A89
  6810 00:F2BB: 99 EF 00           STA   Decss,Y           ; save last character to output string
  6811                        
  6812                                                      ; set null terminator and exit
  6813                        LAB_2A8C
  6814 00:F2BE: A9 00              LDA   #$00              ; set null terminator
  6815 00:F2C0: 99 F0 00           STA   Decss+1,Y         ; save after last character
  6816                        
  6817                                                      ; set string pointer (AY) and exit
  6818                        LAB_2A91
  6819 00:F2C3: A9 F0              LDA   #<Decssp1         ; set result string low pointer
  6820 00:F2C5: A0 00              LDY   #>Decssp1         ; set result string high pointer
  6821 00:F2C7: 60                 RTS
  6822                        
  6823                        ; perform power function
  6824                        
  6825                        LAB_POWER
  6826 00:F2C8: F0 42              BEQ   LAB_EXP           ; go do  EXP()
  6827                        
  6828 00:F2CA: A5 B3              LDA   FAC2_e            ; get FAC2 exponent
  6829 00:F2CC: D0 03              BNE   LAB_2ABF          ; branch if FAC2<>0
  6830                        
  6831 00:F2CE: 4C 5F ED           JMP   LAB_24F3          ; clear FAC1 exponent and sign and return
  6832                        
  6833                        LAB_2ABF
  6834 00:F2D1: A2 9C              LDX   #<func_l          ; set destination pointer low byte
  6835 00:F2D3: A0 00              LDY   #>func_l          ; set destination pointer high byte
  6836 00:F2D5: 20 B4 EF           JSR   LAB_2778          ; pack FAC1 into (XY)
  6837 00:F2D8: A5 B7              LDA   FAC2_s            ; get FAC2 sign (b7)
  6838 00:F2DA: 10 0F              BPL   LAB_2AD9          ; branch if FAC2>0
  6839                        
  6840                                                      ; else FAC2 is -ve and can only be raised to an
  6841                                                      ; integer power which gives an x +j0 result
  6842 00:F2DC: 20 8E F0           JSR   LAB_INT           ; perform INT
  6843 00:F2DF: A9 9C              LDA   #<func_l          ; set source pointer low byte
  6844 00:F2E1: A0 00              LDY   #>func_l          ; set source pointer high byte
  6845 00:F2E3: 20 24 F0           JSR   LAB_27F8          ; compare FAC1 with (AY)
  6846 00:F2E6: D0 03              BNE   LAB_2AD9          ; branch if FAC1 <> (AY) to allow Function Call error
  6847                                                      ; this will leave FAC1 -ve and cause a Function Call
  6848                                                      ; error when LOG() is called
  6849                        
  6850 00:F2E8: 98                 TYA                     ; clear sign b7
  6851 00:F2E9: A4 5B              LDY   Temp3             ; save mantissa 3 from INT() function as sign in Y
  6852                                                      ; for possible later negation, b0
  6853                        LAB_2AD9
  6854 00:F2EB: 20 D2 EC           JSR   LAB_279D          ; save FAC1 sign and copy ABS(FAC2) to FAC1
  6855 00:F2EE: 98                 TYA                     ; copy sign back ..
  6856 00:F2EF: 48                 PHA                     ; .. and save it
  6857 00:F2F0: 20 08 EE           JSR   LAB_LOG           ; do LOG(n)
  6858 00:F2F3: A9 9C              LDA   #<garb_l          ; set pointer low byte
  6859 00:F2F5: A0 00              LDY   #>garb_l          ; set pointer high byte
  6860 00:F2F7: 20 46 EE           JSR   LAB_25FB          ; do convert AY, FCA1*(AY) (square the value)
  6861 00:F2FA: 20 0C F3           JSR   LAB_EXP           ; go do EXP(n)
  6862 00:F2FD: 68                 PLA                     ; pull sign from stack
  6863 00:F2FE: 4A                 LSR                     ; b0 is to be tested, shift to Cb
  6864 00:F2FF: 90 0A              BCC   LAB_2AF9          ; if no bit then exit
  6865                        
  6866                                                      ; Perform negation
  6867                        ; do - FAC1
  6868                        
  6869                        LAB_GTHAN
  6870 00:F301: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6871 00:F303: F0 06              BEQ   LAB_2AF9          ; exit if FAC1_e = $00
  6872                        
  6873 00:F305: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  6874 00:F307: 49 FF              EOR   #$FF              ; complement it
  6875 00:F309: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  6876                        LAB_2AF9
  6877 00:F30B: 60                 RTS
  6878                        
  6879                        ; perform EXP()   (x^e)
  6880                        
  6881                        LAB_EXP
  6882 00:F30C: A9 95              LDA   #<LAB_2AFA        ; set 1.443 pointer low byte
  6883 00:F30E: A0 F8              LDY   #>LAB_2AFA        ; set 1.443 pointer high byte
  6884 00:F310: 20 46 EE           JSR   LAB_25FB          ; do convert AY, FCA1*(AY)
  6885 00:F313: A5 B9              LDA   FAC1_r            ; get FAC1 rounding byte
  6886 00:F315: 69 50              ADC   #$50              ; +$50/$100
  6887 00:F317: 90 03              BCC   LAB_2B2B          ; skip rounding if no carry
  6888                        
  6889 00:F319: 20 EE EF           JSR   LAB_27C2          ; round FAC1 (no check)
  6890                        LAB_2B2B
  6891 00:F31C: 85 A3              STA   FAC2_r            ; save FAC2 rounding byte
  6892 00:F31E: 20 DA EF           JSR   LAB_27AE          ; copy FAC1 to FAC2
  6893 00:F321: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6894 00:F323: C9 88              CMP   #$88              ; compare with EXP limit (256d)
  6895 00:F325: 90 03              BCC   LAB_2B39          ; branch if less
  6896                        
  6897                        LAB_2B36
  6898 00:F327: 20 DB EE           JSR   LAB_2690          ; handle overflow and underflow
  6899                        LAB_2B39
  6900 00:F32A: 20 8E F0           JSR   LAB_INT           ; perform INT
  6901 00:F32D: A5 5B              LDA   Temp3             ; get mantissa 3 from INT() function
  6902 00:F32F: 18                 CLC                     ; clear carry for add
  6903 00:F330: 69 81              ADC   #$81              ; normalise +1
  6904 00:F332: F0 F3              BEQ   LAB_2B36          ; if $00 go handle overflow
  6905                        
  6906 00:F334: 38                 SEC                     ; set carry for subtract
  6907 00:F335: E9 01              SBC   #$01              ; now correct for exponent
  6908 00:F337: 48                 PHA                     ; save FAC2 exponent
  6909                        
  6910                                                      ; swap FAC1 and FAC2
  6911 00:F338: A2 04              LDX   #$04              ; 4 bytes to do
  6912                        LAB_2B49
  6913 00:F33A: B5 B3              LDA   FAC2_e,X          ; get FAC2,X
  6914 00:F33C: B4 AC              LDY   FAC1_e,X          ; get FAC1,X
  6915 00:F33E: 95 AC              STA   FAC1_e,X          ; save FAC1,X
  6916 00:F340: 94 B3              STY   FAC2_e,X          ; save FAC2,X
  6917 00:F342: CA                 DEX                     ; decrement count/index
  6918 00:F343: 10 F5              BPL   LAB_2B49          ; loop if not all done
  6919                        
  6920 00:F345: A5 A3              LDA   FAC2_r            ; get FAC2 rounding byte
  6921 00:F347: 85 B9              STA   FAC1_r            ; save as FAC1 rounding byte
  6922 00:F349: 20 B3 EC           JSR   LAB_SUBTRACT      ; perform subtraction, FAC2 from FAC1
  6923 00:F34C: 20 01 F3           JSR   LAB_GTHAN         ; do - FAC1
  6924 00:F34F: A9 99              LDA   #<LAB_2AFE        ; set counter pointer low byte
  6925 00:F351: A0 F8              LDY   #>LAB_2AFE        ; set counter pointer high byte
  6926 00:F353: 20 74 F3           JSR   LAB_2B84          ; go do series evaluation
  6927 00:F356: A9 00              LDA   #$00              ; clear A
  6928 00:F358: 85 B8              STA   FAC_sc            ; clear sign compare (FAC1 EOR FAC2)
  6929 00:F35A: 68                 PLA                     ;.get saved FAC2 exponent
  6930 00:F35B: 4C C0 EE           JMP   LAB_2675          ; test and adjust accumulators and return
  6931                        
  6932                        ; ^2 then series evaluation
  6933                        
  6934                        LAB_2B6E
  6935 00:F35E: 85 BA              STA   Cptrl             ; save count pointer low byte
  6936 00:F360: 84 BB              STY   Cptrh             ; save count pointer high byte
  6937 00:F362: 20 AA EF           JSR   LAB_276E          ; pack FAC1 into Adatal
  6938 00:F365: A9 A4              LDA   #<Adatal          ; set pointer low byte (Y already $00)
  6939 00:F367: 20 46 EE           JSR   LAB_25FB          ; do convert AY, FCA1*(AY)
  6940 00:F36A: 20 78 F3           JSR   LAB_2B88          ; go do series evaluation
  6941 00:F36D: A9 A4              LDA   #<Adatal          ; pointer to original # low byte
  6942 00:F36F: A0 00              LDY   #>Adatal          ; pointer to original # high byte
  6943 00:F371: 4C 46 EE           JMP   LAB_25FB          ; do convert AY, FCA1*(AY) and return
  6944                        
  6945                        ; series evaluation
  6946                        
  6947                        LAB_2B84
  6948 00:F374: 85 BA              STA   Cptrl             ; save count pointer low byte
  6949 00:F376: 84 BB              STY   Cptrh             ; save count pointer high byte
  6950                        LAB_2B88
  6951 00:F378: A2 A8              LDX   #<numexp          ; set pointer low byte
  6952 00:F37A: 20 AC EF           JSR   LAB_2770          ; set pointer high byte and pack FAC1 into numexp
  6953 00:F37D: B1 BA              LDA   (Cptrl),Y         ; get constants count
  6954 00:F37F: 85 B1              STA   numcon            ; save constants count
  6955 00:F381: A4 BA              LDY   Cptrl             ; get count pointer low byte
  6956 00:F383: C8                 INY                     ; increment it (now constants pointer)
  6957 00:F384: 98                 TYA                     ; copy it
  6958 00:F385: D0 02              BNE   LAB_2B97          ; skip next if no overflow
  6959                        
  6960 00:F387: E6 BB              INC   Cptrh             ; else increment high byte
  6961                        LAB_2B97
  6962 00:F389: 85 BA              STA   Cptrl             ; save low byte
  6963 00:F38B: A4 BB              LDY   Cptrh             ; get high byte
  6964                        LAB_2B9B
  6965 00:F38D: 20 46 EE           JSR   LAB_25FB          ; do convert AY, FCA1*(AY)
  6966 00:F390: A5 BA              LDA   Cptrl             ; get constants pointer low byte
  6967 00:F392: A4 BB              LDY   Cptrh             ; get constants pointer high byte
  6968 00:F394: 18                 CLC                     ; clear carry for add
  6969 00:F395: 69 04              ADC   #$04              ; +4 to  low pointer (4 bytes per constant)
  6970 00:F397: 90 01              BCC   LAB_2BA8          ; skip next if no overflow
  6971                        
  6972 00:F399: C8                 INY                     ; increment high byte
  6973                        LAB_2BA8
  6974 00:F39A: 85 BA              STA   Cptrl             ; save pointer low byte
  6975 00:F39C: 84 BB              STY   Cptrh             ; save pointer high byte
  6976 00:F39E: 20 CB EC           JSR   LAB_246C          ; add (AY) to FAC1
  6977 00:F3A1: A9 A8              LDA   #<numexp          ; set pointer low byte to partial @ numexp
  6978 00:F3A3: A0 00              LDY   #>numexp          ; set pointer high byte to partial @ numexp
  6979 00:F3A5: C6 B1              DEC   numcon            ; decrement constants count
  6980 00:F3A7: D0 E4              BNE   LAB_2B9B          ; loop until all done
  6981                        
  6982 00:F3A9: 60                 RTS
  6983                        
  6984                        ; RND(n), 32 bit Galoise version. make n=0 for 19th next number in sequence or n<>0
  6985                        ; to get 19th next number in sequence after seed n. This version of the PRNG uses
  6986                        ; the Galois method and a sample of 65536 bytes produced gives the following values.
  6987                        
  6988                        ; Entropy = 7.997442 bits per byte
  6989                        ; Optimum compression would reduce these 65536 bytes by 0 percent
  6990                        
  6991                        ; Chi square distribution for 65536 samples is 232.01, and
  6992                        ; randomly would exceed this value 75.00 percent of the time
  6993                        
  6994                        ; Arithmetic mean value of data bytes is 127.6724, 127.5 would be random
  6995                        ; Monte Carlo value for Pi is 3.122871269, error 0.60 percent
  6996                        ; Serial correlation coefficient is -0.000370, totally uncorrelated would be 0.0
  6997                        
  6998                        LAB_RND
  6999 00:F3AA: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  7000 00:F3AC: F0 07              BEQ   NextPRN           ; do next random # if zero
  7001                        
  7002                                                      ; else get seed into random number store
  7003 00:F3AE: A2 D8              LDX   #Rbyte4           ; set PRNG pointer low byte
  7004 00:F3B0: A0 00              LDY   #$00              ; set PRNG pointer high byte
  7005 00:F3B2: 20 B4 EF           JSR   LAB_2778          ; pack FAC1 into (XY)
  7006                        NextPRN
  7007 00:F3B5: A2 AF              LDX   #$AF              ; set EOR byte
  7008 00:F3B7: A0 13              LDY   #$13              ; do this nineteen times
  7009                        LoopPRN
  7010 00:F3B9: 06 D9              ASL   Rbyte1            ; shift PRNG most significant byte
  7011 00:F3BB: 26 DA              ROL   Rbyte2            ; shift PRNG middle byte
  7012 00:F3BD: 26 DB              ROL   Rbyte3            ; shift PRNG least significant byte
  7013 00:F3BF: 26 D8              ROL   Rbyte4            ; shift PRNG extra byte
  7014 00:F3C1: 90 05              BCC   Ninc1             ; branch if bit 32 clear
  7015                        
  7016 00:F3C3: 8A                 TXA                     ; set EOR byte
  7017 00:F3C4: 45 D9              EOR   Rbyte1            ; EOR PRNG extra byte
  7018 00:F3C6: 85 D9              STA   Rbyte1            ; save new PRNG extra byte
  7019                        Ninc1
  7020 00:F3C8: 88                 DEY                     ; decrement loop count
  7021 00:F3C9: D0 EE              BNE   LoopPRN           ; loop if not all done
  7022                        
  7023 00:F3CB: A2 02              LDX   #$02              ; three bytes to copy
  7024                        CopyPRNG
  7025 00:F3CD: B5 D9              LDA   Rbyte1,X          ; get PRNG byte
  7026 00:F3CF: 95 AD              STA   FAC1_1,X          ; save FAC1 byte
  7027 00:F3D1: CA                 DEX
  7028 00:F3D2: 10 F9              BPL   CopyPRNG          ; loop if not complete
  7029                        
  7030 00:F3D4: A9 80              LDA   #$80              ; set the exponent
  7031 00:F3D6: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  7032                        
  7033 00:F3D8: 0A                 ASL                     ; clear A
  7034 00:F3D9: 85 B0              STA   FAC1_s            ; save FAC1 sign
  7035                        
  7036 00:F3DB: 4C 41 ED           JMP   LAB_24D5          ; normalise FAC1 and return
  7037                        
  7038                        ; perform COS()
  7039                        
  7040                        LAB_COS
  7041 00:F3DE: A9 B6              LDA   #<LAB_2C78        ; set (pi/2) pointer low byte
  7042 00:F3E0: A0 F8              LDY   #>LAB_2C78        ; set (pi/2) pointer high byte
  7043 00:F3E2: 20 CB EC           JSR   LAB_246C          ; add (AY) to FAC1
  7044                        
  7045                        ; perform SIN()
  7046                        
  7047                        LAB_SIN
  7048 00:F3E5: 20 D7 EF           JSR   LAB_27AB          ; round and copy FAC1 to FAC2
  7049 00:F3E8: A9 CB              LDA   #<LAB_2C7C        ; set (2*pi) pointer low byte
  7050 00:F3EA: A0 F8              LDY   #>LAB_2C7C        ; set (2*pi) pointer high byte
  7051 00:F3EC: A6 B7              LDX   FAC2_s            ; get FAC2 sign (b7)
  7052 00:F3EE: 20 06 EF           JSR   LAB_26C2          ; divide by (AY) (X=sign)
  7053 00:F3F1: 20 D7 EF           JSR   LAB_27AB          ; round and copy FAC1 to FAC2
  7054 00:F3F4: 20 8E F0           JSR   LAB_INT           ; perform INT
  7055 00:F3F7: A9 00              LDA   #$00              ; clear byte
  7056 00:F3F9: 85 B8              STA   FAC_sc            ; clear sign compare (FAC1 EOR FAC2)
  7057 00:F3FB: 20 B3 EC           JSR   LAB_SUBTRACT      ; perform subtraction, FAC2 from FAC1
  7058 00:F3FE: A9 FD              LDA   #<LAB_2C80        ; set 0.25 pointer low byte
  7059 00:F400: A0 F8              LDY   #>LAB_2C80        ; set 0.25 pointer high byte
  7060 00:F402: 20 B0 EC           JSR   LAB_2455          ; perform subtraction, (AY) from FAC1
  7061 00:F405: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  7062 00:F407: 48                 PHA                     ; save FAC1 sign
  7063 00:F408: 10 0D              BPL   LAB_2C35          ; branch if +ve
  7064                        
  7065                                                      ; FAC1 sign was -ve
  7066 00:F40A: 20 C7 EC           JSR   LAB_244E          ; add 0.5 to FAC1
  7067 00:F40D: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  7068 00:F40F: 30 09              BMI   LAB_2C38          ; branch if -ve
  7069                        
  7070 00:F411: A5 63              LDA   Cflag             ; get comparison evaluation flag
  7071 00:F413: 49 FF              EOR   #$FF              ; toggle flag
  7072 00:F415: 85 63              STA   Cflag             ; save comparison evaluation flag
  7073                        LAB_2C35
  7074 00:F417: 20 01 F3           JSR   LAB_GTHAN         ; do - FAC1
  7075                        LAB_2C38
  7076 00:F41A: A9 FD              LDA   #<LAB_2C80        ; set 0.25 pointer low byte
  7077 00:F41C: A0 F8              LDY   #>LAB_2C80        ; set 0.25 pointer high byte
  7078 00:F41E: 20 CB EC           JSR   LAB_246C          ; add (AY) to FAC1
  7079 00:F421: 68                 PLA                     ; restore FAC1 sign
  7080 00:F422: 10 03              BPL   LAB_2C45          ; branch if was +ve
  7081                        
  7082                                                      ; else correct FAC1
  7083 00:F424: 20 01 F3           JSR   LAB_GTHAN         ; do - FAC1
  7084                        LAB_2C45
  7085 00:F427: A9 BA              LDA   #<LAB_2C84        ; set pointer low byte to counter
  7086 00:F429: A0 F8              LDY   #>LAB_2C84        ; set pointer high byte to counter
  7087 00:F42B: 4C 5E F3           JMP   LAB_2B6E          ; ^2 then series evaluation and return
  7088                        
  7089                        ; perform TAN()
  7090                        
  7091                        LAB_TAN
  7092 00:F42E: 20 AA EF           JSR   LAB_276E          ; pack FAC1 into Adatal
  7093 00:F431: A9 00              LDA   #$00              ; clear byte
  7094 00:F433: 85 63              STA   Cflag             ; clear comparison evaluation flag
  7095 00:F435: 20 E5 F3           JSR   LAB_SIN           ; go do SIN(n)
  7096 00:F438: A2 9C              LDX   #<func_l          ; set sin(n) pointer low byte
  7097 00:F43A: A0 00              LDY   #>func_l          ; set sin(n) pointer high byte
  7098 00:F43C: 20 B4 EF           JSR   LAB_2778          ; pack FAC1 into (XY)
  7099 00:F43F: A9 A4              LDA   #<Adatal          ; set n pointer low addr
  7100 00:F441: A0 00              LDY   #>Adatal          ; set n pointer high addr
  7101 00:F443: 20 8A EF           JSR   LAB_UFAC          ; unpack memory (AY) into FAC1
  7102 00:F446: A9 00              LDA   #$00              ; clear byte
  7103 00:F448: 85 B0              STA   FAC1_s            ; clear FAC1 sign (b7)
  7104 00:F44A: A5 63              LDA   Cflag             ; get comparison evaluation flag
  7105 00:F44C: 20 56 F4           JSR   LAB_2C74          ; save flag and go do series evaluation
  7106                        
  7107 00:F44F: A9 9C              LDA   #<func_l          ; set sin(n) pointer low byte
  7108 00:F451: A0 00              LDY   #>func_l          ; set sin(n) pointer high byte
  7109 00:F453: 4C 0E EF           JMP   LAB_26CA          ; convert AY and do (AY)/FAC1
  7110                        
  7111                        LAB_2C74
  7112 00:F456: 48                 PHA                     ; save comparison evaluation flag
  7113 00:F457: 4C 17 F4           JMP   LAB_2C35          ; go do series evaluation
  7114                        
  7115                        ; perform USR()
  7116                        
  7117                        LAB_USR
  7118 00:F45A: 20 0A 00           JSR   Usrjmp            ; call user code
  7119 00:F45D: 4C EF E2           JMP   LAB_1BFB          ; scan for ")", else do syntax error then warm start
  7120                        
  7121                        ; perform ATN()
  7122                        
  7123                        LAB_ATN
  7124 00:F460: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  7125 00:F462: 48                 PHA                     ; save sign
  7126 00:F463: 10 03              BPL   LAB_2CA1          ; branch if +ve
  7127                        
  7128 00:F465: 20 01 F3           JSR   LAB_GTHAN         ; else do - FAC1
  7129                        LAB_2CA1
  7130 00:F468: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  7131 00:F46A: 48                 PHA                     ; push exponent
  7132 00:F46B: C9 81              CMP   #$81              ; compare with 1
  7133 00:F46D: 90 07              BCC   LAB_2CAF          ; branch if FAC1<1
  7134                        
  7135 00:F46F: A9 F0              LDA   #<LAB_259C        ; set 1 pointer low byte
  7136 00:F471: A0 F8              LDY   #>LAB_259C        ; set 1 pointer high byte
  7137 00:F473: 20 0E EF           JSR   LAB_26CA          ; convert AY and do (AY)/FAC1
  7138                        LAB_2CAF
  7139 00:F476: A9 CF              LDA   #<LAB_2CC9        ; set pointer low byte to counter
  7140 00:F478: A0 F8              LDY   #>LAB_2CC9        ; set pointer high byte to counter
  7141 00:F47A: 20 5E F3           JSR   LAB_2B6E          ; ^2 then series evaluation
  7142 00:F47D: 68                 PLA                     ; restore old FAC1 exponent
  7143 00:F47E: C9 81              CMP   #$81              ; compare with 1
  7144 00:F480: 90 07              BCC   LAB_2CC2          ; branch if FAC1<1
  7145                        
  7146 00:F482: A9 B6              LDA   #<LAB_2C78        ; set (pi/2) pointer low byte
  7147 00:F484: A0 F8              LDY   #>LAB_2C78        ; set (pi/2) pointer high byte
  7148 00:F486: 20 B0 EC           JSR   LAB_2455          ; perform subtraction, (AY) from FAC1
  7149                        LAB_2CC2
  7150 00:F489: 68                 PLA                     ; restore FAC1 sign
  7151 00:F48A: 10 16              BPL   LAB_2D04          ; exit if was +ve
  7152                        
  7153 00:F48C: 4C 01 F3           JMP   LAB_GTHAN         ; else do - FAC1 and return
  7154                        
  7155                        ; perform BITSET
  7156                        
  7157                        LAB_BITSET
  7158 00:F48F: 20 E5 EB           JSR   LAB_GADB          ; get two parameters for POKE or WAIT
  7159 00:F492: E0 08              CPX   #$08              ; only 0 to 7 are allowed
  7160 00:F494: B0 20              BCS   FCError           ; branch if > 7
  7161                        
  7162 00:F496: A9 00              LDA   #$00              ; clear A
  7163 00:F498: 38                 SEC                     ; set the carry
  7164                        S_Bits
  7165 00:F499: 2A                 ROL                     ; shift bit
  7166 00:F49A: CA                 DEX                     ; decrement bit number
  7167 00:F49B: 10 FC              BPL   S_Bits            ; loop if still +ve
  7168                        
  7169 00:F49D: E8                 INX                     ; make X = $00
  7170 00:F49E: 01 11              ORA   (Itempl,X)        ; or with byte via temporary integer (addr)
  7171 00:F4A0: 81 11              STA   (Itempl,X)        ; save byte via temporary integer (addr)
  7172                        LAB_2D04
  7173 00:F4A2: 60                 RTS
  7174                        
  7175                        ; perform BITCLR
  7176                        
  7177                        LAB_BITCLR
  7178 00:F4A3: 20 E5 EB           JSR   LAB_GADB          ; get two parameters for POKE or WAIT
  7179 00:F4A6: E0 08              CPX   #$08              ; only 0 to 7 are allowed
  7180 00:F4A8: B0 0C              BCS   FCError           ; branch if > 7
  7181                        
  7182 00:F4AA: A9 FF              LDA   #$FF              ; set A
  7183                        S_Bitc
  7184 00:F4AC: 2A                 ROL                     ; shift bit
  7185 00:F4AD: CA                 DEX                     ; decrement bit number
  7186 00:F4AE: 10 FC              BPL   S_Bitc            ; loop if still +ve
  7187                        
  7188 00:F4B0: E8                 INX                     ; make X = $00
  7189 00:F4B1: 21 11              AND   (Itempl,X)        ; and with byte via temporary integer (addr)
  7190 00:F4B3: 81 11              STA   (Itempl,X)        ; save byte via temporary integer (addr)
  7191 00:F4B5: 60                 RTS
  7192                        
  7193                        FCError
  7194 00:F4B6: 4C 37 E6           JMP   LAB_FCER          ; do function call error then warm start
  7195                        
  7196                        ; perform BITTST()
  7197                        
  7198                        LAB_BTST
  7199 00:F4B9: 20 BC 00           JSR   LAB_IGBY          ; increment BASIC pointer
  7200 00:F4BC: 20 E5 EB           JSR   LAB_GADB          ; get two parameters for POKE or WAIT
  7201 00:F4BF: E0 08              CPX   #$08              ; only 0 to 7 are allowed
  7202 00:F4C1: B0 F3              BCS   FCError           ; branch if > 7
  7203                        
  7204 00:F4C3: 20 C2 00           JSR   LAB_GBYT          ; get next BASIC byte
  7205 00:F4C6: C9 29              CMP   #')'              ; is next character ")"
  7206 00:F4C8: F0 03              BEQ   TST_OK            ; if ")" go do rest of function
  7207                        
  7208 00:F4CA: 4C 02 E3           JMP   LAB_SNER          ; do syntax error then warm start
  7209                        
  7210                        TST_OK
  7211 00:F4CD: 20 BC 00           JSR   LAB_IGBY          ; update BASIC execute pointer (to character past ")")
  7212 00:F4D0: A9 00              LDA   #$00              ; clear A
  7213 00:F4D2: 38                 SEC                     ; set the carry
  7214                        T_Bits
  7215 00:F4D3: 2A                 ROL                     ; shift bit
  7216 00:F4D4: CA                 DEX                     ; decrement bit number
  7217 00:F4D5: 10 FC              BPL   T_Bits            ; loop if still +ve
  7218                        
  7219 00:F4D7: E8                 INX                     ; make X = $00
  7220 00:F4D8: 21 11              AND   (Itempl,X)        ; AND with byte via temporary integer (addr)
  7221 00:F4DA: F0 02              BEQ   LAB_NOTT          ; branch if zero (already correct)
  7222                        
  7223 00:F4DC: A9 FF              LDA   #$FF              ; set for -1 result
  7224                        LAB_NOTT
  7225 00:F4DE: 4C 07 F0           JMP   LAB_27DB          ; go do SGN tail
  7226                        
  7227                        ; perform BIN$()
  7228                        
  7229                        LAB_BINS
  7230 00:F4E1: E0 19              CPX   #$19              ; max + 1
  7231 00:F4E3: B0 48              BCS   BinFErr           ; exit if too big ( > or = )
  7232                        
  7233 00:F4E5: 86 78              STX   TempB             ; save # of characters ($00 = leading zero remove)
  7234 00:F4E7: A9 18              LDA   #$18              ; need A byte long space
  7235 00:F4E9: 20 48 E8           JSR   LAB_MSSP          ; make string space A bytes long
  7236 00:F4EC: A0 17              LDY   #$17              ; set index
  7237 00:F4EE: A2 18              LDX   #$18              ; character count
  7238                        NextB1
  7239 00:F4F0: 46 11              LSR   nums_1            ; shift highest byte
  7240 00:F4F2: 66 12              ROR   nums_2            ; shift middle byte
  7241 00:F4F4: 66 13              ROR   nums_3            ; shift lowest byte bit 0 to carry
  7242 00:F4F6: 8A                 TXA                     ; load with "0"/2
  7243 00:F4F7: 2A                 ROL                     ; shift in carry
  7244 00:F4F8: 91 AD              STA   (str_pl),Y        ; save to temp string + index
  7245 00:F4FA: 88                 DEY                     ; decrement index
  7246 00:F4FB: 10 F3              BPL   NextB1            ; loop if not done
  7247                        
  7248 00:F4FD: A5 78              LDA   TempB             ; get # of characters
  7249 00:F4FF: F0 0A              BEQ   EndBHS            ; branch if truncate
  7250                        
  7251 00:F501: AA                 TAX                     ; copy length to X
  7252 00:F502: 38                 SEC                     ; set carry for add !
  7253 00:F503: 49 FF              EOR   #$FF              ; 1's complement
  7254 00:F505: 69 18              ADC   #$18              ; add 24d
  7255 00:F507: F0 1C              BEQ   GoPr2             ; if zero print whole string
  7256                        
  7257 00:F509: D0 0F              BNE   GoPr1             ; else go make output string
  7258                              
  7259                        ; this is the exit code and is also used by HEX$()
  7260                        ; truncate string to remove leading "0"s
  7261                        
  7262                        EndBHS
  7263 00:F50B: A8                 TAY                     ; clear index (A=0, X=length here)
  7264                        NextB2
  7265 00:F50C: B1 AD              LDA   (str_pl),Y        ; get character from string
  7266 00:F50E: C9 30              CMP   #'0'              ; compare with "0"
  7267 00:F510: D0 07              BNE   GoPr              ; if not "0" then go print string from here
  7268                        
  7269 00:F512: CA                 DEX                     ; decrement character count
  7270 00:F513: F0 03              BEQ   GoPr3             ; if zero then end of string so go print it
  7271                        
  7272 00:F515: C8                 INY                     ; else increment index
  7273 00:F516: 10 F4              BPL   NextB2            ; loop always
  7274                        
  7275                        ; make fixed length output string - ignore overflows!
  7276                        
  7277                        GoPr3
  7278 00:F518: E8                 INX                     ; need at least 1 character
  7279                        GoPr
  7280 00:F519: 98                 TYA                     ; copy result
  7281                        GoPr1
  7282 00:F51A: 18                 CLC                     ; clear carry for add
  7283 00:F51B: 65 AD              ADC   str_pl            ; add low address
  7284 00:F51D: 85 AD              STA   str_pl            ; save low address
  7285 00:F51F: A9 00              LDA   #$00              ; do high byte
  7286 00:F521: 65 AE              ADC   str_ph            ; add high address
  7287 00:F523: 85 AE              STA   str_ph            ; save high address
  7288                        GoPr2
  7289 00:F525: 86 AC              STX   str_ln            ; X holds string length
  7290 00:F527: 20 BC 00           JSR   LAB_IGBY          ; update BASIC execute pointer (to character past ")")
  7291 00:F52A: 4C 95 E8           JMP   LAB_RTST          ; check for space on descriptor stack then put address
  7292                                                      ; and length on descriptor stack and update stack pointers
  7293                        
  7294                        BinFErr
  7295 00:F52D: 4C 37 E6           JMP   LAB_FCER          ; do function call error then warm start
  7296                        
  7297                        ; perform HEX$()
  7298                        
  7299                        LAB_HEXS
  7300 00:F530: E0 07              CPX   #$07              ; max + 1
  7301 00:F532: B0 F9              BCS   BinFErr           ; exit if too big ( > or = )
  7302                        
  7303 00:F534: 86 78              STX   TempB             ; save # of characters
  7304                        
  7305 00:F536: A9 06              LDA   #$06              ; need 6 bytes for string
  7306 00:F538: 20 48 E8           JSR   LAB_MSSP          ; make string space A bytes long
  7307 00:F53B: A0 05              LDY   #$05              ; set string index
  7308                        
  7309                        ; *** disable decimal mode patch - comment next line ***
  7310                        ;      SED                     ; need decimal mode for nibble convert
  7311 00:F53D: A5 13              LDA   nums_3            ; get lowest byte
  7312 00:F53F: 20 5C F5           JSR   LAB_A2HX          ; convert A to ASCII hex byte and output
  7313 00:F542: A5 12              LDA   nums_2            ; get middle byte
  7314 00:F544: 20 5C F5           JSR   LAB_A2HX          ; convert A to ASCII hex byte and output
  7315 00:F547: A5 11              LDA   nums_1            ; get highest byte
  7316 00:F549: 20 5C F5           JSR   LAB_A2HX          ; convert A to ASCII hex byte and output
  7317                        ; *** disable decimal mode patch - comment next line ***
  7318                        ;      CLD                     ; back to binary
  7319                        
  7320 00:F54C: A2 06              LDX   #$06              ; character count
  7321 00:F54E: A5 78              LDA   TempB             ; get # of characters
  7322 00:F550: F0 B9              BEQ   EndBHS            ; branch if truncate
  7323                        
  7324 00:F552: AA                 TAX                     ; copy length to X
  7325 00:F553: 38                 SEC                     ; set carry for add !
  7326 00:F554: 49 FF              EOR   #$FF              ; 1's complement
  7327 00:F556: 69 06              ADC   #$06              ; add 6d
  7328 00:F558: F0 CB              BEQ   GoPr2             ; if zero print whole string
  7329                        
  7330 00:F55A: D0 BE              BNE   GoPr1             ; else go make output string (branch always)
  7331                        
  7332                        ; convert A to ASCII hex byte and output .. note set decimal mode before calling
  7333                        
  7334                        LAB_A2HX
  7335 00:F55C: AA                 TAX                     ; save byte
  7336 00:F55D: 29 0F              AND   #$0F              ; mask off top bits
  7337 00:F55F: 20 67 F5           JSR   LAB_AL2X          ; convert low nibble to ASCII and output
  7338 00:F562: 8A                 TXA                     ; get byte back
  7339 00:F563: 4A                 LSR                     ; /2  shift high nibble to low nibble
  7340 00:F564: 4A                 LSR                     ; /4
  7341 00:F565: 4A                 LSR                     ; /8
  7342 00:F566: 4A                 LSR                     ; /16
  7343                        LAB_AL2X
  7344 00:F567: C9 0A              CMP   #$0A              ; set carry for +1 if >9
  7345                        ; *** begin disable decimal mode patch ***
  7346                        ; *** insert
  7347 00:F569: 90 02              BCC   LAB_AL20          ; skip adjust if <= 9
  7348 00:F56B: 69 06              ADC   #$06              ; adjust for A to F
  7349                        LAB_AL20
  7350                        ; *** end   disable decimal mode patch ***
  7351 00:F56D: 69 30              ADC   #'0'              ; add ASCII "0"
  7352 00:F56F: 91 AD              STA   (str_pl),Y        ; save to temp string
  7353 00:F571: 88                 DEY                     ; decrement counter
  7354 00:F572: 60                 RTS
  7355                        
  7356                        LAB_NLTO
  7357 00:F573: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  7358 00:F575: A9 00              LDA   #$00              ; clear sign compare
  7359                        LAB_MLTE
  7360 00:F577: 85 B8              STA   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  7361 00:F579: 8A                 TXA                     ; restore character
  7362 00:F57A: 20 52 F1           JSR   LAB_2912          ; evaluate new ASCII digit
  7363                        
  7364                        ; gets here if the first character was "$" for hex
  7365                        ; get hex number
  7366                        
  7367                        LAB_CHEX
  7368 00:F57D: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  7369 00:F580: 90 0A              BCC   LAB_ISHN          ; branch if numeric character
  7370                        
  7371 00:F582: 09 20              ORA   #$20              ; case convert, allow "A" to "F" and "a" to "f"
  7372 00:F584: E9 61              SBC   #'a'              ; subtract "a" (carry set here)
  7373 00:F586: C9 06              CMP   #$06              ; compare normalised with $06 (max+1)
  7374 00:F588: B0 2A              BCS   LAB_EXCH          ; exit if >"f" or <"0"
  7375                        
  7376 00:F58A: 69 0A              ADC   #$0A              ; convert to nibble
  7377                        LAB_ISHN
  7378 00:F58C: 29 0F              AND   #$0F              ; convert to binary
  7379 00:F58E: AA                 TAX                     ; save nibble
  7380 00:F58F: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  7381 00:F591: F0 E4              BEQ   LAB_MLTE          ; skip multiply if zero
  7382                        
  7383 00:F593: 69 04              ADC   #$04              ; add four to exponent (*16 - carry clear here)
  7384 00:F595: 90 DC              BCC   LAB_NLTO          ; if no overflow do evaluate digit
  7385                        
  7386                        LAB_MLTO
  7387 00:F597: 4C D0 ED           JMP   LAB_2564          ; do overflow error and warm start
  7388                        
  7389                        LAB_NXCH
  7390 00:F59A: AA                 TAX                     ; save bit
  7391 00:F59B: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  7392 00:F59D: F0 06              BEQ   LAB_MLBT          ; skip multiply if zero
  7393                        
  7394 00:F59F: E6 AC              INC   FAC1_e            ; increment FAC1 exponent (*2)
  7395 00:F5A1: F0 F4              BEQ   LAB_MLTO          ; do overflow error if = $00
  7396                        
  7397 00:F5A3: A9 00              LDA   #$00              ; clear sign compare
  7398                        LAB_MLBT
  7399 00:F5A5: 85 B8              STA   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  7400 00:F5A7: 8A                 TXA                     ; restore bit
  7401 00:F5A8: 20 52 F1           JSR   LAB_2912          ; evaluate new ASCII digit
  7402                        
  7403                        ; gets here if the first character was  "%" for binary
  7404                        ; get binary number
  7405                        
  7406                        LAB_CBIN
  7407 00:F5AB: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  7408 00:F5AE: 49 30              EOR   #'0'              ; convert "0" to 0 etc.
  7409 00:F5B0: C9 02              CMP   #$02              ; compare with max+1
  7410 00:F5B2: 90 E6              BCC   LAB_NXCH          ; branch exit if < 2
  7411                        
  7412                        LAB_EXCH
  7413 00:F5B4: 4C 37 F1           JMP   LAB_28F6          ; evaluate -ve flag and return
  7414                        
  7415                        ; ctrl-c check routine. includes limited "life" byte save for INGET routine
  7416                        ; now also the code that checks to see if an interrupt has occurred
  7417                        
  7418                        CTRLC
  7419 00:F5B7: AD 00 02           LDA   ccflag            ; get [CTRL-C] check flag
  7420 00:F5BA: D0 18              BNE   LAB_FBA2          ; exit if inhibited
  7421                        
  7422 00:F5BC: 20 F8 F7           JSR   V_INPT            ; scan input device
  7423 00:F5BF: 90 0B              BCC   LAB_FBA0          ; exit if buffer empty
  7424                        
  7425 00:F5C1: 8D 01 02           STA   ccbyte            ; save received byte
  7426 00:F5C4: A2 20              LDX   #$20              ; "life" timer for bytes
  7427 00:F5C6: 8E 02 02           STX   ccnull            ; set countdown
  7428 00:F5C9: 4C 19 DC           JMP   LAB_1636          ; return to BASIC
  7429                        
  7430                        LAB_FBA0
  7431 00:F5CC: AE 02 02           LDX   ccnull            ; get countdown byte
  7432 00:F5CF: F0 03              BEQ   LAB_FBA2          ; exit if finished
  7433                        
  7434 00:F5D1: CE 02 02           DEC   ccnull            ; else decrement countdown
  7435                        LAB_FBA2
  7436 00:F5D4: A2 DC              LDX   #NmiBase          ; set pointer to NMI values
  7437 00:F5D6: 20 DF F5           JSR   LAB_CKIN          ; go check interrupt
  7438 00:F5D9: A2 DF              LDX   #IrqBase          ; set pointer to IRQ values
  7439 00:F5DB: 20 DF F5           JSR   LAB_CKIN          ; go check interrupt
  7440                        LAB_CRTS
  7441 00:F5DE: 60                 RTS
  7442                        
  7443                        ; check whichever interrupt is indexed by X
  7444                        
  7445                        LAB_CKIN
  7446 00:F5DF: B5 00              LDA   PLUS_0,X          ; get interrupt flag byte
  7447 00:F5E1: 10 FB              BPL   LAB_CRTS          ; branch if interrupt not enabled
  7448                        
  7449                        ; we disable the interrupt here and make two new commands RETIRQ and RETNMI to
  7450                        ; automatically enable the interrupt when we exit
  7451                        
  7452 00:F5E3: 0A                 ASL                     ; move happened bit to setup bit
  7453 00:F5E4: 29 40              AND   #$40              ; mask happened bits
  7454 00:F5E6: F0 F6              BEQ   LAB_CRTS          ; if no interrupt then exit
  7455                        
  7456 00:F5E8: 95 00              STA   PLUS_0,X          ; save interrupt flag byte
  7457                        
  7458 00:F5EA: 8A                 TXA                     ; copy index ..
  7459 00:F5EB: A8                 TAY                     ; .. to Y
  7460                        
  7461 00:F5EC: 68                 PLA                     ; dump return address low byte, call from CTRL-C
  7462 00:F5ED: 68                 PLA                     ; dump return address high byte
  7463                        
  7464 00:F5EE: A9 05              LDA   #$05              ; need 5 bytes for GOSUB
  7465 00:F5F0: 20 03 D8           JSR   LAB_1212          ; check room on stack for A bytes
  7466 00:F5F3: A5 C4              LDA   Bpntrh            ; get BASIC execute pointer high byte
  7467 00:F5F5: 48                 PHA                     ; push on stack
  7468 00:F5F6: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  7469 00:F5F8: 48                 PHA                     ; push on stack
  7470 00:F5F9: A5 88              LDA   Clineh            ; get current line high byte
  7471 00:F5FB: 48                 PHA                     ; push on stack
  7472 00:F5FC: A5 87              LDA   Clinel            ; get current line low byte
  7473 00:F5FE: 48                 PHA                     ; push on stack
  7474 00:F5FF: A9 8D              LDA   #TK_GOSUB         ; token for GOSUB
  7475 00:F601: 48                 PHA                     ; push on stack
  7476                        
  7477 00:F602: B9 01 00           LDA   PLUS_1,Y          ; get interrupt code pointer low byte
  7478 00:F605: 85 C3              STA   Bpntrl            ; save as BASIC execute pointer low byte
  7479 00:F607: B9 02 00           LDA   PLUS_2,Y          ; get interrupt code pointer high byte
  7480 00:F60A: 85 C4              STA   Bpntrh            ; save as BASIC execute pointer high byte
  7481                        
  7482 00:F60C: 4C C0 DB           JMP   LAB_15C2          ; go do interpreter inner loop
  7483                                                      ; can't RTS, we used the stack! the RTS from the ctrl-c
  7484                                                      ; check will be taken when the RETIRQ/RETNMI/RETURN is
  7485                                                      ; executed at the end of the subroutine
  7486                        
  7487                        ; get byte from input device, no waiting
  7488                        ; returns with carry set if byte in A
  7489                        
  7490                        INGET
  7491 00:F60F: 20 F8 F7           JSR   V_INPT            ; call scan input device
  7492 00:F612: B0 09              BCS   LAB_FB95          ; if byte go reset timer
  7493                        
  7494 00:F614: AD 02 02           LDA   ccnull            ; get countdown
  7495 00:F617: F0 09              BEQ   LAB_FB96          ; exit if empty
  7496                        
  7497 00:F619: AD 01 02           LDA   ccbyte            ; get last received byte
  7498 00:F61C: 38                 SEC                     ; flag we got a byte
  7499                        LAB_FB95
  7500 00:F61D: A2 00              LDX   #$00              ; clear X
  7501 00:F61F: 8E 02 02           STX   ccnull            ; clear timer because we got a byte
  7502                        LAB_FB96
  7503 00:F622: 60                 RTS
  7504                        
  7505                        ; these routines only enable the interrupts if the set-up flag is set
  7506                        ; if not they have no effect
  7507                        
  7508                        ; perform IRQ {ON|OFF|CLEAR}
  7509                        
  7510                        LAB_IRQ
  7511 00:F623: A2 DF              LDX   #IrqBase          ; set pointer to IRQ values
  7512 00:F625: 2C                 .byte $2C               ; make next line BIT abs.
  7513                        
  7514                        ; perform NMI {ON|OFF|CLEAR}
  7515                        
  7516                        LAB_NMI
  7517 00:F626: A2 DC              LDX   #NmiBase          ; set pointer to NMI values
  7518 00:F628: C9 93              CMP   #TK_ON            ; compare with token for ON
  7519 00:F62A: F0 11              BEQ   LAB_INON          ; go turn on interrupt
  7520                        
  7521 00:F62C: C9 B5              CMP   #TK_OFF           ; compare with token for OFF
  7522 00:F62E: F0 07              BEQ   LAB_IOFF          ; go turn off interrupt
  7523                        
  7524 00:F630: 49 A2              EOR   #TK_CLEAR         ; compare with token for CLEAR, A = $00 if = TK_CLEAR
  7525 00:F632: F0 0E              BEQ   LAB_INEX          ; go clear interrupt flags and return
  7526                        
  7527 00:F634: 4C 02 E3           JMP   LAB_SNER          ; do syntax error then warm start
  7528                        
  7529                        LAB_IOFF
  7530 00:F637: A9 7F              LDA   #$7F              ; clear A
  7531 00:F639: 35 00              AND   PLUS_0,X          ; AND with interrupt setup flag
  7532 00:F63B: 10 05              BPL   LAB_INEX          ; go clear interrupt enabled flag and return
  7533                        
  7534                        LAB_INON
  7535 00:F63D: B5 00              LDA   PLUS_0,X          ; get interrupt setup flag
  7536 00:F63F: 0A                 ASL                     ; Shift bit to enabled flag
  7537 00:F640: 15 00              ORA   PLUS_0,X          ; OR with flag byte
  7538                        LAB_INEX
  7539 00:F642: 95 00              STA   PLUS_0,X          ; save interrupt flag byte
  7540 00:F644: 4C BC 00           JMP   LAB_IGBY          ; update BASIC execute pointer and return
  7541                        
  7542                        ; these routines set up the pointers and flags for the interrupt routines
  7543                        ; note that the interrupts are also enabled by these commands
  7544                        
  7545                        ; perform ON IRQ
  7546                        
  7547                        LAB_SIRQ
  7548                        ;      CLI                     ; enable interrupts
  7549 00:F647: A2 DF              LDX   #IrqBase          ; set pointer to IRQ values
  7550 00:F649: 2C                 .byte $2C               ; make next line BIT abs.
  7551                        
  7552                        ; perform ON NMI
  7553                        
  7554                        LAB_SNMI
  7555 00:F64A: A2 DC              LDX   #NmiBase          ; set pointer to NMI values
  7556                        
  7557 00:F64C: 86 78              STX   TempB             ; save interrupt pointer
  7558 00:F64E: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory (past token)
  7559 00:F651: 20 56 DE           JSR   LAB_GFPN          ; get fixed-point number into temp integer
  7560 00:F654: A5 79              LDA   Smeml             ; get start of mem low byte
  7561 00:F656: A6 7A              LDX   Smemh             ; get start of mem high byte
  7562 00:F658: 20 2B DA           JSR   LAB_SHLN          ; search Basic for temp integer line number from AX
  7563 00:F65B: B0 03              BCS   LAB_LFND          ; if carry set go set-up interrupt
  7564                        
  7565 00:F65D: 4C 70 DD           JMP   LAB_16F7          ; else go do "Undefined statement" error and warm start
  7566                        
  7567                        LAB_LFND
  7568 00:F660: A6 78              LDX   TempB             ; get interrupt pointer
  7569 00:F662: A5 AA              LDA   Baslnl            ; get pointer low byte
  7570 00:F664: E9 01              SBC   #$01              ; -1 (carry already set for subtract)
  7571 00:F666: 95 01              STA   PLUS_1,X          ; save as interrupt pointer low byte
  7572 00:F668: A5 AB              LDA   Baslnh            ; get pointer high byte
  7573 00:F66A: E9 00              SBC   #$00              ; subtract carry
  7574 00:F66C: 95 02              STA   PLUS_2,X          ; save as interrupt pointer high byte
  7575                        
  7576 00:F66E: A9 C0              LDA   #$C0              ; set interrupt enabled/setup bits
  7577 00:F670: 95 00              STA   PLUS_0,X          ; set interrupt flags
  7578                        LAB_IRTS
  7579 00:F672: 60                 RTS
  7580                        
  7581                        ; return from IRQ service, restores the enabled flag.
  7582                        
  7583                        ; perform RETIRQ
  7584                        
  7585                        LAB_RETIRQ
  7586 00:F673: D0 FD              BNE   LAB_IRTS          ; exit if following token (to allow syntax error)
  7587                        
  7588 00:F675: A5 DF              LDA   IrqBase           ; get interrupt flags
  7589 00:F677: 0A                 ASL                     ; copy setup to enabled (b7)
  7590 00:F678: 05 DF              ORA   IrqBase           ; OR in setup flag
  7591 00:F67A: 85 DF              STA   IrqBase           ; save enabled flag
  7592 00:F67C: 4C 77 DD           JMP   LAB_16E8          ; go do rest of RETURN
  7593                        
  7594                        ; return from NMI service, restores the enabled flag.
  7595                        
  7596                        ; perform RETNMI
  7597                        
  7598                        LAB_RETNMI
  7599 00:F67F: D0 F1              BNE   LAB_IRTS          ; exit if following token (to allow syntax error)
  7600                        
  7601 00:F681: A5 DC              LDA   NmiBase           ; get set-up flag
  7602 00:F683: 0A                 ASL                     ; copy setup to enabled (b7)
  7603 00:F684: 05 DC              ORA   NmiBase           ; OR in setup flag
  7604 00:F686: 85 DC              STA   NmiBase           ; save enabled flag
  7605 00:F688: 4C 77 DD           JMP   LAB_16E8          ; go do rest of RETURN
  7606                        
  7607                        ; MAX() MIN() pre process
  7608                        
  7609                        LAB_MMPP
  7610 00:F68B: 20 E9 E1           JSR   LAB_EVEZ          ; process expression
  7611 00:F68E: 4C D0 E1           JMP   LAB_CTNM          ; check if source is numeric, else do type mismatch
  7612                        
  7613                        ; perform MAX()
  7614                        
  7615                        LAB_MAX
  7616 00:F691: 20 BF F6           JSR   LAB_PHFA          ; push FAC1, evaluate expression,
  7617                                                      ; pull FAC2 and compare with FAC1
  7618 00:F694: 10 FB              BPL   LAB_MAX           ; branch if no swap to do
  7619                        
  7620 00:F696: A5 B4              LDA   FAC2_1            ; get FAC2 mantissa1
  7621 00:F698: 09 80              ORA   #$80              ; set top bit (clear sign from compare)
  7622 00:F69A: 85 B4              STA   FAC2_1            ; save FAC2 mantissa1
  7623 00:F69C: 20 D0 EC           JSR   LAB_279B          ; copy FAC2 to FAC1
  7624 00:F69F: F0 F0              BEQ   LAB_MAX           ; go do next (branch always)
  7625                        
  7626                        ; perform MIN()
  7627                        
  7628                        LAB_MIN
  7629 00:F6A1: 20 BF F6           JSR   LAB_PHFA          ; push FAC1, evaluate expression,
  7630                                                      ; pull FAC2 and compare with FAC1
  7631 00:F6A4: 30 FB              BMI   LAB_MIN           ; branch if no swap to do
  7632                        
  7633 00:F6A6: F0 F9              BEQ   LAB_MIN           ; branch if no swap to do
  7634                        
  7635 00:F6A8: A5 B4              LDA   FAC2_1            ; get FAC2 mantissa1
  7636 00:F6AA: 09 80              ORA   #$80              ; set top bit (clear sign from compare)
  7637 00:F6AC: 85 B4              STA   FAC2_1            ; save FAC2 mantissa1
  7638 00:F6AE: 20 D0 EC           JSR   LAB_279B          ; copy FAC2 to FAC1
  7639 00:F6B1: F0 EE              BEQ   LAB_MIN           ; go do next (branch always)
  7640                        
  7641                        ; exit routine. don't bother returning to the loop code
  7642                        ; check for correct exit, else so syntax error
  7643                        
  7644                        LAB_MMEC
  7645 00:F6B3: C9 29              CMP   #')'              ; is it end of function?
  7646 00:F6B5: D0 05              BNE   LAB_MMSE          ; if not do MAX MIN syntax error
  7647                        
  7648 00:F6B7: 68                 PLA                     ; dump return address low byte
  7649 00:F6B8: 68                 PLA                     ; dump return address high byte
  7650 00:F6B9: 4C BC 00           JMP   LAB_IGBY          ; update BASIC execute pointer (to chr past ")")
  7651                        
  7652                        LAB_MMSE
  7653 00:F6BC: 4C 02 E3           JMP   LAB_SNER          ; do syntax error then warm start
  7654                        
  7655                        ; check for next, evaluate and return or exit
  7656                        ; this is the routine that does most of the work
  7657                        
  7658                        LAB_PHFA
  7659 00:F6BF: 20 C2 00           JSR   LAB_GBYT          ; get next BASIC byte
  7660 00:F6C2: C9 2C              CMP   #','              ; is there more ?
  7661 00:F6C4: D0 ED              BNE   LAB_MMEC          ; if not go do end check
  7662                        
  7663                                                      ; push FAC1
  7664 00:F6C6: 20 E6 EF           JSR   LAB_27BA          ; round FAC1
  7665 00:F6C9: A5 B0              LDA   FAC1_s            ; get FAC1 sign
  7666 00:F6CB: 09 7F              ORA   #$7F              ; set all non sign bits
  7667 00:F6CD: 25 AD              AND   FAC1_1            ; AND FAC1 mantissa1 (AND in sign bit)
  7668 00:F6CF: 48                 PHA                     ; push on stack
  7669 00:F6D0: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  7670 00:F6D2: 48                 PHA                     ; push on stack
  7671 00:F6D3: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  7672 00:F6D5: 48                 PHA                     ; push on stack
  7673 00:F6D6: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  7674 00:F6D8: 48                 PHA                     ; push on stack
  7675                        
  7676 00:F6D9: 20 BC 00           JSR   LAB_IGBY          ; scan and get next BASIC byte (after ",")
  7677 00:F6DC: 20 CD E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  7678                                                      ; else do type mismatch
  7679                        
  7680                                                      ; pop FAC2 (MAX/MIN expression so far)
  7681 00:F6DF: 68                 PLA                     ; pop exponent
  7682 00:F6E0: 85 B3              STA   FAC2_e            ; save FAC2 exponent
  7683 00:F6E2: 68                 PLA                     ; pop mantissa3
  7684 00:F6E3: 85 B6              STA   FAC2_3            ; save FAC2 mantissa3
  7685 00:F6E5: 68                 PLA                     ; pop mantissa1
  7686 00:F6E6: 85 B5              STA   FAC2_2            ; save FAC2 mantissa2
  7687 00:F6E8: 68                 PLA                     ; pop sign/mantissa1
  7688 00:F6E9: 85 B4              STA   FAC2_1            ; save FAC2 sign/mantissa1
  7689 00:F6EB: 85 B7              STA   FAC2_s            ; save FAC2 sign
  7690                        
  7691                                                      ; compare FAC1 with (packed) FAC2
  7692 00:F6ED: A9 B3              LDA   #<FAC2_e          ; set pointer low byte to FAC2
  7693 00:F6EF: A0 00              LDY   #>FAC2_e          ; set pointer high byte to FAC2
  7694 00:F6F1: 4C 24 F0           JMP   LAB_27F8          ; compare FAC1 with FAC2 (AY) and return
  7695                                                      ; returns A=$00 if FAC1 = (AY)
  7696                                                      ; returns A=$01 if FAC1 > (AY)
  7697                                                      ; returns A=$FF if FAC1 < (AY)
  7698                        
  7699                        ; perform WIDTH
  7700                        
  7701                        LAB_WDTH
  7702 00:F6F4: C9 2C              CMP   #','              ; is next byte ","
  7703 00:F6F6: F0 1B              BEQ   LAB_TBSZ          ; if so do tab size
  7704                        
  7705 00:F6F8: 20 A0 EB           JSR   LAB_GTBY          ; get byte parameter
  7706 00:F6FB: 8A                 TXA                     ; copy width to A
  7707 00:F6FC: F0 0A              BEQ   LAB_NSTT          ; branch if set for infinite line
  7708                        
  7709 00:F6FE: E0 10              CPX   #$10              ; else make min width = 16d
  7710 00:F700: 90 45              BCC   TabErr            ; if less do function call error and exit
  7711                        
  7712                        ; this next compare ensures that we can't exit WIDTH via an error leaving the
  7713                        ; tab size greater than the line length.
  7714                        
  7715 00:F702: E4 64              CPX   TabSiz            ; compare with tab size
  7716 00:F704: B0 02              BCS   LAB_NSTT          ; branch if >= tab size
  7717                        
  7718 00:F706: 86 64              STX   TabSiz            ; else make tab size = terminal width
  7719                        LAB_NSTT
  7720 00:F708: 86 0F              STX   TWidth            ; set the terminal width
  7721 00:F70A: 20 C2 00           JSR   LAB_GBYT          ; get BASIC byte back
  7722 00:F70D: F0 1A              BEQ   WExit             ; exit if no following
  7723                        
  7724 00:F70F: C9 2C              CMP   #','              ; else is it ","
  7725 00:F711: D0 A9              BNE   LAB_MMSE          ; if not do syntax error
  7726                        
  7727                        LAB_TBSZ
  7728 00:F713: 20 9D EB           JSR   LAB_SGBY          ; scan and get byte parameter
  7729 00:F716: 8A                 TXA                     ; copy TAB size
  7730 00:F717: 30 2E              BMI   TabErr            ; if >127 do function call error and exit
  7731                        
  7732 00:F719: E0 01              CPX   #$01              ; compare with min-1
  7733 00:F71B: 90 2A              BCC   TabErr            ; if <=1 do function call error and exit
  7734                        
  7735 00:F71D: A5 0F              LDA   TWidth            ; set flags for width
  7736 00:F71F: F0 06              BEQ   LAB_SVTB          ; skip check if infinite line
  7737                        
  7738 00:F721: E4 0F              CPX   TWidth            ; compare TAB with width
  7739 00:F723: F0 02              BEQ   LAB_SVTB          ; ok if =
  7740                        
  7741 00:F725: B0 20              BCS   TabErr            ; branch if too big
  7742                        
  7743                        LAB_SVTB
  7744 00:F727: 86 64              STX   TabSiz            ; save TAB size
  7745                        
  7746                        ; calculate tab column limit from TAB size. The Iclim is set to the last tab
  7747                        ; position on a line that still has at least one whole tab width between it
  7748                        ; and the end of the line.
  7749                        
  7750                        WExit
  7751 00:F729: A5 0F              LDA   TWidth            ; get width
  7752 00:F72B: F0 06              BEQ   LAB_SULP          ; branch if infinite line
  7753                        
  7754 00:F72D: C5 64              CMP   TabSiz            ; compare with tab size
  7755 00:F72F: B0 03              BCS   LAB_WDLP          ; branch if >= tab size
  7756                        
  7757 00:F731: 85 64              STA   TabSiz            ; else make tab size = terminal width
  7758                        LAB_SULP
  7759 00:F733: 38                 SEC                     ; set carry for subtract
  7760                        LAB_WDLP
  7761 00:F734: E5 64              SBC   TabSiz            ; subtract tab size
  7762 00:F736: B0 FC              BCS   LAB_WDLP          ; loop while no borrow
  7763                        
  7764 00:F738: 65 64              ADC   TabSiz            ; add tab size back
  7765 00:F73A: 18                 CLC                     ; clear carry for add
  7766 00:F73B: 65 64              ADC   TabSiz            ; add tab size back again
  7767 00:F73D: 85 10              STA   Iclim             ; save for now
  7768 00:F73F: A5 0F              LDA   TWidth            ; get width back
  7769 00:F741: 38                 SEC                     ; set carry for subtract
  7770 00:F742: E5 10              SBC   Iclim             ; subtract remainder
  7771 00:F744: 85 10              STA   Iclim             ; save tab column limit
  7772                        LAB_NOSQ
  7773 00:F746: 60                 RTS
  7774                        
  7775                        TabErr
  7776 00:F747: 4C 37 E6           JMP   LAB_FCER          ; do function call error then warm start
  7777                        
  7778                        ; perform SQR()
  7779                        
  7780                        LAB_SQR
  7781 00:F74A: A5 B0              LDA   FAC1_s            ; get FAC1 sign
  7782 00:F74C: 30 F9              BMI   TabErr            ; if -ve do function call error
  7783                        
  7784 00:F74E: A5 AC              LDA   FAC1_e            ; get exponent
  7785 00:F750: F0 F4              BEQ   LAB_NOSQ          ; if zero just return
  7786                        
  7787                                                      ; else do root
  7788 00:F752: 20 D7 EF           JSR   LAB_27AB          ; round and copy FAC1 to FAC2
  7789 00:F755: A9 00              LDA   #$00              ; clear A
  7790                        
  7791 00:F757: 85 77              STA   FACt_3            ; clear remainder
  7792 00:F759: 85 76              STA   FACt_2            ; ..
  7793 00:F75B: 85 75              STA   FACt_1            ; ..
  7794 00:F75D: 85 78              STA   TempB             ; ..
  7795                        
  7796 00:F75F: 85 AF              STA   FAC1_3            ; clear root
  7797 00:F761: 85 AE              STA   FAC1_2            ; ..
  7798 00:F763: 85 AD              STA   FAC1_1            ; ..
  7799                        
  7800 00:F765: A2 18              LDX   #$18              ; 24 pairs of bits to do
  7801 00:F767: A5 B3              LDA   FAC2_e            ; get exponent
  7802 00:F769: 4A                 LSR                     ; check odd/even
  7803 00:F76A: B0 0E              BCS   LAB_SQE2          ; if odd only 1 shift first time
  7804                        
  7805                        LAB_SQE1
  7806 00:F76C: 06 B6              ASL   FAC2_3            ; shift highest bit of number ..
  7807 00:F76E: 26 B5              ROL   FAC2_2            ; ..
  7808 00:F770: 26 B4              ROL   FAC2_1            ; ..
  7809 00:F772: 26 77              ROL   FACt_3            ; .. into remainder
  7810 00:F774: 26 76              ROL   FACt_2            ; ..
  7811 00:F776: 26 75              ROL   FACt_1            ; ..
  7812 00:F778: 26 78              ROL   TempB             ; .. never overflows
  7813                        LAB_SQE2
  7814 00:F77A: 06 B6              ASL   FAC2_3            ; shift highest bit of number ..
  7815 00:F77C: 26 B5              ROL   FAC2_2            ; ..
  7816 00:F77E: 26 B4              ROL   FAC2_1            ; ..
  7817 00:F780: 26 77              ROL   FACt_3            ; .. into remainder
  7818 00:F782: 26 76              ROL   FACt_2            ; ..
  7819 00:F784: 26 75              ROL   FACt_1            ; ..
  7820 00:F786: 26 78              ROL   TempB             ; .. never overflows
  7821                        
  7822 00:F788: 06 AF              ASL   FAC1_3            ; root = root * 2
  7823 00:F78A: 26 AE              ROL   FAC1_2            ; ..
  7824 00:F78C: 26 AD              ROL   FAC1_1            ; .. never overflows
  7825                        
  7826 00:F78E: A5 AF              LDA   FAC1_3            ; get root low byte
  7827 00:F790: 2A                 ROL                     ; *2
  7828 00:F791: 85 5B              STA   Temp3             ; save partial low byte
  7829 00:F793: A5 AE              LDA   FAC1_2            ; get root low mid byte
  7830 00:F795: 2A                 ROL                     ; *2
  7831 00:F796: 85 5C              STA   Temp3+1           ; save partial low mid byte
  7832 00:F798: A5 AD              LDA   FAC1_1            ; get root high mid byte
  7833 00:F79A: 2A                 ROL                     ; *2
  7834 00:F79B: 85 5D              STA   Temp3+2           ; save partial high mid byte
  7835 00:F79D: A9 00              LDA   #$00              ; get root high byte (always $00)
  7836 00:F79F: 2A                 ROL                     ; *2
  7837 00:F7A0: 85 5E              STA   Temp3+3           ; save partial high byte
  7838                        
  7839                                                      ; carry clear for subtract +1
  7840 00:F7A2: A5 77              LDA   FACt_3            ; get remainder low byte
  7841 00:F7A4: E5 5B              SBC   Temp3             ; subtract partial low byte
  7842 00:F7A6: 85 5B              STA   Temp3             ; save partial low byte
  7843                        
  7844 00:F7A8: A5 76              LDA   FACt_2            ; get remainder low mid byte
  7845 00:F7AA: E5 5C              SBC   Temp3+1           ; subtract partial low mid byte
  7846 00:F7AC: 85 5C              STA   Temp3+1           ; save partial low mid byte
  7847                        
  7848 00:F7AE: A5 75              LDA   FACt_1            ; get remainder high mid byte
  7849 00:F7B0: E5 5D              SBC   Temp3+2           ; subtract partial high mid byte
  7850 00:F7B2: A8                 TAY                     ; copy partial high mid byte
  7851                        
  7852 00:F7B3: A5 78              LDA   TempB             ; get remainder high byte
  7853 00:F7B5: E5 5E              SBC   Temp3+3           ; subtract partial high byte
  7854 00:F7B7: 90 0E              BCC   LAB_SQNS          ; skip sub if remainder smaller
  7855                        
  7856 00:F7B9: 85 78              STA   TempB             ; save remainder high byte
  7857                        
  7858 00:F7BB: 84 75              STY   FACt_1            ; save remainder high mid byte
  7859                        
  7860 00:F7BD: A5 5C              LDA   Temp3+1           ; get remainder low mid byte
  7861 00:F7BF: 85 76              STA   FACt_2            ; save remainder low mid byte
  7862                        
  7863 00:F7C1: A5 5B              LDA   Temp3             ; get partial low byte
  7864 00:F7C3: 85 77              STA   FACt_3            ; save remainder low byte
  7865                        
  7866 00:F7C5: E6 AF              INC   FAC1_3            ; increment root low byte (never any rollover)
  7867                        LAB_SQNS
  7868 00:F7C7: CA                 DEX                     ; decrement bit pair count
  7869 00:F7C8: D0 A2              BNE   LAB_SQE1          ; loop if not all done
  7870                        
  7871 00:F7CA: 38                 SEC                     ; set carry for subtract
  7872 00:F7CB: A5 B3              LDA   FAC2_e            ; get exponent
  7873 00:F7CD: E9 80              SBC   #$80              ; normalise
  7874 00:F7CF: 6A                 ROR                     ; /2 and re-bias to $80
  7875 00:F7D0: 69 00              ADC   #$00              ; add bit zero back in (allow for half shift)
  7876 00:F7D2: 85 AC              STA   FAC1_e            ; save it
  7877 00:F7D4: 4C 41 ED           JMP   LAB_24D5          ; normalise FAC1 and return
  7878                        
  7879                        ; perform VARPTR()
  7880                        
  7881                        LAB_VARPTR
  7882 00:F7D7: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  7883 00:F7DA: 20 B8 E4           JSR   LAB_GVAR          ; get var address
  7884 00:F7DD: 20 EF E2           JSR   LAB_1BFB          ; scan for ")" , else do syntax error then warm start
  7885 00:F7E0: A4 95              LDY   Cvaral            ; get var address low byte
  7886 00:F7E2: A5 96              LDA   Cvarah            ; get var address high byte
  7887 00:F7E4: 4C 67 E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  7888                        
  7889                        ; perform PI
  7890                        
  7891                        LAB_PI
  7892 00:F7E7: A9 CB              LDA   #<LAB_2C7C        ; set (2*pi) pointer low byte
  7893 00:F7E9: A0 F8              LDY   #>LAB_2C7C        ; set (2*pi) pointer high byte
  7894 00:F7EB: 20 8A EF           JSR   LAB_UFAC          ; unpack memory (AY) into FAC1
  7895 00:F7EE: C6 AC              DEC   FAC1_e            ; make result = PI
  7896 00:F7F0: 60                 RTS
  7897                        
  7898                        ; perform TWOPI
  7899                        
  7900                        LAB_TWOPI
  7901 00:F7F1: A9 CB              LDA   #<LAB_2C7C        ; set (2*pi) pointer low byte
  7902 00:F7F3: A0 F8              LDY   #>LAB_2C7C        ; set (2*pi) pointer high byte
  7903 00:F7F5: 4C 8A EF           JMP   LAB_UFAC          ; unpack memory (AY) into FAC1 and return
  7904                        
  7905                        ; system dependant i/o vectors
  7906                        ; these are in RAM and are set by the monitor at start-up
  7907                        
  7908                        V_INPT
  7909 00:F7F8: 6C 05 02           JMP   (VEC_IN)          ; non halting scan input device
  7910                        V_OUTP
  7911 00:F7FB: 6C 07 02           JMP   (VEC_OUT)         ; send byte to output device
  7912                        V_LOAD
  7913 00:F7FE: 6C 09 02           JMP   (VEC_LD)          ; load BASIC program
  7914                        V_SAVE
  7915 00:F801: 6C 0B 02           JMP   (VEC_SV)          ; save BASIC program
  7916                        
  7917                        ; The rest are tables messages and code for RAM
  7918                        
  7919                        ; the rest of the code is tables and BASIC start-up code
  7920                        
  7921                        PG2_TABS
  7922 00:F804: 00                 .byte $00               ; ctrl-c flag           -     $00 = enabled
  7923 00:F805: 00                 .byte $00               ; ctrl-c byte           -     GET needs this
  7924 00:F806: 00                 .byte $00               ; ctrl-c byte timeout   -     GET needs this
  7925 00:F807: B7 F5              .word CTRLC             ; ctrl c check vector
  7926                        ;     .word xxxx              ; non halting key input -     monitor to set this
  7927                        ;     .word xxxx              ; output vector         -     monitor to set this
  7928                        ;     .word xxxx              ; load vector           -     monitor to set this
  7929                        ;     .word xxxx              ; save vector           -     monitor to set this
  7930                        PG2_TABE
  7931                        
  7932                        ; character get subroutine for zero page
  7933                        
  7934                        ; For a 1.8432MHz 6502 including the JSR and RTS
  7935                        ; fastest (>=":") =  29 cycles =  15.7uS
  7936                        ; slowest (<":")  =  40 cycles =  21.7uS
  7937                        ; space skip      = +21 cycles = +11.4uS
  7938                        ; inc across page =  +4 cycles =  +2.2uS
  7939                        
  7940                        ; the target address for the LDA at LAB_2CF4 becomes the BASIC execute pointer once the
  7941                        ; block is copied to it's destination, any non zero page address will do at assembly
  7942                        ; time, to assemble a three byte instruction.
  7943                        
  7944                        ; page 0 initialisation table from $BC
  7945                        ; increment and scan memory
  7946                        
  7947                        LAB_2CEE
  7948 00:F809: E6 C3              INC   Bpntrl            ; increment BASIC execute pointer low byte
  7949 00:F80B: D0 02              BNE   LAB_2CF4          ; branch if no carry
  7950                                                      ; else
  7951 00:F80D: E6 C4              INC   Bpntrh            ; increment BASIC execute pointer high byte
  7952                        
  7953                        ; page 0 initialisation table from $C2
  7954                        ; scan memory
  7955                        
  7956                        LAB_2CF4
  7957 00:F80F: AD FF FF           LDA   $FFFF             ; get byte to scan (addr set by call routine)
  7958 00:F812: C9 AC              CMP   #TK_ELSE          ; compare with the token for ELSE
  7959 00:F814: F0 0E              BEQ   LAB_2D05          ; exit if ELSE, not numeric, carry set
  7960                        
  7961 00:F816: C9 3A              CMP   #':'              ; compare with ":"
  7962 00:F818: B0 0A              BCS   LAB_2D05          ; exit if >= ":", not numeric, carry set
  7963                        
  7964 00:F81A: C9 20              CMP   #' '              ; compare with " "
  7965 00:F81C: F0 EB              BEQ   LAB_2CEE          ; if " " go do next
  7966                        
  7967 00:F81E: 38                 SEC                     ; set carry for SBC
  7968 00:F81F: E9 30              SBC   #'0'              ; subtract "0"
  7969 00:F821: 38                 SEC                     ; set carry for SBC
  7970 00:F822: E9 D0              SBC   #$D0              ; subtract -"0"
  7971                                                      ; clear carry if byte = "0"-"9"
  7972                        LAB_2D05
  7973 00:F824: 60                 RTS
  7974                        
  7975                        ; page zero initialisation table $00-$12 inclusive
  7976                        
  7977                        StrTab
  7978 00:F825: 4C                 .byte $4C               ; JMP opcode
  7979 00:F826: 00 D7              .word LAB_COLD          ; initial warm start vector (cold start)
  7980                        
  7981 00:F828: 00                 .byte $00               ; these bytes are not used by BASIC
  7982 00:F829: 00 00              .word $0000             ; 
  7983 00:F82B: 00 00              .word $0000             ; 
  7984 00:F82D: 00 00              .word $0000             ; 
  7985                        
  7986 00:F82F: 4C                 .byte $4C               ; JMP opcode
  7987 00:F830: 37 E6              .word LAB_FCER          ; initial user function vector ("Function call" error)
  7988 00:F832: 00                 .byte $00               ; default NULL count
  7989 00:F833: 00                 .byte $00               ; clear terminal position
  7990 00:F834: 00                 .byte $00               ; default terminal width byte
  7991 00:F835: F2                 .byte $F2               ; default limit for TAB = 14
  7992 00:F836: 00 03              .word Ram_base          ; start of user RAM
  7993                        EndTab
  7994                        
  7995                        LAB_MSZM
  7996 00:F838: 0D 0A 4D 65        .byte $0D,$0A,"Memory size ",$00
       00:F83C: 6D 6F 72 79 
       00:F840: 20 73 69 7A 
       00:F844: 65 20 00 
  7997                        
  7998                        LAB_SMSG
  7999 00:F847: 20 42 79 74        .byte " Bytes free",$0D,$0A,$0A
       00:F84B: 65 73 20 66 
       00:F84F: 72 65 65 0D 
       00:F853: 0A 0A 
  8000 00:F855: 45 6E 68 61        .byte "Enhanced BASIC 2.22p5",$0A,$00
       00:F859: 6E 63 65 64 
       00:F85D: 20 42 41 53 
       00:F861: 49 43 20 32 
       00:F865: 2E 32 32 70 
       00:F869: 35 0A 00 
  8001                        
  8002                        ; numeric constants and series
  8003                        
  8004                                                      ; constants and series for LOG(n)
  8005                        LAB_25A0
  8006 00:F86C: 02                 .byte $02               ; counter
  8007 00:F86D: 80 19 56 62        .byte $80,$19,$56,$62   ; 0.59898
  8008 00:F871: 80 76 22 F3        .byte $80,$76,$22,$F3   ; 0.96147
  8009                        ;##   .byte $80,$76,$22,$F1   ; 0.96147
  8010 00:F875: 82 38 AA 40        .byte $82,$38,$AA,$40   ; 2.88539
  8011                        ;##   .byte $82,$38,$AA,$45   ; 2.88539
  8012                        
  8013                        LAB_25AD
  8014 00:F879: 80 35 04 F3        .byte $80,$35,$04,$F3   ; 0.70711   1/root 2
  8015                        LAB_25B1
  8016 00:F87D: 81 35 04 F3        .byte $81,$35,$04,$F3   ; 1.41421   root 2
  8017                        LAB_25B5
  8018 00:F881: 80 80 00 00        .byte $80,$80,$00,$00   ; -0.5
  8019                        LAB_25B9
  8020 00:F885: 80 31 72 18        .byte $80,$31,$72,$18   ; 0.69315   LOG(2)
  8021                        
  8022                                                      ; numeric PRINT constants
  8023                        LAB_2947
  8024 00:F889: 91 43 4F F8        .byte $91,$43,$4F,$F8   ; 99999.9375 (max value with at least one decimal)
  8025                        LAB_294B
  8026 00:F88D: 94 74 23 F7        .byte $94,$74,$23,$F7   ; 999999.4375 (max value before scientific notation)
  8027                        LAB_294F
  8028 00:F891: 94 74 24 00        .byte $94,$74,$24,$00   ; 1000000
  8029                        
  8030                                                      ; EXP(n) constants and series
  8031                        LAB_2AFA
  8032 00:F895: 81 38 AA 3B        .byte $81,$38,$AA,$3B   ; 1.4427    (1/LOG base 2 e)
  8033                        LAB_2AFE
  8034 00:F899: 06                 .byte $06               ; counter
  8035 00:F89A: 74 63 90 8C        .byte $74,$63,$90,$8C   ; 2.17023e-4
  8036 00:F89E: 77 23 0C AB        .byte $77,$23,$0C,$AB   ; 0.00124
  8037 00:F8A2: 7A 1E 94 00        .byte $7A,$1E,$94,$00   ; 0.00968
  8038 00:F8A6: 7C 63 42 80        .byte $7C,$63,$42,$80   ; 0.05548
  8039 00:F8AA: 7E 75 FE D0        .byte $7E,$75,$FE,$D0   ; 0.24023
  8040 00:F8AE: 80 31 72 15        .byte $80,$31,$72,$15   ; 0.69315
  8041 00:F8B2: 81 00 00 00        .byte $81,$00,$00,$00   ; 1.00000
  8042                        
  8043                        ;##   .byte $07               ; counter
  8044                        ;##   .byte $74,$94,$2E,$40   ; -1/7! (-1/5040)
  8045                        ;##   .byte $77,$2E,$4F,$70   ;  1/6! ( 1/720)
  8046                        ;##   .byte $7A,$88,$02,$6E   ; -1/5! (-1/120)
  8047                        ;##   .byte $7C,$2A,$A0,$E6   ;  1/4! ( 1/24)
  8048                        ;##   .byte $7E,$AA,$AA,$50   ; -1/3! (-1/6)
  8049                        ;##   .byte $7F,$7F,$FF,$FF   ;  1/2! ( 1/2)
  8050                        ;##   .byte $81,$80,$00,$00   ; -1/1! (-1/1)
  8051                        ;##   .byte $81,$00,$00,$00   ;  1/0! ( 1/1)
  8052                        
  8053                                                      ; trigonometric constants and series
  8054                        LAB_2C78
  8055 00:F8B6: 81 49 0F DB        .byte $81,$49,$0F,$DB   ; 1.570796371 (pi/2) as floating #
  8056                        LAB_2C84
  8057 00:F8BA: 04                 .byte $04               ; counter
  8058 00:F8BB: 86 1E D7 FB        .byte $86,$1E,$D7,$FB   ; 39.7109
  8059                        ;##   .byte $86,$1E,$D7,$BA   ; 39.7109
  8060 00:F8BF: 87 99 26 65        .byte $87,$99,$26,$65   ;-76.575
  8061                        ;##   .byte $87,$99,$26,$64   ;-76.575
  8062 00:F8C3: 87 23 34 58        .byte $87,$23,$34,$58   ; 81.6022
  8063 00:F8C7: 86 A5 5D E1        .byte $86,$A5,$5D,$E1   ;-41.3417
  8064                        ;##   .byte $86,$A5,$5D,$E0   ;-41.3417
  8065                        LAB_2C7C
  8066 00:F8CB: 83 49 0F DB        .byte $83,$49,$0F,$DB   ; 6.28319 (2*pi) as floating #
  8067                        ;##   .byte $83,$49,$0F,$DA   ; 6.28319 (2*pi) as floating #
  8068                        
  8069                        LAB_2CC9
  8070 00:F8CF: 08                 .byte $08               ; counter
  8071 00:F8D0: 78 3A C5 37        .byte $78,$3A,$C5,$37   ; 0.00285
  8072 00:F8D4: 7B 83 A2 5C        .byte $7B,$83,$A2,$5C   ;-0.0160686
  8073 00:F8D8: 7C 2E DD 4D        .byte $7C,$2E,$DD,$4D   ; 0.0426915
  8074 00:F8DC: 7D 99 B0 1E        .byte $7D,$99,$B0,$1E   ;-0.0750429
  8075 00:F8E0: 7D 59 ED 24        .byte $7D,$59,$ED,$24   ; 0.106409
  8076 00:F8E4: 7E 91 72 00        .byte $7E,$91,$72,$00   ;-0.142036
  8077 00:F8E8: 7E 4C B9 73        .byte $7E,$4C,$B9,$73   ; 0.199926
  8078 00:F8EC: 7F AA AA 53        .byte $7F,$AA,$AA,$53   ;-0.333331
  8079                        
  8080                        ;##   .byte $08               ; counter
  8081                        ;##   .byte $78,$3B,$D7,$4A   ; 1/17
  8082                        ;##   .byte $7B,$84,$6E,$02   ;-1/15
  8083                        ;##   .byte $7C,$2F,$C1,$FE   ; 1/13
  8084                        ;##   .byte $7D,$9A,$31,$74   ;-1/11
  8085                        ;##   .byte $7D,$5A,$3D,$84   ; 1/9
  8086                        ;##   .byte $7E,$91,$7F,$C8   ;-1/7
  8087                        ;##   .byte $7E,$4C,$BB,$E4   ; 1/5
  8088                        ;##   .byte $7F,$AA,$AA,$6C   ;-1/3
  8089                        
  8090             0000F8F1   LAB_1D96    equ *+1             ; $00,$00 used for undefined variables
  8091                        LAB_259C
  8092 00:F8F0: 81 00 00 00        .byte $81,$00,$00,$00   ; 1.000000, used for INC
  8093                        LAB_2AFD
  8094 00:F8F4: 81 80 00 00        .byte $81,$80,$00,$00   ; -1.00000, used for DEC. must be on the same page as +1.00
  8095                        
  8096                                                      ; misc constants
  8097                        LAB_1DF7
  8098 00:F8F8: 90                 .byte $90               ;-32768 (uses first three bytes from 0.5)
  8099                        LAB_2A96
  8100 00:F8F9: 80 00 00 00        .byte $80,$00,$00,$00   ; 0.5
  8101                        LAB_2C80
  8102 00:F8FD: 7F 00 00 00        .byte $7F,$00,$00,$00   ; 0.25
  8103                        LAB_26B5
  8104 00:F901: 84 20 00 00        .byte $84,$20,$00,$00   ; 10.0000 divide by 10 constant
  8105                        
  8106                        ; This table is used in converting numbers to ASCII.
  8107                        
  8108                        LAB_2A9A
  8109             0000F906   LAB_2A9B equ LAB_2A9A+1
  8110             0000F907   LAB_2A9C equ LAB_2A9B+1
  8111 00:F905: FE 79 60           .byte $FE,$79,$60       ; -100000
  8112 00:F908: 00 27 10           .byte $00,$27,$10       ; 10000
  8113 00:F90B: FF FC 18           .byte $FF,$FC,$18       ; -1000
  8114 00:F90E: 00 00 64           .byte $00,$00,$64       ; 100
  8115 00:F911: FF FF F6           .byte $FF,$FF,$F6       ; -10
  8116 00:F914: 00 00 01           .byte $00,$00,$01       ; 1
  8117                        
  8118                        LAB_CTBL
  8119 00:F917: 1C DC              .word LAB_END-1         ; END
  8120 00:F919: 58 DB              .word LAB_FOR-1         ; FOR
  8121 00:F91B: 64 E1              .word LAB_NEXT-1        ; NEXT
  8122 00:F91D: 89 DD              .word LAB_DATA-1        ; DATA
  8123 00:F91F: 47 E0              .word LAB_INPUT-1       ; INPUT
  8124 00:F921: 6C E4              .word LAB_DIM-1         ; DIM
  8125 00:F923: 66 E0              .word LAB_READ-1        ; READ
  8126 00:F925: B4 DE              .word LAB_LET-1         ; LET
  8127 00:F927: 86 DE              .word LAB_DEC-1         ; DEC             new command
  8128 00:F929: E8 DC              .word LAB_GOTO-1        ; GOTO
  8129 00:F92B: A7 DC              .word LAB_RUN-1         ; RUN
  8130 00:F92D: B7 DD              .word LAB_IF-1          ; IF
  8131 00:F92F: 3D DC              .word LAB_RESTORE-1     ; RESTORE         modified command
  8132 00:F931: CB DC              .word LAB_GOSUB-1       ; GOSUB
  8133 00:F933: 72 F6              .word LAB_RETIRQ-1      ; RETIRQ          new command
  8134 00:F935: 7E F6              .word LAB_RETNMI-1      ; RETNMI          new command
  8135 00:F937: 74 DD              .word LAB_RETURN-1      ; RETURN
  8136 00:F939: 1E DE              .word LAB_REM-1         ; REM
  8137 00:F93B: 1A DC              .word LAB_STOP-1        ; STOP
  8138 00:F93D: 27 DE              .word LAB_ON-1          ; ON              modified command
  8139 00:F93F: 7B DC              .word LAB_NULL-1        ; NULL            modified command
  8140 00:F941: 89 DE              .word LAB_INC-1         ; INC             new command
  8141 00:F943: 95 EC              .word LAB_WAIT-1        ; WAIT
  8142 00:F945: FD F7              .word V_LOAD-1          ; LOAD
  8143 00:F947: 00 F8              .word V_SAVE-1          ; SAVE
  8144 00:F949: 81 E7              .word LAB_DEF-1         ; DEF
  8145 00:F94B: 1A EC              .word LAB_POKE-1        ; POKE
  8146 00:F94D: 36 EC              .word LAB_DOKE-1        ; DOKE            new command
  8147 00:F94F: 83 EC              .word LAB_CALL-1        ; CALL            new command
  8148 00:F951: B1 DC              .word LAB_DO-1          ; DO              new command
  8149 00:F953: 1A DD              .word LAB_LOOP-1        ; LOOP            new command
  8150 00:F955: 55 DF              .word LAB_PRINT-1       ; PRINT
  8151 00:F957: 81 DC              .word LAB_CONT-1        ; CONT
  8152 00:F959: A3 DA              .word LAB_LIST-1        ; LIST
  8153 00:F95B: A0 DA              .word LAB_CLEAR-1       ; CLEAR
  8154 00:F95D: 50 DA              .word LAB_NEW-1         ; NEW
  8155 00:F95F: F3 F6              .word LAB_WDTH-1        ; WIDTH           new command
  8156 00:F961: 24 DF              .word LAB_GET-1         ; GET             new command
  8157 00:F963: 5B EC              .word LAB_SWAP-1        ; SWAP            new command
  8158 00:F965: 8E F4              .word LAB_BITSET-1      ; BITSET          new command
  8159 00:F967: A2 F4              .word LAB_BITCLR-1      ; BITCLR          new command
  8160 00:F969: 22 F6              .word LAB_IRQ-1         ; IRQ             new command
  8161 00:F96B: 25 F6              .word LAB_NMI-1         ; NMI             new command
  8162                        
  8163                        ; function pre process routine table
  8164                        
  8165                        LAB_FTPL
  8166             0000F96E   LAB_FTPM    equ LAB_FTPL+$01
  8167 00:F96D: 72 E3              .word LAB_PPFN-1        ; SGN(n)    process numeric expression in ()
  8168 00:F96F: 72 E3              .word LAB_PPFN-1        ; INT(n)          "
  8169 00:F971: 72 E3              .word LAB_PPFN-1        ; ABS(n)          "
  8170 00:F973: E8 E1              .word LAB_EVEZ-1        ; USR(x)    process any expression
  8171 00:F975: EB E2              .word LAB_1BF7-1        ; FRE(x)          "
  8172 00:F977: EB E2              .word LAB_1BF7-1        ; POS(x)          "
  8173 00:F979: 72 E3              .word LAB_PPFN-1        ; SQR(n)    process numeric expression in ()
  8174 00:F97B: 72 E3              .word LAB_PPFN-1        ; RND(n)          "
  8175 00:F97D: 72 E3              .word LAB_PPFN-1        ; LOG(n)          "
  8176 00:F97F: 72 E3              .word LAB_PPFN-1        ; EXP(n)          "
  8177 00:F981: 72 E3              .word LAB_PPFN-1        ; COS(n)          "
  8178 00:F983: 72 E3              .word LAB_PPFN-1        ; SIN(n)          "
  8179 00:F985: 72 E3              .word LAB_PPFN-1        ; TAN(n)          "
  8180 00:F987: 72 E3              .word LAB_PPFN-1        ; ATN(n)          "
  8181 00:F989: 72 E3              .word LAB_PPFN-1        ; PEEK(n)         "
  8182 00:F98B: 72 E3              .word LAB_PPFN-1        ; DEEK(n)         "
  8183 00:F98D: 00 00              .word $0000             ; SADD()    none
  8184 00:F98F: 6C E3              .word LAB_PPFS-1        ; LEN($)    process string expression in ()
  8185 00:F991: 72 E3              .word LAB_PPFN-1        ; STR$(n)   process numeric expression in ()
  8186 00:F993: 6C E3              .word LAB_PPFS-1        ; VAL($)    process string expression in ()
  8187 00:F995: 6C E3              .word LAB_PPFS-1        ; ASC($)          "
  8188 00:F997: 6C E3              .word LAB_PPFS-1        ; UCASE$($)       "
  8189 00:F999: 6C E3              .word LAB_PPFS-1        ; LCASE$($)       "
  8190 00:F99B: 72 E3              .word LAB_PPFN-1        ; CHR$(n)   process numeric expression in ()
  8191 00:F99D: 99 E3              .word LAB_BHSS-1        ; HEX$(n)         "
  8192 00:F99F: 99 E3              .word LAB_BHSS-1        ; BIN$(n)         "
  8193 00:F9A1: 00 00              .word $0000             ; BITTST()  none
  8194 00:F9A3: 8A F6              .word LAB_MMPP-1        ; MAX()     process numeric expression
  8195 00:F9A5: 8A F6              .word LAB_MMPP-1        ; MIN()           "
  8196 00:F9A7: 78 E3              .word LAB_PPBI-1        ; PI        advance pointer
  8197 00:F9A9: 78 E3              .word LAB_PPBI-1        ; TWOPI           "
  8198 00:F9AB: 00 00              .word $0000             ; VARPTR()  none
  8199 00:F9AD: 7D E3              .word LAB_LRMS-1        ; LEFT$()   process string expression
  8200 00:F9AF: 7D E3              .word LAB_LRMS-1        ; RIGHT$()        "
  8201 00:F9B1: 7D E3              .word LAB_LRMS-1        ; MID$()          "
  8202                        
  8203                        ; action addresses for functions
  8204                        
  8205                        LAB_FTBL
  8206             0000F9B4   LAB_FTBM    equ LAB_FTBL+$01
  8207 00:F9B3: 03 F0              .word LAB_SGN-1         ; SGN()
  8208 00:F9B5: 8D F0              .word LAB_INT-1         ; INT()
  8209 00:F9B7: 20 F0              .word LAB_ABS-1         ; ABS()
  8210 00:F9B9: 59 F4              .word LAB_USR-1         ; USR()
  8211 00:F9BB: 52 E7              .word LAB_FRE-1         ; FRE()
  8212 00:F9BD: 71 E7              .word LAB_POS-1         ; POS()
  8213 00:F9BF: 49 F7              .word LAB_SQR-1         ; SQR()
  8214 00:F9C1: A9 F3              .word LAB_RND-1         ; RND()           modified function
  8215 00:F9C3: 07 EE              .word LAB_LOG-1         ; LOG()
  8216 00:F9C5: 0B F3              .word LAB_EXP-1         ; EXP()
  8217 00:F9C7: DD F3              .word LAB_COS-1         ; COS()
  8218 00:F9C9: E4 F3              .word LAB_SIN-1         ; SIN()
  8219 00:F9CB: 2D F4              .word LAB_TAN-1         ; TAN()
  8220 00:F9CD: 5F F4              .word LAB_ATN-1         ; ATN()
  8221 00:F9CF: 0F EC              .word LAB_PEEK-1        ; PEEK()
  8222 00:F9D1: 23 EC              .word LAB_DEEK-1        ; DEEK()          new function
  8223 00:F9D3: 68 EB              .word LAB_SADD-1        ; SADD()          new function
  8224 00:F9D5: 81 EB              .word LAB_LENS-1        ; LEN()
  8225 00:F9D7: 33 E8              .word LAB_STRS-1        ; STR$()
  8226 00:F9D9: AE EB              .word LAB_VAL-1         ; VAL()
  8227 00:F9DB: 8C EB              .word LAB_ASC-1         ; ASC()
  8228 00:F9DD: 46 EB              .word LAB_UCASE-1       ; UCASE$()        new function
  8229 00:F9DF: 25 EB              .word LAB_LCASE-1       ; LCASE$()        new function
  8230 00:F9E1: 97 EA              .word LAB_CHRS-1        ; CHR$()
  8231 00:F9E3: 2F F5              .word LAB_HEXS-1        ; HEX$()          new function
  8232 00:F9E5: E0 F4              .word LAB_BINS-1        ; BIN$()          new function
  8233 00:F9E7: B8 F4              .word LAB_BTST-1        ; BITTST()        new function
  8234 00:F9E9: 90 F6              .word LAB_MAX-1         ; MAX()           new function
  8235 00:F9EB: A0 F6              .word LAB_MIN-1         ; MIN()           new function
  8236 00:F9ED: E6 F7              .word LAB_PI-1          ; PI              new function
  8237 00:F9EF: F0 F7              .word LAB_TWOPI-1       ; TWOPI           new function
  8238 00:F9F1: D6 F7              .word LAB_VARPTR-1      ; VARPTR()        new function
  8239 00:F9F3: A9 EA              .word LAB_LEFT-1        ; LEFT$()
  8240 00:F9F5: B2 EA              .word LAB_RIGHT-1       ; RIGHT$()
  8241 00:F9F7: E1 EA              .word LAB_MIDS-1        ; MID$()
  8242                        
  8243                        ; hierarchy and action addresses for operator
  8244                        
  8245                        LAB_OPPT
  8246 00:F9F9: 79                 .byte $79               ; +
  8247 00:F9FA: CD EC              .word LAB_ADD-1
  8248 00:F9FC: 79                 .byte $79               ; -
  8249 00:F9FD: B2 EC              .word LAB_SUBTRACT-1
  8250 00:F9FF: 7B                 .byte $7B               ; *
  8251 00:FA00: 48 EE              .word LAB_MULTIPLY-1
  8252 00:FA02: 7B                 .byte $7B               ; /
  8253 00:FA03: 10 EF              .word LAB_DIVIDE-1
  8254 00:FA05: 7F                 .byte $7F               ; ^
  8255 00:FA06: C7 F2              .word LAB_POWER-1
  8256 00:FA08: 50                 .byte $50               ; AND
  8257 00:FA09: E2 E3              .word LAB_AND-1
  8258 00:FA0B: 46                 .byte $46               ; EOR             new operator
  8259 00:FA0C: C8 E3              .word LAB_EOR-1
  8260 00:FA0E: 46                 .byte $46               ; OR
  8261 00:FA0F: D5 E3              .word LAB_OR-1
  8262 00:FA11: 56                 .byte $56               ; >>              new operator
  8263 00:FA12: 8E E4              .word LAB_RSHIFT-1
  8264 00:FA14: 56                 .byte $56               ; <<              new operator
  8265 00:FA15: 76 E4              .word LAB_LSHIFT-1
  8266 00:FA17: 7D                 .byte $7D               ; >
  8267 00:FA18: 00 F3              .word LAB_GTHAN-1
  8268 00:FA1A: 5A                 .byte $5A               ; =
  8269 00:FA1B: 16 E3              .word LAB_EQUAL-1
  8270 00:FA1D: 64                 .byte $64               ; <
  8271 00:FA1E: 03 E4              .word LAB_LTHAN-1
  8272                        
  8273                        ; keywords start with ..
  8274                        ; this is the first character table and must be in alphabetic order
  8275                        
  8276                        TAB_1STC
  8277 00:FA20: 2A                 .byte "*"
  8278 00:FA21: 2B                 .byte "+"
  8279 00:FA22: 2D                 .byte "-"
  8280 00:FA23: 2F                 .byte "/"
  8281 00:FA24: 3C                 .byte "<"
  8282 00:FA25: 3D                 .byte "="
  8283 00:FA26: 3E                 .byte ">"
  8284 00:FA27: 3F                 .byte "?"
  8285 00:FA28: 41                 .byte "A"
  8286 00:FA29: 42                 .byte "B"
  8287 00:FA2A: 43                 .byte "C"
  8288 00:FA2B: 44                 .byte "D"
  8289 00:FA2C: 45                 .byte "E"
  8290 00:FA2D: 46                 .byte "F"
  8291 00:FA2E: 47                 .byte "G"
  8292 00:FA2F: 48                 .byte "H"
  8293 00:FA30: 49                 .byte "I"
  8294 00:FA31: 4C                 .byte "L"
  8295 00:FA32: 4D                 .byte "M"
  8296 00:FA33: 4E                 .byte "N"
  8297 00:FA34: 4F                 .byte "O"
  8298 00:FA35: 50                 .byte "P"
  8299 00:FA36: 52                 .byte "R"
  8300 00:FA37: 53                 .byte "S"
  8301 00:FA38: 54                 .byte "T"
  8302 00:FA39: 55                 .byte "U"
  8303 00:FA3A: 56                 .byte "V"
  8304 00:FA3B: 57                 .byte "W"
  8305 00:FA3C: 5E                 .byte "^"
  8306 00:FA3D: 00                 .byte $00               ; table terminator
  8307                        
  8308                        ; pointers to keyword tables
  8309                        
  8310                        TAB_CHRT
  8311 00:FA3E: 78 FA              .word TAB_STAR          ; table for "*"
  8312 00:FA40: 7A FA              .word TAB_PLUS          ; table for "+"
  8313 00:FA42: 7C FA              .word TAB_MNUS          ; table for "-"
  8314 00:FA44: 7E FA              .word TAB_SLAS          ; table for "/"
  8315 00:FA46: 80 FA              .word TAB_LESS          ; table for "<"
  8316 00:FA48: 84 FA              .word TAB_EQUL          ; table for "="
  8317 00:FA4A: 86 FA              .word TAB_MORE          ; table for ">"
  8318 00:FA4C: 8A FA              .word TAB_QEST          ; table for "?"
  8319 00:FA4E: 8C FA              .word TAB_ASCA          ; table for "A"
  8320 00:FA50: 9C FA              .word TAB_ASCB          ; table for "B"
  8321 00:FA52: B5 FA              .word TAB_ASCC          ; table for "C"
  8322 00:FA54: CC FA              .word TAB_ASCD          ; table for "D"
  8323 00:FA56: E5 FA              .word TAB_ASCE          ; table for "E"
  8324 00:FA58: F4 FA              .word TAB_ASCF          ; table for "F"
  8325 00:FA5A: FE FA              .word TAB_ASCG          ; table for "G"
  8326 00:FA5C: 0B FB              .word TAB_ASCH          ; table for "H"
  8327 00:FA5E: 11 FB              .word TAB_ASCI          ; table for "I"
  8328 00:FA60: 23 FB              .word TAB_ASCL          ; table for "L"
  8329 00:FA62: 48 FB              .word TAB_ASCM          ; table for "M"
  8330 00:FA64: 56 FB              .word TAB_ASCN          ; table for "N"
  8331 00:FA66: 68 FB              .word TAB_ASCO          ; table for "O"
  8332 00:FA68: 70 FB              .word TAB_ASCP          ; table for "P"
  8333 00:FA6A: 85 FB              .word TAB_ASCR          ; table for "R"
  8334 00:FA6C: B4 FB              .word TAB_ASCS          ; table for "S"
  8335 00:FA6E: DF FB              .word TAB_ASCT          ; table for "T"
  8336 00:FA70: F3 FB              .word TAB_ASCU          ; table for "U"
  8337 00:FA72: 04 FC              .word TAB_ASCV          ; table for "V"
  8338 00:FA74: 10 FC              .word TAB_ASCW          ; table for "W"
  8339 00:FA76: 1F FC              .word TAB_POWR          ; table for "^"
  8340                        
  8341                        ; tables for each start character, note if a longer keyword with the same start
  8342                        ; letters as a shorter one exists then it must come first, else the list is in
  8343                        ; alphabetical order as follows ..
  8344                        
  8345                        ; [keyword,token
  8346                        ; [keyword,token]]
  8347                        ; end marker (#$00)
  8348                        
  8349                        TAB_STAR
  8350 00:FA78: B8 00              .byte TK_MUL,$00        ; *
  8351                        TAB_PLUS
  8352 00:FA7A: B6 00              .byte TK_PLUS,$00       ; +
  8353                        TAB_MNUS
  8354 00:FA7C: B7 00              .byte TK_MINUS,$00      ; -
  8355                        TAB_SLAS
  8356 00:FA7E: B9 00              .byte TK_DIV,$00        ; /
  8357                        TAB_LESS
  8358                        LBB_LSHIFT
  8359 00:FA80: 3C BF              .byte "<",TK_LSHIFT     ; <<  note - "<<" must come before "<"
  8360 00:FA82: C2                 .byte TK_LT             ; <
  8361 00:FA83: 00                 .byte $00
  8362                        TAB_EQUL
  8363 00:FA84: C1 00              .byte TK_EQUAL,$00      ; =
  8364                        TAB_MORE
  8365                        LBB_RSHIFT
  8366 00:FA86: 3E BE              .byte ">",TK_RSHIFT     ; >>  note - ">>" must come before ">"
  8367 00:FA88: C0                 .byte TK_GT             ; >
  8368 00:FA89: 00                 .byte $00
  8369                        TAB_QEST
  8370 00:FA8A: 9F 00              .byte TK_PRINT,$00      ; ?
  8371                        TAB_ASCA
  8372                        LBB_ABS
  8373 00:FA8C: 42 53 28 C5        .byte "BS(",TK_ABS      ; ABS(
  8374                        LBB_AND
  8375 00:FA90: 4E 44 BB           .byte "ND",TK_AND       ; AND
  8376                        LBB_ASC
  8377 00:FA93: 53 43 28 D7        .byte "SC(",TK_ASC      ; ASC(
  8378                        LBB_ATN
  8379 00:FA97: 54 4E 28 D0        .byte "TN(",TK_ATN      ; ATN(
  8380 00:FA9B: 00                 .byte $00
  8381                        TAB_ASCB
  8382                        LBB_BINS
  8383 00:FA9C: 49 4E 24 28        .byte "IN$(",TK_BINS    ; BIN$(
       00:FAA0: DC 
  8384                        LBB_BITCLR
  8385 00:FAA1: 49 54 43 4C        .byte "ITCLR",TK_BITCLR ; BITCLR
       00:FAA5: 52 A8 
  8386                        LBB_BITSET
  8387 00:FAA7: 49 54 53 45        .byte "ITSET",TK_BITSET ; BITSET
       00:FAAB: 54 A7 
  8388                        LBB_BITTST
  8389 00:FAAD: 49 54 54 53        .byte "ITTST(",TK_BITTST
       00:FAB1: 54 28 DD 
  8390                                                      ; BITTST(
  8391 00:FAB4: 00                 .byte $00
  8392                        TAB_ASCC
  8393                        LBB_CALL
  8394 00:FAB5: 41 4C 4C 9C        .byte "ALL",TK_CALL     ; CALL
  8395                        LBB_CHRS
  8396 00:FAB9: 48 52 24 28        .byte "HR$(",TK_CHRS    ; CHR$(
       00:FABD: DA 
  8397                        LBB_CLEAR
  8398 00:FABE: 4C 45 41 52        .byte "LEAR",TK_CLEAR   ; CLEAR
       00:FAC2: A2 
  8399                        LBB_CONT
  8400 00:FAC3: 4F 4E 54 A0        .byte "ONT",TK_CONT     ; CONT
  8401                        LBB_COS
  8402 00:FAC7: 4F 53 28 CD        .byte "OS(",TK_COS      ; COS(
  8403 00:FACB: 00                 .byte $00
  8404                        TAB_ASCD
  8405                        LBB_DATA
  8406 00:FACC: 41 54 41 83        .byte "ATA",TK_DATA     ; DATA
  8407                        LBB_DEC
  8408 00:FAD0: 45 43 88           .byte "EC",TK_DEC       ; DEC
  8409                        LBB_DEEK
  8410 00:FAD3: 45 45 4B 28        .byte "EEK(",TK_DEEK    ; DEEK(
       00:FAD7: D2 
  8411                        LBB_DEF
  8412 00:FAD8: 45 46 99           .byte "EF",TK_DEF       ; DEF
  8413                        LBB_DIM
  8414 00:FADB: 49 4D 85           .byte "IM",TK_DIM       ; DIM
  8415                        LBB_DOKE
  8416 00:FADE: 4F 4B 45 9B        .byte "OKE",TK_DOKE     ; DOKE note - "DOKE" must come before "DO"
  8417                        LBB_DO
  8418 00:FAE2: 4F 9D              .byte "O",TK_DO         ; DO
  8419 00:FAE4: 00                 .byte $00
  8420                        TAB_ASCE
  8421                        LBB_ELSE
  8422 00:FAE5: 4C 53 45 AC        .byte "LSE",TK_ELSE     ; ELSE
  8423                        LBB_END
  8424 00:FAE9: 4E 44 80           .byte "ND",TK_END       ; END
  8425                        LBB_EOR
  8426 00:FAEC: 4F 52 BC           .byte "OR",TK_EOR       ; EOR
  8427                        LBB_EXP
  8428 00:FAEF: 58 50 28 CC        .byte "XP(",TK_EXP      ; EXP(
  8429 00:FAF3: 00                 .byte $00
  8430                        TAB_ASCF
  8431                        LBB_FN
  8432 00:FAF4: 4E AE              .byte "N",TK_FN         ; FN
  8433                        LBB_FOR
  8434 00:FAF6: 4F 52 81           .byte "OR",TK_FOR       ; FOR
  8435                        LBB_FRE
  8436 00:FAF9: 52 45 28 C7        .byte "RE(",TK_FRE      ; FRE(
  8437 00:FAFD: 00                 .byte $00
  8438                        TAB_ASCG
  8439                        LBB_GET
  8440 00:FAFE: 45 54 A5           .byte "ET",TK_GET       ; GET
  8441                        LBB_GOSUB
  8442 00:FB01: 4F 53 55 42        .byte "OSUB",TK_GOSUB   ; GOSUB
       00:FB05: 8D 
  8443                        LBB_GOTO
  8444 00:FB06: 4F 54 4F 89        .byte "OTO",TK_GOTO     ; GOTO
  8445 00:FB0A: 00                 .byte $00
  8446                        TAB_ASCH
  8447                        LBB_HEXS
  8448 00:FB0B: 45 58 24 28        .byte "EX$(",TK_HEXS    ; HEX$(
       00:FB0F: DB 
  8449 00:FB10: 00                 .byte $00
  8450                        TAB_ASCI
  8451                        LBB_IF
  8452 00:FB11: 46 8B              .byte "F",TK_IF         ; IF
  8453                        LBB_INC
  8454 00:FB13: 4E 43 95           .byte "NC",TK_INC       ; INC
  8455                        LBB_INPUT
  8456 00:FB16: 4E 50 55 54        .byte "NPUT",TK_INPUT   ; INPUT
       00:FB1A: 84 
  8457                        LBB_INT
  8458 00:FB1B: 4E 54 28 C4        .byte "NT(",TK_INT      ; INT(
  8459                        LBB_IRQ
  8460 00:FB1F: 52 51 A9           .byte "RQ",TK_IRQ       ; IRQ
  8461 00:FB22: 00                 .byte $00
  8462                        TAB_ASCL
  8463                        LBB_LCASES
  8464 00:FB23: 43 41 53 45        .byte "CASE$(",TK_LCASES
       00:FB27: 24 28 D9 
  8465                                                      ; LCASE$(
  8466                        LBB_LEFTS
  8467 00:FB2A: 45 46 54 24        .byte "EFT$(",TK_LEFTS  ; LEFT$(
       00:FB2E: 28 E3 
  8468                        LBB_LEN
  8469 00:FB30: 45 4E 28 D4        .byte "EN(",TK_LEN      ; LEN(
  8470                        LBB_LET
  8471 00:FB34: 45 54 87           .byte "ET",TK_LET       ; LET
  8472                        LBB_LIST
  8473 00:FB37: 49 53 54 A1        .byte "IST",TK_LIST     ; LIST
  8474                        LBB_LOAD
  8475 00:FB3B: 4F 41 44 97        .byte "OAD",TK_LOAD     ; LOAD
  8476                        LBB_LOG
  8477 00:FB3F: 4F 47 28 CB        .byte "OG(",TK_LOG      ; LOG(
  8478                        LBB_LOOP
  8479 00:FB43: 4F 4F 50 9E        .byte "OOP",TK_LOOP     ; LOOP
  8480 00:FB47: 00                 .byte $00
  8481                        TAB_ASCM
  8482                        LBB_MAX
  8483 00:FB48: 41 58 28 DE        .byte "AX(",TK_MAX      ; MAX(
  8484                        LBB_MIDS
  8485 00:FB4C: 49 44 24 28        .byte "ID$(",TK_MIDS    ; MID$(
       00:FB50: E5 
  8486                        LBB_MIN
  8487 00:FB51: 49 4E 28 DF        .byte "IN(",TK_MIN      ; MIN(
  8488 00:FB55: 00                 .byte $00
  8489                        TAB_ASCN
  8490                        LBB_NEW
  8491 00:FB56: 45 57 A3           .byte "EW",TK_NEW       ; NEW
  8492                        LBB_NEXT
  8493 00:FB59: 45 58 54 82        .byte "EXT",TK_NEXT     ; NEXT
  8494                        LBB_NMI
  8495 00:FB5D: 4D 49 AA           .byte "MI",TK_NMI       ; NMI
  8496                        LBB_NOT
  8497 00:FB60: 4F 54 B1           .byte "OT",TK_NOT       ; NOT
  8498                        LBB_NULL
  8499 00:FB63: 55 4C 4C 94        .byte "ULL",TK_NULL     ; NULL
  8500 00:FB67: 00                 .byte $00
  8501                        TAB_ASCO
  8502                        LBB_OFF
  8503 00:FB68: 46 46 B5           .byte "FF",TK_OFF       ; OFF
  8504                        LBB_ON
  8505 00:FB6B: 4E 93              .byte "N",TK_ON         ; ON
  8506                        LBB_OR
  8507 00:FB6D: 52 BD              .byte "R",TK_OR         ; OR
  8508 00:FB6F: 00                 .byte $00
  8509                        TAB_ASCP
  8510                        LBB_PEEK
  8511 00:FB70: 45 45 4B 28        .byte "EEK(",TK_PEEK    ; PEEK(
       00:FB74: D1 
  8512                        LBB_PI
  8513 00:FB75: 49 E0              .byte "I",TK_PI         ; PI
  8514                        LBB_POKE
  8515 00:FB77: 4F 4B 45 9A        .byte "OKE",TK_POKE     ; POKE
  8516                        LBB_POS
  8517 00:FB7B: 4F 53 28 C8        .byte "OS(",TK_POS      ; POS(
  8518                        LBB_PRINT
  8519 00:FB7F: 52 49 4E 54        .byte "RINT",TK_PRINT   ; PRINT
       00:FB83: 9F 
  8520 00:FB84: 00                 .byte $00
  8521                        TAB_ASCR
  8522                        LBB_READ
  8523 00:FB85: 45 41 44 86        .byte "EAD",TK_READ     ; READ
  8524                        LBB_REM
  8525 00:FB89: 45 4D 91           .byte "EM",TK_REM       ; REM
  8526                        LBB_RESTORE
  8527 00:FB8C: 45 53 54 4F        .byte "ESTORE",TK_RESTORE
       00:FB90: 52 45 8C 
  8528                                                      ; RESTORE
  8529                        LBB_RETIRQ
  8530 00:FB93: 45 54 49 52        .byte "ETIRQ",TK_RETIRQ ; RETIRQ
       00:FB97: 51 8E 
  8531                        LBB_RETNMI
  8532 00:FB99: 45 54 4E 4D        .byte "ETNMI",TK_RETNMI ; RETNMI
       00:FB9D: 49 8F 
  8533                        LBB_RETURN
  8534 00:FB9F: 45 54 55 52        .byte "ETURN",TK_RETURN ; RETURN
       00:FBA3: 4E 90 
  8535                        LBB_RIGHTS
  8536 00:FBA5: 49 47 48 54        .byte "IGHT$(",TK_RIGHTS
       00:FBA9: 24 28 E4 
  8537                                                      ; RIGHT$(
  8538                        LBB_RND
  8539 00:FBAC: 4E 44 28 CA        .byte "ND(",TK_RND      ; RND(
  8540                        LBB_RUN
  8541 00:FBB0: 55 4E 8A           .byte "UN",TK_RUN       ; RUN
  8542 00:FBB3: 00                 .byte $00
  8543                        TAB_ASCS
  8544                        LBB_SADD
  8545 00:FBB4: 41 44 44 28        .byte "ADD(",TK_SADD    ; SADD(
       00:FBB8: D3 
  8546                        LBB_SAVE
  8547 00:FBB9: 41 56 45 98        .byte "AVE",TK_SAVE     ; SAVE
  8548                        LBB_SGN
  8549 00:FBBD: 47 4E 28 C3        .byte "GN(",TK_SGN      ; SGN(
  8550                        LBB_SIN
  8551 00:FBC1: 49 4E 28 CE        .byte "IN(",TK_SIN      ; SIN(
  8552                        LBB_SPC
  8553 00:FBC5: 50 43 28 AF        .byte "PC(",TK_SPC      ; SPC(
  8554                        LBB_SQR
  8555 00:FBC9: 51 52 28 C9        .byte "QR(",TK_SQR      ; SQR(
  8556                        LBB_STEP
  8557 00:FBCD: 54 45 50 B2        .byte "TEP",TK_STEP     ; STEP
  8558                        LBB_STOP
  8559 00:FBD1: 54 4F 50 92        .byte "TOP",TK_STOP     ; STOP
  8560                        LBB_STRS
  8561 00:FBD5: 54 52 24 28        .byte "TR$(",TK_STRS    ; STR$(
       00:FBD9: D5 
  8562                        LBB_SWAP
  8563 00:FBDA: 57 41 50 A6        .byte "WAP",TK_SWAP     ; SWAP
  8564 00:FBDE: 00                 .byte $00
  8565                        TAB_ASCT
  8566                        LBB_TAB
  8567 00:FBDF: 41 42 28 AB        .byte "AB(",TK_TAB      ; TAB(
  8568                        LBB_TAN
  8569 00:FBE3: 41 4E 28 CF        .byte "AN(",TK_TAN      ; TAN(
  8570                        LBB_THEN
  8571 00:FBE7: 48 45 4E B0        .byte "HEN",TK_THEN     ; THEN
  8572                        LBB_TO
  8573 00:FBEB: 4F AD              .byte "O",TK_TO         ; TO
  8574                        LBB_TWOPI
  8575 00:FBED: 57 4F 50 49        .byte "WOPI",TK_TWOPI   ; TWOPI
       00:FBF1: E1 
  8576 00:FBF2: 00                 .byte $00
  8577                        TAB_ASCU
  8578                        LBB_UCASES
  8579 00:FBF3: 43 41 53 45        .byte "CASE$(",TK_UCASES
       00:FBF7: 24 28 D8 
  8580                                                      ; UCASE$(
  8581                        LBB_UNTIL
  8582 00:FBFA: 4E 54 49 4C        .byte "NTIL",TK_UNTIL   ; UNTIL
       00:FBFE: B3 
  8583                        LBB_USR
  8584 00:FBFF: 53 52 28 C6        .byte "SR(",TK_USR      ; USR(
  8585 00:FC03: 00                 .byte $00
  8586                        TAB_ASCV
  8587                        LBB_VAL
  8588 00:FC04: 41 4C 28 D6        .byte "AL(",TK_VAL      ; VAL(
  8589                        LBB_VPTR
  8590 00:FC08: 41 52 50 54        .byte "ARPTR(",TK_VPTR  ; VARPTR(
       00:FC0C: 52 28 E2 
  8591 00:FC0F: 00                 .byte $00
  8592                        TAB_ASCW
  8593                        LBB_WAIT
  8594 00:FC10: 41 49 54 96        .byte "AIT",TK_WAIT     ; WAIT
  8595                        LBB_WHILE
  8596 00:FC14: 48 49 4C 45        .byte "HILE",TK_WHILE   ; WHILE
       00:FC18: B4 
  8597                        LBB_WIDTH
  8598 00:FC19: 49 44 54 48        .byte "IDTH",TK_WIDTH   ; WIDTH
       00:FC1D: A4 
  8599 00:FC1E: 00                 .byte $00
  8600                        TAB_POWR
  8601 00:FC1F: BA 00              .byte TK_POWER,$00      ; ^
  8602                        
  8603                        ; new decode table for LIST
  8604                        ; Table is ..
  8605                        ; byte - keyword length, keyword first character
  8606                        ; word - pointer to rest of keyword from dictionary
  8607                        
  8608                        ; note if length is 1 then the pointer is ignored
  8609                        
  8610                        LAB_KEYT
  8611 00:FC21: 03 45              .byte 3,'E'
  8612 00:FC23: E9 FA              .word LBB_END           ; END
  8613 00:FC25: 03 46              .byte 3,'F'
  8614 00:FC27: F6 FA              .word LBB_FOR           ; FOR
  8615 00:FC29: 04 4E              .byte 4,'N'
  8616 00:FC2B: 59 FB              .word LBB_NEXT          ; NEXT
  8617 00:FC2D: 04 44              .byte 4,'D'
  8618 00:FC2F: CC FA              .word LBB_DATA          ; DATA
  8619 00:FC31: 05 49              .byte 5,'I'
  8620 00:FC33: 16 FB              .word LBB_INPUT         ; INPUT
  8621 00:FC35: 03 44              .byte 3,'D'
  8622 00:FC37: DB FA              .word LBB_DIM           ; DIM
  8623 00:FC39: 04 52              .byte 4,'R'
  8624 00:FC3B: 85 FB              .word LBB_READ          ; READ
  8625 00:FC3D: 03 4C              .byte 3,'L'
  8626 00:FC3F: 34 FB              .word LBB_LET           ; LET
  8627 00:FC41: 03 44              .byte 3,'D'
  8628 00:FC43: D0 FA              .word LBB_DEC           ; DEC
  8629 00:FC45: 04 47              .byte 4,'G'
  8630 00:FC47: 06 FB              .word LBB_GOTO          ; GOTO
  8631 00:FC49: 03 52              .byte 3,'R'
  8632 00:FC4B: B0 FB              .word LBB_RUN           ; RUN
  8633 00:FC4D: 02 49              .byte 2,'I'
  8634 00:FC4F: 11 FB              .word LBB_IF            ; IF
  8635 00:FC51: 07 52              .byte 7,'R'
  8636 00:FC53: 8C FB              .word LBB_RESTORE       ; RESTORE
  8637 00:FC55: 05 47              .byte 5,'G'
  8638 00:FC57: 01 FB              .word LBB_GOSUB         ; GOSUB
  8639 00:FC59: 06 52              .byte 6,'R'
  8640 00:FC5B: 93 FB              .word LBB_RETIRQ        ; RETIRQ
  8641 00:FC5D: 06 52              .byte 6,'R'
  8642 00:FC5F: 99 FB              .word LBB_RETNMI        ; RETNMI
  8643 00:FC61: 06 52              .byte 6,'R'
  8644 00:FC63: 9F FB              .word LBB_RETURN        ; RETURN
  8645 00:FC65: 03 52              .byte 3,'R'
  8646 00:FC67: 89 FB              .word LBB_REM           ; REM
  8647 00:FC69: 04 53              .byte 4,'S'
  8648 00:FC6B: D1 FB              .word LBB_STOP          ; STOP
  8649 00:FC6D: 02 4F              .byte 2,'O'
  8650 00:FC6F: 6B FB              .word LBB_ON            ; ON
  8651 00:FC71: 04 4E              .byte 4,'N'
  8652 00:FC73: 63 FB              .word LBB_NULL          ; NULL
  8653 00:FC75: 03 49              .byte 3,'I'
  8654 00:FC77: 13 FB              .word LBB_INC           ; INC
  8655 00:FC79: 04 57              .byte 4,'W'
  8656 00:FC7B: 10 FC              .word LBB_WAIT          ; WAIT
  8657 00:FC7D: 04 4C              .byte 4,'L'
  8658 00:FC7F: 3B FB              .word LBB_LOAD          ; LOAD
  8659 00:FC81: 04 53              .byte 4,'S'
  8660 00:FC83: B9 FB              .word LBB_SAVE          ; SAVE
  8661 00:FC85: 03 44              .byte 3,'D'
  8662 00:FC87: D8 FA              .word LBB_DEF           ; DEF
  8663 00:FC89: 04 50              .byte 4,'P'
  8664 00:FC8B: 77 FB              .word LBB_POKE          ; POKE
  8665 00:FC8D: 04 44              .byte 4,'D'
  8666 00:FC8F: DE FA              .word LBB_DOKE          ; DOKE
  8667 00:FC91: 04 43              .byte 4,'C'
  8668 00:FC93: B5 FA              .word LBB_CALL          ; CALL
  8669 00:FC95: 02 44              .byte 2,'D'
  8670 00:FC97: E2 FA              .word LBB_DO            ; DO
  8671 00:FC99: 04 4C              .byte 4,'L'
  8672 00:FC9B: 43 FB              .word LBB_LOOP          ; LOOP
  8673 00:FC9D: 05 50              .byte 5,'P'
  8674 00:FC9F: 7F FB              .word LBB_PRINT         ; PRINT
  8675 00:FCA1: 04 43              .byte 4,'C'
  8676 00:FCA3: C3 FA              .word LBB_CONT          ; CONT
  8677 00:FCA5: 04 4C              .byte 4,'L'
  8678 00:FCA7: 37 FB              .word LBB_LIST          ; LIST
  8679 00:FCA9: 05 43              .byte 5,'C'
  8680 00:FCAB: BE FA              .word LBB_CLEAR         ; CLEAR
  8681 00:FCAD: 03 4E              .byte 3,'N'
  8682 00:FCAF: 56 FB              .word LBB_NEW           ; NEW
  8683 00:FCB1: 05 57              .byte 5,'W'
  8684 00:FCB3: 19 FC              .word LBB_WIDTH         ; WIDTH
  8685 00:FCB5: 03 47              .byte 3,'G'
  8686 00:FCB7: FE FA              .word LBB_GET           ; GET
  8687 00:FCB9: 04 53              .byte 4,'S'
  8688 00:FCBB: DA FB              .word LBB_SWAP          ; SWAP
  8689 00:FCBD: 06 42              .byte 6,'B'
  8690 00:FCBF: A7 FA              .word LBB_BITSET        ; BITSET
  8691 00:FCC1: 06 42              .byte 6,'B'
  8692 00:FCC3: A1 FA              .word LBB_BITCLR        ; BITCLR
  8693 00:FCC5: 03 49              .byte 3,'I'
  8694 00:FCC7: 1F FB              .word LBB_IRQ           ; IRQ
  8695 00:FCC9: 03 4E              .byte 3,'N'
  8696 00:FCCB: 5D FB              .word LBB_NMI           ; NMI
  8697                        
  8698                        ; secondary commands (can't start a statement)
  8699                        
  8700 00:FCCD: 04 54              .byte 4,'T'
  8701 00:FCCF: DF FB              .word LBB_TAB           ; TAB
  8702 00:FCD1: 04 45              .byte 4,'E'
  8703 00:FCD3: E5 FA              .word LBB_ELSE          ; ELSE
  8704 00:FCD5: 02 54              .byte 2,'T'
  8705 00:FCD7: EB FB              .word LBB_TO            ; TO
  8706 00:FCD9: 02 46              .byte 2,'F'
  8707 00:FCDB: F4 FA              .word LBB_FN            ; FN
  8708 00:FCDD: 04 53              .byte 4,'S'
  8709 00:FCDF: C5 FB              .word LBB_SPC           ; SPC
  8710 00:FCE1: 04 54              .byte 4,'T'
  8711 00:FCE3: E7 FB              .word LBB_THEN          ; THEN
  8712 00:FCE5: 03 4E              .byte 3,'N'
  8713 00:FCE7: 60 FB              .word LBB_NOT           ; NOT
  8714 00:FCE9: 04 53              .byte 4,'S'
  8715 00:FCEB: CD FB              .word LBB_STEP          ; STEP
  8716 00:FCED: 05 55              .byte 5,'U'
  8717 00:FCEF: FA FB              .word LBB_UNTIL         ; UNTIL
  8718 00:FCF1: 05 57              .byte 5,'W'
  8719 00:FCF3: 14 FC              .word LBB_WHILE         ; WHILE
  8720 00:FCF5: 03 4F              .byte 3,'O'
  8721 00:FCF7: 68 FB              .word LBB_OFF           ; OFF
  8722                        
  8723                        ; opperators
  8724                        
  8725 00:FCF9: 01 2B              .byte 1,'+'
  8726 00:FCFB: 00 00              .word $0000             ; +
  8727 00:FCFD: 01 2D              .byte 1,'-'
  8728 00:FCFF: 00 00              .word $0000             ; -
  8729 00:FD01: 01 2A              .byte 1,'*'
  8730 00:FD03: 00 00              .word $0000             ; *
  8731 00:FD05: 01 2F              .byte 1,'/'
  8732 00:FD07: 00 00              .word $0000             ; /
  8733 00:FD09: 01 5E              .byte 1,'^'
  8734 00:FD0B: 00 00              .word $0000             ; ^
  8735 00:FD0D: 03 41              .byte 3,'A'
  8736 00:FD0F: 90 FA              .word LBB_AND           ; AND
  8737 00:FD11: 03 45              .byte 3,'E'
  8738 00:FD13: EC FA              .word LBB_EOR           ; EOR
  8739 00:FD15: 02 4F              .byte 2,'O'
  8740 00:FD17: 6D FB              .word LBB_OR            ; OR
  8741 00:FD19: 02 3E              .byte 2,'>'
  8742 00:FD1B: 86 FA              .word LBB_RSHIFT        ; >>
  8743 00:FD1D: 02 3C              .byte 2,'<'
  8744 00:FD1F: 80 FA              .word LBB_LSHIFT        ; <<
  8745 00:FD21: 01 3E              .byte 1,'>'
  8746 00:FD23: 00 00              .word $0000             ; >
  8747 00:FD25: 01 3D              .byte 1,'='
  8748 00:FD27: 00 00              .word $0000             ; =
  8749 00:FD29: 01 3C              .byte 1,'<'
  8750 00:FD2B: 00 00              .word $0000             ; <
  8751                        
  8752                        ; functions
  8753                        
  8754 00:FD2D: 04 53              .byte 4,'S'             ;
  8755 00:FD2F: BD FB              .word LBB_SGN           ; SGN
  8756 00:FD31: 04 49              .byte 4,'I'             ;
  8757 00:FD33: 1B FB              .word LBB_INT           ; INT
  8758 00:FD35: 04 41              .byte 4,'A'             ;
  8759 00:FD37: 8C FA              .word LBB_ABS           ; ABS
  8760 00:FD39: 04 55              .byte 4,'U'             ;
  8761 00:FD3B: FF FB              .word LBB_USR           ; USR
  8762 00:FD3D: 04 46              .byte 4,'F'             ;
  8763 00:FD3F: F9 FA              .word LBB_FRE           ; FRE
  8764 00:FD41: 04 50              .byte 4,'P'             ;
  8765 00:FD43: 7B FB              .word LBB_POS           ; POS
  8766 00:FD45: 04 53              .byte 4,'S'             ;
  8767 00:FD47: C9 FB              .word LBB_SQR           ; SQR
  8768 00:FD49: 04 52              .byte 4,'R'             ;
  8769 00:FD4B: AC FB              .word LBB_RND           ; RND
  8770 00:FD4D: 04 4C              .byte 4,'L'             ;
  8771 00:FD4F: 3F FB              .word LBB_LOG           ; LOG
  8772 00:FD51: 04 45              .byte 4,'E'             ;
  8773 00:FD53: EF FA              .word LBB_EXP           ; EXP
  8774 00:FD55: 04 43              .byte 4,'C'             ;
  8775 00:FD57: C7 FA              .word LBB_COS           ; COS
  8776 00:FD59: 04 53              .byte 4,'S'             ;
  8777 00:FD5B: C1 FB              .word LBB_SIN           ; SIN
  8778 00:FD5D: 04 54              .byte 4,'T'             ;
  8779 00:FD5F: E3 FB              .word LBB_TAN           ; TAN
  8780 00:FD61: 04 41              .byte 4,'A'             ;
  8781 00:FD63: 97 FA              .word LBB_ATN           ; ATN
  8782 00:FD65: 05 50              .byte 5,'P'             ;
  8783 00:FD67: 70 FB              .word LBB_PEEK          ; PEEK
  8784 00:FD69: 05 44              .byte 5,'D'             ;
  8785 00:FD6B: D3 FA              .word LBB_DEEK          ; DEEK
  8786 00:FD6D: 05 53              .byte 5,'S'             ;
  8787 00:FD6F: B4 FB              .word LBB_SADD          ; SADD
  8788 00:FD71: 04 4C              .byte 4,'L'             ;
  8789 00:FD73: 30 FB              .word LBB_LEN           ; LEN
  8790 00:FD75: 05 53              .byte 5,'S'             ;
  8791 00:FD77: D5 FB              .word LBB_STRS          ; STR$
  8792 00:FD79: 04 56              .byte 4,'V'             ;
  8793 00:FD7B: 04 FC              .word LBB_VAL           ; VAL
  8794 00:FD7D: 04 41              .byte 4,'A'             ;
  8795 00:FD7F: 93 FA              .word LBB_ASC           ; ASC
  8796 00:FD81: 07 55              .byte 7,'U'             ;
  8797 00:FD83: F3 FB              .word LBB_UCASES        ; UCASE$
  8798 00:FD85: 07 4C              .byte 7,'L'             ;
  8799 00:FD87: 23 FB              .word LBB_LCASES        ; LCASE$
  8800 00:FD89: 05 43              .byte 5,'C'             ;
  8801 00:FD8B: B9 FA              .word LBB_CHRS          ; CHR$
  8802 00:FD8D: 05 48              .byte 5,'H'             ;
  8803 00:FD8F: 0B FB              .word LBB_HEXS          ; HEX$
  8804 00:FD91: 05 42              .byte 5,'B'             ;
  8805 00:FD93: 9C FA              .word LBB_BINS          ; BIN$
  8806 00:FD95: 07 42              .byte 7,'B'             ;
  8807 00:FD97: AD FA              .word LBB_BITTST        ; BITTST
  8808 00:FD99: 04 4D              .byte 4,'M'             ;
  8809 00:FD9B: 48 FB              .word LBB_MAX           ; MAX
  8810 00:FD9D: 04 4D              .byte 4,'M'             ;
  8811 00:FD9F: 51 FB              .word LBB_MIN           ; MIN
  8812 00:FDA1: 02 50              .byte 2,'P'             ;
  8813 00:FDA3: 75 FB              .word LBB_PI            ; PI
  8814 00:FDA5: 05 54              .byte 5,'T'             ;
  8815 00:FDA7: ED FB              .word LBB_TWOPI         ; TWOPI
  8816 00:FDA9: 07 56              .byte 7,'V'             ;
  8817 00:FDAB: 08 FC              .word LBB_VPTR          ; VARPTR
  8818 00:FDAD: 06 4C              .byte 6,'L'             ;
  8819 00:FDAF: 2A FB              .word LBB_LEFTS         ; LEFT$
  8820 00:FDB1: 07 52              .byte 7,'R'             ;
  8821 00:FDB3: A5 FB              .word LBB_RIGHTS        ; RIGHT$
  8822 00:FDB5: 05 4D              .byte 5,'M'             ;
  8823 00:FDB7: 4C FB              .word LBB_MIDS          ; MID$
  8824                        
  8825                        ; BASIC messages, mostly error messages
  8826                        
  8827                        LAB_BAER
  8828 00:FDB9: DD FD              .word ERR_NF            ;$00 NEXT without FOR
  8829 00:FDBB: EE FD              .word ERR_SN            ;$02 syntax
  8830 00:FDBD: F5 FD              .word ERR_RG            ;$04 RETURN without GOSUB
  8831 00:FDBF: 0A FE              .word ERR_OD            ;$06 out of data
  8832 00:FDC1: 16 FE              .word ERR_FC            ;$08 function call
  8833 00:FDC3: 24 FE              .word ERR_OV            ;$0A overflow
  8834 00:FDC5: 2D FE              .word ERR_OM            ;$0C out of memory
  8835 00:FDC7: 3B FE              .word ERR_US            ;$0E undefined statement
  8836 00:FDC9: 4F FE              .word ERR_BS            ;$10 array bounds
  8837 00:FDCB: 5C FE              .word ERR_DD            ;$12 double dimension array
  8838 00:FDCD: 6D FE              .word ERR_D0            ;$14 divide by 0
  8839 00:FDCF: 7C FE              .word ERR_ID            ;$16 illegal direct
  8840 00:FDD1: 8B FE              .word ERR_TM            ;$18 type mismatch
  8841 00:FDD3: 99 FE              .word ERR_LS            ;$1A long string
  8842 00:FDD5: A9 FE              .word ERR_ST            ;$1C string too complex
  8843 00:FDD7: BC FE              .word ERR_CN            ;$1E continue error
  8844 00:FDD9: CB FE              .word ERR_UF            ;$20 undefined function
  8845 00:FDDB: DE FE              .word ERR_LD            ;$22 LOOP without DO
  8846                        
  8847                        ; I may implement these two errors to force definition of variables and
  8848                        ; dimensioning of arrays before use.
  8849                        
  8850                        ;     .word ERR_UV            ;$24 undefined variable
  8851                        
  8852                        ; the above error has been tested and works (see code and comments below LAB_1D8B)
  8853                        
  8854                        ;     .word ERR_UA            ;$26 undimensioned array
  8855                        
  8856 00:FDDD: 4E 45 58 54  ERR_NF      .byte "NEXT without FOR",$00
       00:FDE1: 20 77 69 74 
       00:FDE5: 68 6F 75 74 
       00:FDE9: 20 46 4F 52 
       00:FDED: 00 
  8857 00:FDEE: 53 79 6E 74  ERR_SN      .byte "Syntax",$00
       00:FDF2: 61 78 00 
  8858 00:FDF5: 52 45 54 55  ERR_RG      .byte "RETURN without GOSUB",$00
       00:FDF9: 52 4E 20 77 
       00:FDFD: 69 74 68 6F 
       00:FE01: 75 74 20 47 
       00:FE05: 4F 53 55 42 
       00:FE09: 00 
  8859 00:FE0A: 4F 75 74 20  ERR_OD      .byte "Out of DATA",$00
       00:FE0E: 6F 66 20 44 
       00:FE12: 41 54 41 00 
  8860 00:FE16: 46 75 6E 63  ERR_FC      .byte "Function call",$00
       00:FE1A: 74 69 6F 6E 
       00:FE1E: 20 63 61 6C 
       00:FE22: 6C 00 
  8861 00:FE24: 4F 76 65 72  ERR_OV      .byte "Overflow",$00
       00:FE28: 66 6C 6F 77 
       00:FE2C: 00 
  8862 00:FE2D: 4F 75 74 20  ERR_OM      .byte "Out of memory",$00
       00:FE31: 6F 66 20 6D 
       00:FE35: 65 6D 6F 72 
       00:FE39: 79 00 
  8863 00:FE3B: 55 6E 64 65  ERR_US      .byte "Undefined statement",$00
       00:FE3F: 66 69 6E 65 
       00:FE43: 64 20 73 74 
       00:FE47: 61 74 65 6D 
       00:FE4B: 65 6E 74 00 
  8864 00:FE4F: 41 72 72 61  ERR_BS      .byte "Array bounds",$00
       00:FE53: 79 20 62 6F 
       00:FE57: 75 6E 64 73 
       00:FE5B: 00 
  8865 00:FE5C: 44 6F 75 62  ERR_DD      .byte "Double dimension",$00
       00:FE60: 6C 65 20 64 
       00:FE64: 69 6D 65 6E 
       00:FE68: 73 69 6F 6E 
       00:FE6C: 00 
  8866 00:FE6D: 44 69 76 69  ERR_D0      .byte "Divide by zero",$00
       00:FE71: 64 65 20 62 
       00:FE75: 79 20 7A 65 
       00:FE79: 72 6F 00 
  8867 00:FE7C: 49 6C 6C 65  ERR_ID      .byte "Illegal direct",$00
       00:FE80: 67 61 6C 20 
       00:FE84: 64 69 72 65 
       00:FE88: 63 74 00 
  8868 00:FE8B: 54 79 70 65  ERR_TM      .byte "Type mismatch",$00
       00:FE8F: 20 6D 69 73 
       00:FE93: 6D 61 74 63 
       00:FE97: 68 00 
  8869 00:FE99: 53 74 72 69  ERR_LS      .byte "String too long",$00
       00:FE9D: 6E 67 20 74 
       00:FEA1: 6F 6F 20 6C 
       00:FEA5: 6F 6E 67 00 
  8870 00:FEA9: 53 74 72 69  ERR_ST      .byte "String too complex",$00
       00:FEAD: 6E 67 20 74 
       00:FEB1: 6F 6F 20 63 
       00:FEB5: 6F 6D 70 6C 
       00:FEB9: 65 78 00 
  8871 00:FEBC: 43 61 6E 27  ERR_CN      .byte "Can't continue",$00
       00:FEC0: 74 20 63 6F 
       00:FEC4: 6E 74 69 6E 
       00:FEC8: 75 65 00 
  8872 00:FECB: 55 6E 64 65  ERR_UF      .byte "Undefined function",$00
       00:FECF: 66 69 6E 65 
       00:FED3: 64 20 66 75 
       00:FED7: 6E 63 74 69 
       00:FEDB: 6F 6E 00 
  8873 00:FEDE: 4C 4F 4F 50  ERR_LD      .byte "LOOP without DO",$00
       00:FEE2: 20 77 69 74 
       00:FEE6: 68 6F 75 74 
       00:FEEA: 20 44 4F 00 
  8874                        
  8875                        ;ERR_UV     .byte "Undefined variable",$00
  8876                        
  8877                        ; the above error has been tested and works (see code and comments below LAB_1D8B)
  8878                        
  8879                        ;ERR_UA     .byte "Undimensioned array",$00
  8880                        
  8881 00:FEEE: 0D 0A 42 72  LAB_BMSG    .byte $0D,$0A,"Break",$00
       00:FEF2: 65 61 6B 00 
  8882 00:FEF6: 20 45 72 72  LAB_EMSG    .byte " Error",$00
       00:FEFA: 6F 72 00 
  8883 00:FEFD: 20 69 6E 20  LAB_LMSG    .byte " in line ",$00
       00:FF01: 6C 69 6E 65 
       00:FF05: 20 00 
  8884 00:FF07: 0D 0A 52 65  LAB_RMSG    .byte $0D,$0A,"Ready",$0D,$0A,$00
       00:FF0B: 61 64 79 0D 
       00:FF0F: 0A 00 
  8885                        
  8886 00:FF11: 20 45 78 74  LAB_IMSG    .byte " Extra ignored",$0D,$0A,$00
       00:FF15: 72 61 20 69 
       00:FF19: 67 6E 6F 72 
       00:FF1D: 65 64 0D 0A 
       00:FF21: 00 
  8887 00:FF22: 20 52 65 64  LAB_REDO    .byte " Redo from start",$0D,$0A,$00
       00:FF26: 6F 20 66 72 
       00:FF2A: 6F 6D 20 73 
       00:FF2E: 74 61 72 74 
       00:FF32: 0D 0A 00 
  8888                        
  8889                        AA_end_basic
    13                        
    14                        ; put the IRQ and MNI code in RAM so that it can be changed
    15                        
    16             0000020D   IRQ_vec equ VEC_SV+2              ; IRQ code vector
    17             00000217   NMI_vec equ IRQ_vec+$0A   ; NMI code vector
    18                        
    19                        ; now the code. all this does is set up the vectors and interrupt code
    20                        ; and wait for the user to select [C]old or [W]arm start. nothing else
    21                        ; fits in less than 128 bytes
    22                        
    23                        
    24                        ;        .dsb    $FF60 - *, $FF
    25                                org $FF60
    26                        ; reset vector points here
    27                        
    28                        RES_vec
    29 00:FF60: 78                   SEI
    30 00:FF61: D8                   CLD                             ; clear decimal mode
    31 00:FF62: A2 FF                LDX     #$FF                    ; empty stack
    32 00:FF64: 9A                   TXS                             ; set the stack
    33                        
    34 00:FF65: 20 93 FF             jsr     INIT_RPB        ; clear PIC request command table
    35                        
    36                        ; set up vectors and interrupt code, copy them to page 2
    37                        
    38 00:FF68: A0 1C                LDY     #END_CODE-LAB_vec       ; set index/count
    39                        LAB_stlp
    40 00:FF6A: B9 B5 FF             LDA     LAB_vec-1,Y             ; get byte from interrupt code
    41 00:FF6D: 99 04 02             STA     VEC_IN-1,Y              ; save to RAM
    42 00:FF70: 88                   DEY                             ; decrement index/count
    43 00:FF71: D0 F7                BNE     LAB_stlp                ; loop if more to do
    44                        
    45                        ; now do the signon message, Y = $00 here
    46                        
    47                        
    48                        LAB_signon
    49 00:FF73: B9 D2 FF             LDA     LAB_mess,Y              ; get byte from sign on message
    50 00:FF76: F0 06                BEQ     LAB_nokey               ; exit loop if done
    51                        
    52 00:FF78: 20 AC FF             JSR     CONOUT                  ; output character
    53 00:FF7B: C8                   INY                             ; increment index
    54 00:FF7C: D0 F5                BNE     LAB_signon              ; loop, branch always
    55                        
    56                        LAB_nokey
    57 00:FF7E: 20 9C FF             JSR     CONIN                   ; call scan input device
    58 00:FF81: 90 FB                BCC     LAB_nokey               ; loop if no key
    59                        
    60 00:FF83: 29 DF                AND     #$DF                    ; mask xx0x xxxx, ensure upper case
    61 00:FF85: C9 57                CMP     #'W'                    ; compare with [W]arm start
    62 00:FF87: F0 07                BEQ     LAB_dowarm              ; branch if [W]arm start
    63                        
    64 00:FF89: C9 43                CMP     #'C'                    ; compare with [C]old start
    65 00:FF8B: D0 D3                BNE     RES_vec                 ; loop if not [C]old start
    66                        
    67 00:FF8D: 4C 00 D7             JMP     LAB_COLD                ; do EhBASIC cold start
    68                        
    69                        LAB_dowarm
    70 00:FF90: 4C 00 00             JMP     LAB_WARM                ; do EhBASIC warm start
    71                        
    72                        ;;;
    73                        ;;;     Console Driver
    74                        ;;;
    75                        
    76             00000001   CONIN_REQ     equ       $01
    77             00000002   CONOUT_REQ    equ       $02
    78             00000003   CONST_REQ     equ       $03
    79             00000004   STROUT_REQ    equ       $04
    80                        
    81             00000018   UREQ_COM      equ       $18     ; CONIN/CONOUT request command (SYS)
    82             0000001A   CREQ_COM      equ       $1A     ; CONIN/CONOUT request command (User)
    83             0000001B   CBI_CHR       equ       $1B     ; charcter (CONIN/CONOUT) or number of strings
    84                        
    85                        ;  ---- request command to PIC
    86                        ; UREQ_COM = 1 ; CONIN  : return char in UNI_CHR
    87                        ;          = 2 ; CONOUT : UNI_CHR = output char
    88                        ;          = 3 ; CONST  : return status in UNI_CHR
    89                        ;                       : ( 0: no key, 1 : key exist )
    90                        ;
    91                        ; PIC18F47QXX I/F( zero page )
    92                        ; adr :
    93                        ;  18 : UREQ_COM        rmb     1       ; unimon CONIN/CONOUT request command
    94                        ;  19 : UNI_CHR         rmb     1       ; charcter (CONIN/CONOUT) or number of strings
    95                        ;  1A : CREQ_COM        rmb     1       ; unimon CONIN/CONOUT request command
    96                        ;  1B : CBI_CHR         rmb     1       ; charcter (CONIN/CONOUT) or number of strings
    97                        
    98                        
    99                        INIT_RPB
   100                                ; clear Reqest Parameter Block
   101 00:FF93: A9 00                lda     #0
   102 00:FF95: 85 18                sta     UREQ_COM
   103 00:FF97: 85 1A                sta     CREQ_COM
   104                        no_load                         ; empty load vector for EhBASIC
   105                        no_save                         ; empty save vector for EhBASIC
   106 00:FF99: 60                   RTS
   107                        
   108                        no_key
   109 00:FF9A: 18                   clc
   110 00:FF9B: 60                   RTS
   111                        
   112                        CONIN
   113 00:FF9C: A9 03                lda     #CONST_REQ
   114 00:FF9E: 20 A5 FF             jsr     wup_pic
   115 00:FFA1: F0 F7                beq     no_key
   116                        
   117 00:FFA3: A9 01                lda     #CONIN_REQ
   118                        
   119                        wup_pic
   120 00:FFA5: 85 1A                sta     CREQ_COM
   121 00:FFA7: CB                   wai                     ; RDY = 0, wait /IRQ detect
   122                        ;        nop
   123                        ;        nop
   124                        ;        nop
   125                        ;        nop
   126                        ;        nop
   127                        ;        nop
   128                        ;        nop
   129                        ;        nop
   130                        
   131 00:FFA8: A5 1B                lda     CBI_CHR
   132 00:FFAA: 38                   sec
   133 00:FFAB: 60                   RTS
   134                        
   135                        CONOUT
   136 00:FFAC: 85 1B                sta     CBI_CHR         ; set char
   137 00:FFAE: 48                   pha
   138 00:FFAF: A9 02                lda     #CONOUT_REQ
   139 00:FFB1: 20 A5 FF             jsr     wup_pic
   140 00:FFB4: 68                   pla
   141 00:FFB5: 60                   rts
   142                        
   143                        ; vector tables
   144                        
   145                        LAB_vec
   146 00:FFB6: 9C FF                .word   CONIN           ; byte in from simulated ACIA
   147 00:FFB8: AC FF                .word   CONOUT          ; byte out to simulated ACIA
   148 00:FFBA: 99 FF                .word   no_load         ; null load vector for EhBASIC
   149 00:FFBC: 99 FF                .word   no_save         ; null save vector for EhBASIC
   150                        
   151                        ; EhBASIC IRQ support
   152                        
   153                        IRQ_CODE
   154 00:FFBE: 48                   PHA                     ; save A
   155 00:FFBF: A5 DF                LDA     IrqBase         ; get the IRQ flag byte
   156 00:FFC1: 4A                   LSR                     ; shift the set b7 to b6, and on down ...
   157 00:FFC2: 05 DF                ORA     IrqBase         ; OR the original back in
   158 00:FFC4: 85 DF                STA     IrqBase         ; save the new IRQ flag byte
   159 00:FFC6: 68                   PLA                             ; restore A
   160 00:FFC7: 40                   RTI
   161                        
   162                        ; EhBASIC NMI support
   163                        
   164                        NMI_CODE
   165 00:FFC8: 48                   PHA                     ; save A
   166 00:FFC9: A5 DC                LDA     NmiBase         ; get the NMI flag byte
   167 00:FFCB: 4A                   LSR                     ; shift the set b7 to b6, and on down ...
   168 00:FFCC: 05 DC                ORA     NmiBase         ; OR the original back in
   169 00:FFCE: 85 DC                STA     NmiBase         ; save the new NMI flag byte
   170 00:FFD0: 68                   PLA                     ; restore A
   171 00:FFD1: 40                   RTI
   172                        
   173                        END_CODE
   174                        
   175                        LAB_mess
   176 00:FFD2: 0D 0A 36 35          .byte   $0D,$0A,"6502 EhBASIC [C]old/[W]arm ?",$00
       00:FFD6: 30 32 20 45 
       00:FFDA: 68 42 41 53 
       00:FFDE: 49 43 20 5B 
       00:FFE2: 43 5D 6F 6C 
       00:FFE6: 64 2F 5B 57 
       00:FFEA: 5D 61 72 6D 
       00:FFEE: 20 3F 00 
   177                                                                ; sign on string
   178                        
   179                        ; system vectors
   180                        
   181                        ;        .dsb    $FFFA - *, $FF
   182                                org $FFFA
   183                        
   184 00:FFFA: 17 02                .word   NMI_vec         ; NMI vector
   185 00:FFFC: 60 FF                .word   RES_vec         ; RESET vector
   186 00:FFFE: 0D 02                .word   IRQ_vec         ; IRQ vector
   187                        


      Lines assembled: 9076
      Errors: 0
